
COMPort_chat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003658  08003658  00013658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800371c  0800371c  0001371c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003724  08003724  00013724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003728  08003728  00013728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000270  20000000  0800372c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001b0  20000270  0800399c  00020270  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000420  0800399c  00020420  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012b5b  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002936  00000000  00000000  00032dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007b0a  00000000  00000000  00035731  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ac8  00000000  00000000  0003d240  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001740  00000000  00000000  0003dd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006be7  00000000  00000000  0003f448  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000049e5  00000000  00000000  0004602f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004aa14  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000228c  00000000  00000000  0004aa90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003640 	.word	0x08003640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	08003640 	.word	0x08003640

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_UART_RxCpltCallback>:
	return retVal;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 /* Set transmission flag: transfer complete*/
 UartReady = SET;
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <HAL_UART_RxCpltCallback+0x8>)
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
 8000596:	4770      	bx	lr
 8000598:	200001ff 	.word	0x200001ff

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a0:	2100      	movs	r1, #0
{
 80005a2:	b0ac      	sub	sp, #176	; 0xb0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	a806      	add	r0, sp, #24
 80005a8:	2244      	movs	r2, #68	; 0x44
 80005aa:	f002 fc23 	bl	8002df4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ae:	4621      	mov	r1, r4
 80005b0:	2254      	movs	r2, #84	; 0x54
 80005b2:	a817      	add	r0, sp, #92	; 0x5c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	9402      	str	r4, [sp, #8]
 80005b6:	9401      	str	r4, [sp, #4]
 80005b8:	9403      	str	r4, [sp, #12]
 80005ba:	9404      	str	r4, [sp, #16]
 80005bc:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005be:	f002 fc19 	bl	8002df4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005c2:	f001 f889 	bl	80016d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005c6:	4a23      	ldr	r2, [pc, #140]	; (8000654 <SystemClock_Config+0xb8>)
 80005c8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80005cc:	f023 0318 	bic.w	r3, r3, #24
 80005d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005d4:	2501      	movs	r5, #1
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2602      	movs	r6, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005d8:	f04f 0814 	mov.w	r8, #20
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005dc:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005de:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e0:	2707      	movs	r7, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005e4:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005e6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005e8:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005ea:	f8cd 8018 	str.w	r8, [sp, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005ee:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f0:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005f2:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005f4:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f8:	9615      	str	r6, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fa:	9616      	str	r6, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005fc:	9714      	str	r7, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f001 f91f 	bl	8001840 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000606:	a801      	add	r0, sp, #4
 8000608:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000610:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000612:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000614:	f001 fcb2 	bl	8001f7c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000618:	f244 0103 	movw	r1, #16387	; 0x4003
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800061c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000624:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000626:	9117      	str	r1, [sp, #92]	; 0x5c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000628:	9229      	str	r2, [sp, #164]	; 0xa4
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800062a:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800062c:	941f      	str	r4, [sp, #124]	; 0x7c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800062e:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000630:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000632:	9519      	str	r5, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8000634:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000638:	971b      	str	r7, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800063a:	961c      	str	r6, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800063c:	961d      	str	r6, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063e:	f001 fdeb 	bl	8002218 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000642:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000646:	f001 f857 	bl	80016f8 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800064a:	f001 ff3f 	bl	80024cc <HAL_RCCEx_EnableMSIPLLMode>
}
 800064e:	b02c      	add	sp, #176	; 0xb0
 8000650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000654:	40021000 	.word	0x40021000

08000658 <main>:
{
 8000658:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800065c:	b08d      	sub	sp, #52	; 0x34
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	2400      	movs	r4, #0
  HAL_Init();
 8000660:	f000 fab4 	bl	8000bcc <HAL_Init>
  SystemClock_Config();
 8000664:	f7ff ff9a 	bl	800059c <SystemClock_Config>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000668:	4b8f      	ldr	r3, [pc, #572]	; (80008a8 <main+0x250>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	9404      	str	r4, [sp, #16]
 800066c:	9403      	str	r4, [sp, #12]
 800066e:	9405      	str	r4, [sp, #20]
 8000670:	9406      	str	r4, [sp, #24]
 8000672:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hadc1.Instance = ADC1;
 8000676:	4d8d      	ldr	r5, [pc, #564]	; (80008ac <main+0x254>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000678:	488d      	ldr	r0, [pc, #564]	; (80008b0 <main+0x258>)
  hdac1.Instance = DAC1;
 800067a:	4f8e      	ldr	r7, [pc, #568]	; (80008b4 <main+0x25c>)
  huart1.Instance = USART1;
 800067c:	4e8e      	ldr	r6, [pc, #568]	; (80008b8 <main+0x260>)
  c_str = sprintf(Buff, "System Clock: %lu kHz\r\nSYSCLK: %lu kHz\r\n", SystemCoreClock/1000, HAL_RCC_GetSysClockFreq()/1000);
 800067e:	f8df 8270 	ldr.w	r8, [pc, #624]	; 80008f0 <main+0x298>
	    	sprintf(Buff, "Bytes: %d", len_str);
 8000682:	f8df b260 	ldr.w	fp, [pc, #608]	; 80008e4 <main+0x28c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	f042 0204 	orr.w	r2, r2, #4
 800068a:	64da      	str	r2, [r3, #76]	; 0x4c
 800068c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800068e:	f002 0204 	and.w	r2, r2, #4
 8000692:	9200      	str	r2, [sp, #0]
 8000694:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000698:	f042 0201 	orr.w	r2, r2, #1
 800069c:	64da      	str	r2, [r3, #76]	; 0x4c
 800069e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006a0:	f002 0201 	and.w	r2, r2, #1
 80006a4:	9201      	str	r2, [sp, #4]
 80006a6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006aa:	f042 0202 	orr.w	r2, r2, #2
 80006ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006b6:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b8:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006ba:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006bc:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	f04f 0a01 	mov.w	sl, #1
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006c2:	f000 fff9 	bl	80016b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006c6:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = LD3_Pin;
 80006c8:	2308      	movs	r3, #8
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006ca:	4879      	ldr	r0, [pc, #484]	; (80008b0 <main+0x258>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	9405      	str	r4, [sp, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ce:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = LD3_Pin;
 80006d4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	f8cd a010 	str.w	sl, [sp, #16]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006da:	f000 ff15 	bl	8001508 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 80006de:	4b77      	ldr	r3, [pc, #476]	; (80008bc <main+0x264>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e0:	606c      	str	r4, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e2:	4628      	mov	r0, r5
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e4:	60ac      	str	r4, [r5, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e6:	60ec      	str	r4, [r5, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e8:	612c      	str	r4, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ea:	762c      	strb	r4, [r5, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ec:	766c      	strb	r4, [r5, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ee:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f2:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f4:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f6:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006fa:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006fc:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Instance = ADC1;
 8000700:	602b      	str	r3, [r5, #0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000702:	f8c5 9014 	str.w	r9, [r5, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	9403      	str	r4, [sp, #12]
 8000708:	9404      	str	r4, [sp, #16]
 800070a:	9405      	str	r4, [sp, #20]
 800070c:	9406      	str	r4, [sp, #24]
 800070e:	9407      	str	r4, [sp, #28]
 8000710:	9408      	str	r4, [sp, #32]
  hadc1.Init.NbrOfConversion = 1;
 8000712:	f8c5 a01c 	str.w	sl, [r5, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000716:	f000 fa91 	bl	8000c3c <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_8;
 800071a:	4b69      	ldr	r3, [pc, #420]	; (80008c0 <main+0x268>)
 800071c:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800071e:	2206      	movs	r2, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000720:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	4628      	mov	r0, r5
 8000724:	a903      	add	r1, sp, #12
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000726:	9306      	str	r3, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000728:	9405      	str	r4, [sp, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800072a:	f8cd 901c 	str.w	r9, [sp, #28]
  sConfig.Offset = 0;
 800072e:	9408      	str	r4, [sp, #32]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000730:	9204      	str	r2, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000732:	f000 fb5f 	bl	8000df4 <HAL_ADC_ConfigChannel>
  DAC_ChannelConfTypeDef sConfig = {0};
 8000736:	4621      	mov	r1, r4
 8000738:	2224      	movs	r2, #36	; 0x24
 800073a:	a803      	add	r0, sp, #12
 800073c:	f002 fb5a 	bl	8002df4 <memset>
  hdac1.Instance = DAC1;
 8000740:	4b60      	ldr	r3, [pc, #384]	; (80008c4 <main+0x26c>)
 8000742:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000744:	4638      	mov	r0, r7
 8000746:	f000 fe11 	bl	800136c <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800074a:	a903      	add	r1, sp, #12
 800074c:	4622      	mov	r2, r4
 800074e:	4638      	mov	r0, r7
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000750:	9403      	str	r4, [sp, #12]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000752:	9404      	str	r4, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000754:	9405      	str	r4, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000756:	9406      	str	r4, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000758:	9407      	str	r4, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800075a:	f000 fe1d 	bl	8001398 <HAL_DAC_ConfigChannel>
  huart1.Instance = USART1;
 800075e:	4b5a      	ldr	r3, [pc, #360]	; (80008c8 <main+0x270>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000760:	60b4      	str	r4, [r6, #8]
  huart1.Init.BaudRate = 115200;
 8000762:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000766:	250c      	movs	r5, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000768:	4630      	mov	r0, r6
  huart1.Init.BaudRate = 115200;
 800076a:	e886 0088 	stmia.w	r6, {r3, r7}
  huart1.Init.StopBits = UART_STOPBITS_1;
 800076e:	60f4      	str	r4, [r6, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000770:	6134      	str	r4, [r6, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	61b4      	str	r4, [r6, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	61f4      	str	r4, [r6, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000776:	6234      	str	r4, [r6, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	6274      	str	r4, [r6, #36]	; 0x24
  huart1.Init.Mode = UART_MODE_TX_RX;
 800077a:	6175      	str	r5, [r6, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800077c:	f002 f9b0 	bl	8002ae0 <HAL_UART_Init>
  huart2.Instance = USART2;
 8000780:	4b52      	ldr	r3, [pc, #328]	; (80008cc <main+0x274>)
 8000782:	4a53      	ldr	r2, [pc, #332]	; (80008d0 <main+0x278>)
  huart2.Init.BaudRate = 115200;
 8000784:	605f      	str	r7, [r3, #4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4618      	mov	r0, r3
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000788:	609c      	str	r4, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078a:	60dc      	str	r4, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078c:	611c      	str	r4, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078e:	615d      	str	r5, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000790:	619c      	str	r4, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000792:	61dc      	str	r4, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000794:	621c      	str	r4, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000796:	625c      	str	r4, [r3, #36]	; 0x24
  huart2.Instance = USART2;
 8000798:	601a      	str	r2, [r3, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	f002 f9a1 	bl	8002ae0 <HAL_UART_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800079e:	4622      	mov	r2, r4
 80007a0:	4621      	mov	r1, r4
 80007a2:	2026      	movs	r0, #38	; 0x26
 80007a4:	f000 fd84 	bl	80012b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007a8:	2026      	movs	r0, #38	; 0x26
 80007aa:	f000 fdb7 	bl	800131c <HAL_NVIC_EnableIRQ>
  HAL_Delay(200);
 80007ae:	20c8      	movs	r0, #200	; 0xc8
 80007b0:	f000 fa32 	bl	8000c18 <HAL_Delay>
  c_str = sprintf(Buff, "System Clock: %lu kHz\r\nSYSCLK: %lu kHz\r\n", SystemCoreClock/1000, HAL_RCC_GetSysClockFreq()/1000);
 80007b4:	4b47      	ldr	r3, [pc, #284]	; (80008d4 <main+0x27c>)
 80007b6:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80008f4 <main+0x29c>
 80007ba:	681c      	ldr	r4, [r3, #0]
 80007bc:	4f46      	ldr	r7, [pc, #280]	; (80008d8 <main+0x280>)
 80007be:	4d47      	ldr	r5, [pc, #284]	; (80008dc <main+0x284>)
 80007c0:	f000 ffe4 	bl	800178c <HAL_RCC_GetSysClockFreq>
 80007c4:	fba8 3404 	umull	r3, r4, r8, r4
 80007c8:	09a4      	lsrs	r4, r4, #6
 80007ca:	fba8 2300 	umull	r2, r3, r8, r0
 80007ce:	099b      	lsrs	r3, r3, #6
 80007d0:	4622      	mov	r2, r4
 80007d2:	4943      	ldr	r1, [pc, #268]	; (80008e0 <main+0x288>)
 80007d4:	4843      	ldr	r0, [pc, #268]	; (80008e4 <main+0x28c>)
 80007d6:	4c44      	ldr	r4, [pc, #272]	; (80008e8 <main+0x290>)
 80007d8:	f002 fb14 	bl	8002e04 <siprintf>
 80007dc:	b2c1      	uxtb	r1, r0
  HAL_UART_Transmit(&huart1, (uint8_t *) Buff, c_str, 200);
 80007de:	460a      	mov	r2, r1
  c_str = sprintf(Buff, "System Clock: %lu kHz\r\nSYSCLK: %lu kHz\r\n", SystemCoreClock/1000, HAL_RCC_GetSysClockFreq()/1000);
 80007e0:	f889 1000 	strb.w	r1, [r9]
  HAL_UART_Transmit(&huart1, (uint8_t *) Buff, c_str, 200);
 80007e4:	4630      	mov	r0, r6
 80007e6:	23c8      	movs	r3, #200	; 0xc8
 80007e8:	493e      	ldr	r1, [pc, #248]	; (80008e4 <main+0x28c>)
 80007ea:	f001 fe77 	bl	80024dc <HAL_UART_Transmit>
	while(UartReady == SET){
 80007ee:	782b      	ldrb	r3, [r5, #0]
	    len_str = c_str = 0; Buff[0] = '\0';
 80007f0:	4a3c      	ldr	r2, [pc, #240]	; (80008e4 <main+0x28c>)
 80007f2:	f04f 0800 	mov.w	r8, #0
	while(UartReady == SET){
 80007f6:	2b01      	cmp	r3, #1
	    len_str = c_str = 0; Buff[0] = '\0';
 80007f8:	f889 8000 	strb.w	r8, [r9]
 80007fc:	f887 8000 	strb.w	r8, [r7]
 8000800:	f882 8000 	strb.w	r8, [r2]
	addrB[retVal] = '\0';
 8000804:	bf18      	it	ne
 8000806:	f884 8000 	strbne.w	r8, [r4]
	while(UartReady == SET){
 800080a:	d130      	bne.n	800086e <main+0x216>
		if(addrB[retVal] == '\n') UartReady = RESET;
 800080c:	46c2      	mov	sl, r8
		HAL_UART_Receive_IT(&huart1, (uint8_t *) (addrB + retVal), 1);
 800080e:	2201      	movs	r2, #1
 8000810:	eb04 0108 	add.w	r1, r4, r8
 8000814:	4630      	mov	r0, r6
 8000816:	f001 ff1b 	bl	8002650 <HAL_UART_Receive_IT>
		if(addrB[retVal] == '\n') UartReady = RESET;
 800081a:	f914 3008 	ldrsb.w	r3, [r4, r8]
 800081e:	2b0a      	cmp	r3, #10
 8000820:	bf08      	it	eq
 8000822:	f885 a000 	strbeq.w	sl, [r5]
	while(UartReady == SET){
 8000826:	782b      	ldrb	r3, [r5, #0]
 8000828:	f108 0801 	add.w	r8, r8, #1
 800082c:	fa5f f288 	uxtb.w	r2, r8
 8000830:	2b01      	cmp	r3, #1
 8000832:	fa4f f882 	sxtb.w	r8, r2
 8000836:	d0ea      	beq.n	800080e <main+0x1b6>
	addrB[retVal] = '\0';
 8000838:	f04f 0a00 	mov.w	sl, #0
 800083c:	f804 a008 	strb.w	sl, [r4, r8]
	    if(strlen(Buffin) > 0) {
 8000840:	7823      	ldrb	r3, [r4, #0]
	    len_str = uart_receive(Buffin);
 8000842:	703a      	strb	r2, [r7, #0]
	    if(strlen(Buffin) > 0) {
 8000844:	b193      	cbz	r3, 800086c <main+0x214>
	    	HAL_UART_Transmit(&huart2, (uint8_t *) Buffin, (uint16_t) strlen(Buffin), 200);
 8000846:	4828      	ldr	r0, [pc, #160]	; (80008e8 <main+0x290>)
 8000848:	f7ff fcc2 	bl	80001d0 <strlen>
 800084c:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8000850:	b282      	uxth	r2, r0
 8000852:	23c8      	movs	r3, #200	; 0xc8
 8000854:	4924      	ldr	r1, [pc, #144]	; (80008e8 <main+0x290>)
 8000856:	481d      	ldr	r0, [pc, #116]	; (80008cc <main+0x274>)
 8000858:	f001 fe40 	bl	80024dc <HAL_UART_Transmit>
 800085c:	4642      	mov	r2, r8
 800085e:	4651      	mov	r1, sl
 8000860:	4821      	ldr	r0, [pc, #132]	; (80008e8 <main+0x290>)
 8000862:	f002 fac7 	bl	8002df4 <memset>
 8000866:	783a      	ldrb	r2, [r7, #0]
 8000868:	f889 8000 	strb.w	r8, [r9]
	    if(len_str > 0) {
 800086c:	b922      	cbnz	r2, 8000878 <main+0x220>
	    HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800086e:	2108      	movs	r1, #8
 8000870:	480f      	ldr	r0, [pc, #60]	; (80008b0 <main+0x258>)
 8000872:	f000 ff27 	bl	80016c4 <HAL_GPIO_TogglePin>
	    len_str = c_str = 0; Buff[0] = '\0';
 8000876:	e7ba      	b.n	80007ee <main+0x196>
	    	sprintf(Buff, "Bytes: %d", len_str);
 8000878:	491c      	ldr	r1, [pc, #112]	; (80008ec <main+0x294>)
 800087a:	4658      	mov	r0, fp
 800087c:	f002 fac2 	bl	8002e04 <siprintf>
	    	HAL_UART_Transmit(&huart1, (uint8_t *) Buff, strlen(Buff), 200);
 8000880:	4658      	mov	r0, fp
 8000882:	f7ff fca5 	bl	80001d0 <strlen>
 8000886:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800088a:	b282      	uxth	r2, r0
 800088c:	23c8      	movs	r3, #200	; 0xc8
 800088e:	4659      	mov	r1, fp
 8000890:	4630      	mov	r0, r6
 8000892:	f001 fe23 	bl	80024dc <HAL_UART_Transmit>
 8000896:	4642      	mov	r2, r8
 8000898:	2100      	movs	r1, #0
 800089a:	4658      	mov	r0, fp
 800089c:	f002 faaa 	bl	8002df4 <memset>
 80008a0:	f889 8000 	strb.w	r8, [r9]
 80008a4:	e7e3      	b.n	800086e <main+0x216>
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000
 80008ac:	200002b0 	.word	0x200002b0
 80008b0:	48000400 	.word	0x48000400
 80008b4:	2000029c 	.word	0x2000029c
 80008b8:	20000314 	.word	0x20000314
 80008bc:	50040000 	.word	0x50040000
 80008c0:	21800100 	.word	0x21800100
 80008c4:	40007400 	.word	0x40007400
 80008c8:	40013800 	.word	0x40013800
 80008cc:	20000398 	.word	0x20000398
 80008d0:	40004400 	.word	0x40004400
 80008d4:	20000200 	.word	0x20000200
 80008d8:	20000298 	.word	0x20000298
 80008dc:	200001ff 	.word	0x200001ff
 80008e0:	08003658 	.word	0x08003658
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000100 	.word	0x20000100
 80008ec:	08003684 	.word	0x08003684
 80008f0:	10624dd3 	.word	0x10624dd3
 80008f4:	20000394 	.word	0x20000394

080008f8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_MspInit+0x2c>)
 80008fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008fc:	f042 0201 	orr.w	r2, r2, #1
 8000900:	661a      	str	r2, [r3, #96]	; 0x60
 8000902:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8000904:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	f002 0201 	and.w	r2, r2, #1
 800090a:	9200      	str	r2, [sp, #0]
 800090c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000910:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000914:	659a      	str	r2, [r3, #88]	; 0x58
 8000916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091c:	9301      	str	r3, [sp, #4]
 800091e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000920:	b002      	add	sp, #8
 8000922:	4770      	bx	lr
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000928:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800092a:	6801      	ldr	r1, [r0, #0]
 800092c:	4a16      	ldr	r2, [pc, #88]	; (8000988 <HAL_ADC_MspInit+0x60>)
{
 800092e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8000932:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	9304      	str	r3, [sp, #16]
 8000936:	9303      	str	r3, [sp, #12]
 8000938:	9305      	str	r3, [sp, #20]
 800093a:	9306      	str	r3, [sp, #24]
 800093c:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 800093e:	d001      	beq.n	8000944 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000940:	b008      	add	sp, #32
 8000942:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 8000944:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000948:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC_CLK_ENABLE();
 800094e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000954:	64da      	str	r2, [r3, #76]	; 0x4c
 8000956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000958:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800095c:	9201      	str	r2, [sp, #4]
 800095e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000962:	f042 0201 	orr.w	r2, r2, #1
 8000966:	64da      	str	r2, [r3, #76]	; 0x4c
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000970:	2208      	movs	r2, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000972:	230b      	movs	r3, #11
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800097a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800097c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f000 fdc3 	bl	8001508 <HAL_GPIO_Init>
}
 8000982:	b008      	add	sp, #32
 8000984:	bd10      	pop	{r4, pc}
 8000986:	bf00      	nop
 8000988:	50040000 	.word	0x50040000

0800098c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800098c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 800098e:	6801      	ldr	r1, [r0, #0]
 8000990:	4a16      	ldr	r2, [pc, #88]	; (80009ec <HAL_DAC_MspInit+0x60>)
{
 8000992:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	2300      	movs	r3, #0
  if(hdac->Instance==DAC1)
 8000996:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	9304      	str	r3, [sp, #16]
 800099a:	9303      	str	r3, [sp, #12]
 800099c:	9305      	str	r3, [sp, #20]
 800099e:	9306      	str	r3, [sp, #24]
 80009a0:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC1)
 80009a2:	d001      	beq.n	80009a8 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80009a4:	b008      	add	sp, #32
 80009a6:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 80009a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80009ac:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 80009b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009b4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80009b8:	659a      	str	r2, [r3, #88]	; 0x58
 80009ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009bc:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80009c0:	9201      	str	r2, [sp, #4]
 80009c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009c6:	f042 0201 	orr.w	r2, r2, #1
 80009ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009d4:	2210      	movs	r2, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009de:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f000 fd91 	bl	8001508 <HAL_GPIO_Init>
}
 80009e6:	b008      	add	sp, #32
 80009e8:	bd10      	pop	{r4, pc}
 80009ea:	bf00      	nop
 80009ec:	40007400 	.word	0x40007400

080009f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 80009f2:	6803      	ldr	r3, [r0, #0]
 80009f4:	4a32      	ldr	r2, [pc, #200]	; (8000ac0 <HAL_UART_MspInit+0xd0>)
{
 80009f6:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 80009fa:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	9406      	str	r4, [sp, #24]
 80009fe:	9405      	str	r4, [sp, #20]
 8000a00:	9407      	str	r4, [sp, #28]
 8000a02:	9408      	str	r4, [sp, #32]
 8000a04:	9409      	str	r4, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8000a06:	d031      	beq.n	8000a6c <HAL_UART_MspInit+0x7c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8000a08:	4a2e      	ldr	r2, [pc, #184]	; (8000ac4 <HAL_UART_MspInit+0xd4>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d001      	beq.n	8000a12 <HAL_UART_MspInit+0x22>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a0e:	b00b      	add	sp, #44	; 0x2c
 8000a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a12:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <HAL_UART_MspInit+0xd8>)
 8000a14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a16:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a1a:	659a      	str	r2, [r3, #88]	; 0x58
 8000a1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a1e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000a22:	9203      	str	r2, [sp, #12]
 8000a24:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a28:	f042 0201 	orr.w	r2, r2, #1
 8000a2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a38:	2204      	movs	r2, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3c:	2307      	movs	r3, #7
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	a905      	add	r1, sp, #20
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a44:	9309      	str	r3, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	9f04      	ldr	r7, [sp, #16]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a48:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f000 fd5b 	bl	8001508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a56:	a905      	add	r1, sp, #20
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a60:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a64:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f000 fd4f 	bl	8001508 <HAL_GPIO_Init>
}
 8000a6a:	e7d0      	b.n	8000a0e <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <HAL_UART_MspInit+0xd8>)
 8000a6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a74:	661a      	str	r2, [r3, #96]	; 0x60
 8000a76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a78:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000a7c:	9201      	str	r2, [sp, #4]
 8000a7e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a82:	f042 0201 	orr.w	r2, r2, #1
 8000a86:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a92:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a96:	f44f 66c0 	mov.w	r6, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aa2:	9309      	str	r3, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	9f02      	ldr	r7, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aa6:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f000 fd2d 	bl	8001508 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000aae:	4622      	mov	r2, r4
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	2025      	movs	r0, #37	; 0x25
 8000ab4:	f000 fbfc 	bl	80012b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ab8:	2025      	movs	r0, #37	; 0x25
 8000aba:	f000 fc2f 	bl	800131c <HAL_NVIC_EnableIRQ>
 8000abe:	e7a6      	b.n	8000a0e <HAL_UART_MspInit+0x1e>
 8000ac0:	40013800 	.word	0x40013800
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40021000 	.word	0x40021000

08000acc <NMI_Handler>:
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad0:	e7fe      	b.n	8000ad0 <HardFault_Handler>
 8000ad2:	bf00      	nop

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler>
 8000ad6:	bf00      	nop

08000ad8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad8:	e7fe      	b.n	8000ad8 <BusFault_Handler>
 8000ada:	bf00      	nop

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler>
 8000ade:	bf00      	nop

08000ae0 <SVC_Handler>:
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <DebugMon_Handler>:
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 b882 	b.w	8000bf4 <HAL_IncTick>

08000af0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000af0:	4801      	ldr	r0, [pc, #4]	; (8000af8 <USART1_IRQHandler+0x8>)
 8000af2:	f001 be7d 	b.w	80027f0 <HAL_UART_IRQHandler>
 8000af6:	bf00      	nop
 8000af8:	20000314 	.word	0x20000314

08000afc <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <_sbrk+0x2c>)
{
 8000afe:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8000b00:	6813      	ldr	r3, [r2, #0]
 8000b02:	b173      	cbz	r3, 8000b22 <_sbrk+0x26>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000b04:	4418      	add	r0, r3
 8000b06:	4669      	mov	r1, sp
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	d802      	bhi.n	8000b12 <_sbrk+0x16>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8000b0c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	bd08      	pop	{r3, pc}
		errno = ENOMEM;
 8000b12:	f002 f945 	bl	8002da0 <__errno>
 8000b16:	230c      	movs	r3, #12
 8000b18:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8000b22:	4b02      	ldr	r3, [pc, #8]	; (8000b2c <_sbrk+0x30>)
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	e7ed      	b.n	8000b04 <_sbrk+0x8>
 8000b28:	2000028c 	.word	0x2000028c
 8000b2c:	20000420 	.word	0x20000420

08000b30 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4911      	ldr	r1, [pc, #68]	; (8000b78 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b34:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8000b38:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8000b3c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b3e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 8000b42:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b44:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8000b46:	f042 0201 	orr.w	r2, r2, #1
 8000b4a:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8000b4c:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8000b54:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b58:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 8000b5c:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 8000b5e:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b60:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b62:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= 0xFFFBFFFFU;
 8000b66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b6a:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000U;
 8000b6c:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b6e:	608c      	str	r4, [r1, #8]
#endif
}
 8000b70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	40021000 	.word	0x40021000

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_InitTick+0x40>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b90b      	cbnz	r3, 8000b8c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b88:	2001      	movs	r0, #1
 8000b8a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b8c:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <HAL_InitTick+0x44>)
 8000b8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b92:	4605      	mov	r5, r0
 8000b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b98:	6808      	ldr	r0, [r1, #0]
 8000b9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b9e:	f000 fbcb 	bl	8001338 <HAL_SYSTICK_Config>
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	d1ef      	bne.n	8000b88 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba8:	2d0f      	cmp	r5, #15
 8000baa:	d8ed      	bhi.n	8000b88 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bac:	4602      	mov	r2, r0
 8000bae:	4629      	mov	r1, r5
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f000 fb7c 	bl	80012b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_InitTick+0x48>)
 8000bba:	4620      	mov	r0, r4
 8000bbc:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000bbe:	bd38      	pop	{r3, r4, r5, pc}
 8000bc0:	20000204 	.word	0x20000204
 8000bc4:	20000200 	.word	0x20000200
 8000bc8:	20000208 	.word	0x20000208

08000bcc <HAL_Init>:
{
 8000bcc:	b500      	push	{lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bce:	2003      	movs	r0, #3
{
 8000bd0:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd2:	f000 fb5b 	bl	800128c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff ffd2 	bl	8000b80 <HAL_InitTick>
 8000bdc:	b118      	cbz	r0, 8000be6 <HAL_Init+0x1a>
    status = HAL_ERROR;
 8000bde:	2001      	movs	r0, #1
}
 8000be0:	b003      	add	sp, #12
 8000be2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000be6:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 8000be8:	f7ff fe86 	bl	80008f8 <HAL_MspInit>
 8000bec:	9801      	ldr	r0, [sp, #4]
}
 8000bee:	b003      	add	sp, #12
 8000bf0:	f85d fb04 	ldr.w	pc, [sp], #4

08000bf4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000bf4:	4a03      	ldr	r2, [pc, #12]	; (8000c04 <HAL_IncTick+0x10>)
 8000bf6:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <HAL_IncTick+0x14>)
 8000bf8:	6811      	ldr	r1, [r2, #0]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	440b      	add	r3, r1
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000418 	.word	0x20000418
 8000c08:	20000204 	.word	0x20000204

08000c0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c0c:	4b01      	ldr	r3, [pc, #4]	; (8000c14 <HAL_GetTick+0x8>)
 8000c0e:	6818      	ldr	r0, [r3, #0]
}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000418 	.word	0x20000418

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff fff6 	bl	8000c0c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c20:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000c22:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000c24:	d002      	beq.n	8000c2c <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <HAL_Delay+0x20>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c2c:	f7ff ffee 	bl	8000c0c <HAL_GetTick>
 8000c30:	1b40      	subs	r0, r0, r5
 8000c32:	4284      	cmp	r4, r0
 8000c34:	d8fa      	bhi.n	8000c2c <HAL_Delay+0x14>
  {
  }
}
 8000c36:	bd38      	pop	{r3, r4, r5, pc}
 8000c38:	20000204 	.word	0x20000204

08000c3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000c44:	2800      	cmp	r0, #0
 8000c46:	f000 80b6 	beq.w	8000db6 <HAL_ADC_Init+0x17a>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c4a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	f000 809e 	beq.w	8000d90 <HAL_ADC_Init+0x154>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000c54:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000c56:	6893      	ldr	r3, [r2, #8]
 8000c58:	0098      	lsls	r0, r3, #2
 8000c5a:	d505      	bpl.n	8000c68 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c5c:	6893      	ldr	r3, [r2, #8]
 8000c5e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c66:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c68:	6893      	ldr	r3, [r2, #8]
 8000c6a:	00d9      	lsls	r1, r3, #3
 8000c6c:	d417      	bmi.n	8000c9e <HAL_ADC_Init+0x62>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000c6e:	4b5c      	ldr	r3, [pc, #368]	; (8000de0 <HAL_ADC_Init+0x1a4>)
  MODIFY_REG(ADCx->CR,
 8000c70:	6891      	ldr	r1, [r2, #8]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	485b      	ldr	r0, [pc, #364]	; (8000de4 <HAL_ADC_Init+0x1a8>)
 8000c76:	099b      	lsrs	r3, r3, #6
 8000c78:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8000c7c:	fba0 0303 	umull	r0, r3, r0, r3
 8000c80:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000c84:	099b      	lsrs	r3, r3, #6
 8000c86:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000c8a:	6091      	str	r1, [r2, #8]
 8000c8c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000c8e:	9b01      	ldr	r3, [sp, #4]
 8000c90:	b12b      	cbz	r3, 8000c9e <HAL_ADC_Init+0x62>
    {
      wait_loop_index--;
 8000c92:	9b01      	ldr	r3, [sp, #4]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000c98:	9b01      	ldr	r3, [sp, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1f9      	bne.n	8000c92 <HAL_ADC_Init+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c9e:	6893      	ldr	r3, [r2, #8]
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	d414      	bmi.n	8000cce <HAL_ADC_Init+0x92>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ca4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ca6:	f043 0310 	orr.w	r3, r3, #16
 8000caa:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	65a3      	str	r3, [r4, #88]	; 0x58
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000cb4:	6893      	ldr	r3, [r2, #8]
 8000cb6:	075f      	lsls	r7, r3, #29

    tmp_hal_status = HAL_ERROR;
 8000cb8:	f04f 0001 	mov.w	r0, #1
 8000cbc:	d50c      	bpl.n	8000cd8 <HAL_ADC_Init+0x9c>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000cbe:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cc0:	6d63      	ldr	r3, [r4, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000cc2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cc4:	f043 0310 	orr.w	r3, r3, #16
 8000cc8:	6563      	str	r3, [r4, #84]	; 0x54
  }

  /* Return function status */
  return tmp_hal_status;
}
 8000cca:	b003      	add	sp, #12
 8000ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cce:	6893      	ldr	r3, [r2, #8]
 8000cd0:	075f      	lsls	r7, r3, #29
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	d4f2      	bmi.n	8000cbe <HAL_ADC_Init+0x82>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000cd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000cda:	06d9      	lsls	r1, r3, #27
 8000cdc:	d4f0      	bmi.n	8000cc0 <HAL_ADC_Init+0x84>
    ADC_STATE_CLR_SET(hadc->State,
 8000cde:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ce0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000cea:	6893      	ldr	r3, [r2, #8]
 8000cec:	07de      	lsls	r6, r3, #31
 8000cee:	d40a      	bmi.n	8000d06 <HAL_ADC_Init+0xca>
 8000cf0:	4b3d      	ldr	r3, [pc, #244]	; (8000de8 <HAL_ADC_Init+0x1ac>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	07db      	lsls	r3, r3, #31
 8000cf6:	d406      	bmi.n	8000d06 <HAL_ADC_Init+0xca>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cf8:	493c      	ldr	r1, [pc, #240]	; (8000dec <HAL_ADC_Init+0x1b0>)
 8000cfa:	6865      	ldr	r5, [r4, #4]
 8000cfc:	688b      	ldr	r3, [r1, #8]
 8000cfe:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000d02:	432b      	orrs	r3, r5
 8000d04:	608b      	str	r3, [r1, #8]
                hadc->Init.DataAlign                                                   |
 8000d06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d08:	68e7      	ldr	r7, [r4, #12]
 8000d0a:	68a6      	ldr	r6, [r4, #8]
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000d0c:	f894 1020 	ldrb.w	r1, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d10:	7e65      	ldrb	r5, [r4, #25]
                hadc->Init.DataAlign                                                   |
 8000d12:	433b      	orrs	r3, r7
 8000d14:	4333      	orrs	r3, r6
 8000d16:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d1a:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d20:	d044      	beq.n	8000dac <HAL_ADC_Init+0x170>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d22:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000d24:	b121      	cbz	r1, 8000d30 <HAL_ADC_Init+0xf4>
                  | hadc->Init.ExternalTrigConvEdge
 8000d26:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d28:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000d2c:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d2e:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000d30:	68d5      	ldr	r5, [r2, #12]
 8000d32:	492f      	ldr	r1, [pc, #188]	; (8000df0 <HAL_ADC_Init+0x1b4>)
 8000d34:	4029      	ands	r1, r5
 8000d36:	430b      	orrs	r3, r1
 8000d38:	60d3      	str	r3, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d3a:	6893      	ldr	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d3c:	6891      	ldr	r1, [r2, #8]
 8000d3e:	070d      	lsls	r5, r1, #28
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d40:	f003 0304 	and.w	r3, r3, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d44:	d415      	bmi.n	8000d72 <HAL_ADC_Init+0x136>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d46:	b9a3      	cbnz	r3, 8000d72 <HAL_ADC_Init+0x136>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d48:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d4a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d4e:	7e26      	ldrb	r6, [r4, #24]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000d50:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d54:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d58:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d5a:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d5e:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d62:	430b      	orrs	r3, r1
      if (hadc->Init.OversamplingMode == ENABLE)
 8000d64:	2d01      	cmp	r5, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d66:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000d68:	d028      	beq.n	8000dbc <HAL_ADC_Init+0x180>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d6a:	6913      	ldr	r3, [r2, #16]
 8000d6c:	f023 0301 	bic.w	r3, r3, #1
 8000d70:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d72:	6923      	ldr	r3, [r4, #16]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d011      	beq.n	8000d9c <HAL_ADC_Init+0x160>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d78:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d7a:	f023 030f 	bic.w	r3, r3, #15
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000d80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d82:	f023 0303 	bic.w	r3, r3, #3
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6563      	str	r3, [r4, #84]	; 0x54
}
 8000d8c:	b003      	add	sp, #12
 8000d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8000d90:	f7ff fdca 	bl	8000928 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000d94:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000d96:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8000d9a:	e75b      	b.n	8000c54 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d9c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000d9e:	69e3      	ldr	r3, [r4, #28]
 8000da0:	f021 010f 	bic.w	r1, r1, #15
 8000da4:	3b01      	subs	r3, #1
 8000da6:	430b      	orrs	r3, r1
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	e7e9      	b.n	8000d80 <HAL_ADC_Init+0x144>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000dac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000dae:	3901      	subs	r1, #1
 8000db0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8000db4:	e7b5      	b.n	8000d22 <HAL_ADC_Init+0xe6>
    return HAL_ERROR;
 8000db6:	2001      	movs	r0, #1
}
 8000db8:	b003      	add	sp, #12
 8000dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MODIFY_REG(hadc->Instance->CFGR2,
 8000dbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000dbe:	6c27      	ldr	r7, [r4, #64]	; 0x40
 8000dc0:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8000dc2:	6915      	ldr	r5, [r2, #16]
 8000dc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000dc6:	433b      	orrs	r3, r7
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	4333      	orrs	r3, r6
 8000dce:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8000dd2:	430b      	orrs	r3, r1
 8000dd4:	f025 0504 	bic.w	r5, r5, #4
 8000dd8:	432b      	orrs	r3, r5
 8000dda:	6113      	str	r3, [r2, #16]
 8000ddc:	e7c9      	b.n	8000d72 <HAL_ADC_Init+0x136>
 8000dde:	bf00      	nop
 8000de0:	20000200 	.word	0x20000200
 8000de4:	053e2d63 	.word	0x053e2d63
 8000de8:	50040000 	.word	0x50040000
 8000dec:	50040300 	.word	0x50040300
 8000df0:	fff0c007 	.word	0xfff0c007

08000df4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df6:	4603      	mov	r3, r0
 8000df8:	b083      	sub	sp, #12
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000dfa:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
  __IO uint32_t wait_loop_index = 0UL;
 8000dfe:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8000e00:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8000e02:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8000e04:	d079      	beq.n	8000efa <HAL_ADC_ConfigChannel+0x106>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e06:	681d      	ldr	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e08:	68ac      	ldr	r4, [r5, #8]
  __HAL_LOCK(hadc);
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f014 0404 	ands.w	r4, r4, #4
 8000e10:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
 8000e14:	d008      	beq.n	8000e28 <HAL_ADC_ConfigChannel+0x34>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000e18:	f042 0220 	orr.w	r2, r2, #32
 8000e1c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8000e24:	b003      	add	sp, #12
 8000e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank <= 5U)
 8000e28:	6848      	ldr	r0, [r1, #4]
 8000e2a:	2805      	cmp	r0, #5
 8000e2c:	d968      	bls.n	8000f00 <HAL_ADC_ConfigChannel+0x10c>
 8000e2e:	f000 0e1f 	and.w	lr, r0, #31
 8000e32:	261f      	movs	r6, #31
 8000e34:	0984      	lsrs	r4, r0, #6
 8000e36:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e3a:	f004 040c 	and.w	r4, r4, #12
 8000e3e:	43f7      	mvns	r7, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e40:	f105 0030 	add.w	r0, r5, #48	; 0x30
  MODIFY_REG(*preg,
 8000e44:	680a      	ldr	r2, [r1, #0]
 8000e46:	5906      	ldr	r6, [r0, r4]
 8000e48:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000e4c:	403e      	ands	r6, r7
 8000e4e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000e52:	4332      	orrs	r2, r6
 8000e54:	5102      	str	r2, [r0, r4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e56:	68aa      	ldr	r2, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e58:	68a8      	ldr	r0, [r5, #8]
 8000e5a:	0704      	lsls	r4, r0, #28
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e5c:	f002 0204 	and.w	r2, r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e60:	f100 80a5 	bmi.w	8000fae <HAL_ADC_ConfigChannel+0x1ba>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 80a2 	bne.w	8000fae <HAL_ADC_ConfigChannel+0x1ba>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000e6a:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(*preg,
 8000e6c:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e6e:	0dc7      	lsrs	r7, r0, #23
 8000e70:	f105 0614 	add.w	r6, r5, #20
 8000e74:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8000e78:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8000e7c:	59ba      	ldr	r2, [r7, r6]
 8000e7e:	f04f 0e07 	mov.w	lr, #7
 8000e82:	fa0e fe00 	lsl.w	lr, lr, r0
 8000e86:	ea22 020e 	bic.w	r2, r2, lr
 8000e8a:	fa04 f000 	lsl.w	r0, r4, r0
 8000e8e:	4302      	orrs	r2, r0
 8000e90:	51ba      	str	r2, [r7, r6]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000e92:	690e      	ldr	r6, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000e94:	68e8      	ldr	r0, [r5, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000e96:	2e04      	cmp	r6, #4
 8000e98:	d03a      	beq.n	8000f10 <HAL_ADC_ConfigChannel+0x11c>
  MODIFY_REG(*preg,
 8000e9a:	680c      	ldr	r4, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000e9c:	694a      	ldr	r2, [r1, #20]
 8000e9e:	4fb7      	ldr	r7, [pc, #732]	; (800117c <HAL_ADC_ConfigChannel+0x388>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ea0:	f105 0e60 	add.w	lr, r5, #96	; 0x60
 8000ea4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8000ea8:	0040      	lsls	r0, r0, #1
 8000eaa:	4082      	lsls	r2, r0
  MODIFY_REG(*preg,
 8000eac:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000eb0:	4670      	mov	r0, lr
 8000eb2:	f85e e026 	ldr.w	lr, [lr, r6, lsl #2]
 8000eb6:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8000eba:	4322      	orrs	r2, r4
 8000ebc:	ea0e 0707 	and.w	r7, lr, r7
 8000ec0:	433a      	orrs	r2, r7
 8000ec2:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 8000ec6:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ec8:	68a8      	ldr	r0, [r5, #8]
 8000eca:	07c0      	lsls	r0, r0, #31
 8000ecc:	d573      	bpl.n	8000fb6 <HAL_ADC_ConfigChannel+0x1c2>
 8000ece:	4614      	mov	r4, r2
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000ed0:	4aab      	ldr	r2, [pc, #684]	; (8001180 <HAL_ADC_ConfigChannel+0x38c>)
 8000ed2:	4214      	tst	r4, r2
 8000ed4:	d00f      	beq.n	8000ef6 <HAL_ADC_ConfigChannel+0x102>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ed6:	4aab      	ldr	r2, [pc, #684]	; (8001184 <HAL_ADC_ConfigChannel+0x390>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ed8:	49ab      	ldr	r1, [pc, #684]	; (8001188 <HAL_ADC_ConfigChannel+0x394>)
 8000eda:	6890      	ldr	r0, [r2, #8]
 8000edc:	428c      	cmp	r4, r1
 8000ede:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8000ee2:	f000 80d1 	beq.w	8001088 <HAL_ADC_ConfigChannel+0x294>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000ee6:	49a9      	ldr	r1, [pc, #676]	; (800118c <HAL_ADC_ConfigChannel+0x398>)
 8000ee8:	428c      	cmp	r4, r1
 8000eea:	f000 80f1 	beq.w	80010d0 <HAL_ADC_ConfigChannel+0x2dc>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000eee:	49a8      	ldr	r1, [pc, #672]	; (8001190 <HAL_ADC_ConfigChannel+0x39c>)
 8000ef0:	428c      	cmp	r4, r1
 8000ef2:	f000 80b9 	beq.w	8001068 <HAL_ADC_ConfigChannel+0x274>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	e791      	b.n	8000e1e <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 8000efa:	2002      	movs	r0, #2
}
 8000efc:	b003      	add	sp, #12
 8000efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (sConfig->Rank)
 8000f00:	3802      	subs	r0, #2
 8000f02:	2803      	cmp	r0, #3
 8000f04:	f200 80f5 	bhi.w	80010f2 <HAL_ADC_ConfigChannel+0x2fe>
 8000f08:	e8df f000 	tbb	[pc, r0]
 8000f0c:	939ca2a8 	.word	0x939ca2a8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f10:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f12:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8000f14:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8000f16:	f3c2 0712 	ubfx	r7, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000f1a:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f1e:	2f00      	cmp	r7, #0
 8000f20:	f040 8124 	bne.w	800116c <HAL_ADC_ConfigChannel+0x378>
 8000f24:	f3c2 6484 	ubfx	r4, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000f28:	4284      	cmp	r4, r0
 8000f2a:	d106      	bne.n	8000f3a <HAL_ADC_ConfigChannel+0x146>
  MODIFY_REG(*preg,
 8000f2c:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8000f2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f32:	662a      	str	r2, [r5, #96]	; 0x60
 8000f34:	680a      	ldr	r2, [r1, #0]
 8000f36:	f3c2 0712 	ubfx	r7, r2, #0, #19
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f3a:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8000f3c:	6e6e      	ldr	r6, [r5, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f3e:	f105 0060 	add.w	r0, r5, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000f42:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f46:	2f00      	cmp	r7, #0
 8000f48:	f040 815f 	bne.w	800120a <HAL_ADC_ConfigChannel+0x416>
 8000f4c:	f3c2 6484 	ubfx	r4, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000f50:	42a6      	cmp	r6, r4
 8000f52:	f040 818c 	bne.w	800126e <HAL_ADC_ConfigChannel+0x47a>
  MODIFY_REG(*preg,
 8000f56:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8000f58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f5c:	666a      	str	r2, [r5, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f5e:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f60:	6884      	ldr	r4, [r0, #8]
 8000f62:	6886      	ldr	r6, [r0, #8]
 8000f64:	f3c2 0412 	ubfx	r4, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000f68:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f6c:	f100 0708 	add.w	r7, r0, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f70:	2c00      	cmp	r4, #0
 8000f72:	f040 8158 	bne.w	8001226 <HAL_ADC_ConfigChannel+0x432>
 8000f76:	f3c2 6484 	ubfx	r4, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000f7a:	42a6      	cmp	r6, r4
 8000f7c:	f040 817e 	bne.w	800127c <HAL_ADC_ConfigChannel+0x488>
  MODIFY_REG(*preg,
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f86:	603a      	str	r2, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f88:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f8a:	68c4      	ldr	r4, [r0, #12]
 8000f8c:	68c6      	ldr	r6, [r0, #12]
 8000f8e:	f3c2 0412 	ubfx	r4, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000f92:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f96:	300c      	adds	r0, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f98:	2c00      	cmp	r4, #0
 8000f9a:	f040 8151 	bne.w	8001240 <HAL_ADC_ConfigChannel+0x44c>
 8000f9e:	f3c2 6484 	ubfx	r4, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000fa2:	42b4      	cmp	r4, r6
 8000fa4:	d190      	bne.n	8000ec8 <HAL_ADC_ConfigChannel+0xd4>
  MODIFY_REG(*preg,
 8000fa6:	6802      	ldr	r2, [r0, #0]
 8000fa8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000fac:	6002      	str	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fae:	68a8      	ldr	r0, [r5, #8]
 8000fb0:	680a      	ldr	r2, [r1, #0]
 8000fb2:	07c0      	lsls	r0, r0, #31
 8000fb4:	d48b      	bmi.n	8000ece <HAL_ADC_ConfigChannel+0xda>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000fb6:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8000fb8:	4876      	ldr	r0, [pc, #472]	; (8001194 <HAL_ADC_ConfigChannel+0x3a0>)
 8000fba:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000fbe:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 80011a4 <HAL_ADC_ConfigChannel+0x3b0>
 8000fc2:	f006 0718 	and.w	r7, r6, #24
 8000fc6:	40f8      	lsrs	r0, r7
 8000fc8:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8000fcc:	ea24 0407 	bic.w	r4, r4, r7
 8000fd0:	4010      	ands	r0, r2
 8000fd2:	4320      	orrs	r0, r4
 8000fd4:	4576      	cmp	r6, lr
 8000fd6:	f8c5 00b0 	str.w	r0, [r5, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000fda:	4614      	mov	r4, r2
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000fdc:	f47f af78 	bne.w	8000ed0 <HAL_ADC_ConfigChannel+0xdc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000fe0:	2f00      	cmp	r7, #0
 8000fe2:	f040 808c 	bne.w	80010fe <HAL_ADC_ConfigChannel+0x30a>
 8000fe6:	0e92      	lsrs	r2, r2, #26
 8000fe8:	1c50      	adds	r0, r2, #1
 8000fea:	f000 061f 	and.w	r6, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000fee:	2e09      	cmp	r6, #9
 8000ff0:	f200 80fd 	bhi.w	80011ee <HAL_ADC_ConfigChannel+0x3fa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000ff4:	0680      	lsls	r0, r0, #26
 8000ff6:	2401      	movs	r4, #1
 8000ff8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8000ffc:	40b4      	lsls	r4, r6
 8000ffe:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8001002:	4320      	orrs	r0, r4
 8001004:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001006:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001008:	0dd7      	lsrs	r7, r2, #23
 800100a:	f105 0414 	add.w	r4, r5, #20
 800100e:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8001012:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8001016:	5938      	ldr	r0, [r7, r4]
 8001018:	688e      	ldr	r6, [r1, #8]
 800101a:	f04f 0e07 	mov.w	lr, #7
 800101e:	fa0e fe02 	lsl.w	lr, lr, r2
 8001022:	ea20 000e 	bic.w	r0, r0, lr
 8001026:	fa06 f202 	lsl.w	r2, r6, r2
 800102a:	4302      	orrs	r2, r0
 800102c:	513a      	str	r2, [r7, r4]
 800102e:	680c      	ldr	r4, [r1, #0]
 8001030:	e74e      	b.n	8000ed0 <HAL_ADC_ConfigChannel+0xdc>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001032:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001036:	604a      	str	r2, [r1, #4]
          break;
 8001038:	f04f 0e00 	mov.w	lr, #0
 800103c:	f06f 071f 	mvn.w	r7, #31
 8001040:	2404      	movs	r4, #4
 8001042:	e6fd      	b.n	8000e40 <HAL_ADC_ConfigChannel+0x4c>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001044:	2218      	movs	r2, #24
 8001046:	604a      	str	r2, [r1, #4]
          break;
 8001048:	4696      	mov	lr, r2
 800104a:	f06f 57f8 	mvn.w	r7, #520093696	; 0x1f000000
 800104e:	e6f7      	b.n	8000e40 <HAL_ADC_ConfigChannel+0x4c>
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001050:	2212      	movs	r2, #18
 8001052:	604a      	str	r2, [r1, #4]
          break;
 8001054:	4696      	mov	lr, r2
 8001056:	f46f 07f8 	mvn.w	r7, #8126464	; 0x7c0000
 800105a:	e6f1      	b.n	8000e40 <HAL_ADC_ConfigChannel+0x4c>
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800105c:	220c      	movs	r2, #12
 800105e:	604a      	str	r2, [r1, #4]
          break;
 8001060:	4696      	mov	lr, r2
 8001062:	f46f 37f8 	mvn.w	r7, #126976	; 0x1f000
 8001066:	e6eb      	b.n	8000e40 <HAL_ADC_ConfigChannel+0x4c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001068:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 800106c:	f47f af43 	bne.w	8000ef6 <HAL_ADC_ConfigChannel+0x102>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001070:	4949      	ldr	r1, [pc, #292]	; (8001198 <HAL_ADC_ConfigChannel+0x3a4>)
 8001072:	428d      	cmp	r5, r1
 8001074:	f47f af3f 	bne.w	8000ef6 <HAL_ADC_ConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001078:	6891      	ldr	r1, [r2, #8]
 800107a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800107e:	4331      	orrs	r1, r6
 8001080:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001084:	6091      	str	r1, [r2, #8]
 8001086:	e6ca      	b.n	8000e1e <HAL_ADC_ConfigChannel+0x2a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001088:	0201      	lsls	r1, r0, #8
 800108a:	f53f af34 	bmi.w	8000ef6 <HAL_ADC_ConfigChannel+0x102>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800108e:	4942      	ldr	r1, [pc, #264]	; (8001198 <HAL_ADC_ConfigChannel+0x3a4>)
 8001090:	428d      	cmp	r5, r1
 8001092:	f47f af30 	bne.w	8000ef6 <HAL_ADC_ConfigChannel+0x102>
 8001096:	6891      	ldr	r1, [r2, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001098:	4c40      	ldr	r4, [pc, #256]	; (800119c <HAL_ADC_ConfigChannel+0x3a8>)
 800109a:	4841      	ldr	r0, [pc, #260]	; (80011a0 <HAL_ADC_ConfigChannel+0x3ac>)
 800109c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80010a0:	4331      	orrs	r1, r6
 80010a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80010a6:	6091      	str	r1, [r2, #8]
 80010a8:	6822      	ldr	r2, [r4, #0]
 80010aa:	0992      	lsrs	r2, r2, #6
 80010ac:	fba0 1202 	umull	r1, r2, r0, r2
 80010b0:	0992      	lsrs	r2, r2, #6
 80010b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80010ba:	9a01      	ldr	r2, [sp, #4]
 80010bc:	2a00      	cmp	r2, #0
 80010be:	f43f af1a 	beq.w	8000ef6 <HAL_ADC_ConfigChannel+0x102>
            wait_loop_index--;
 80010c2:	9a01      	ldr	r2, [sp, #4]
 80010c4:	3a01      	subs	r2, #1
 80010c6:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80010c8:	9a01      	ldr	r2, [sp, #4]
 80010ca:	2a00      	cmp	r2, #0
 80010cc:	d1f9      	bne.n	80010c2 <HAL_ADC_ConfigChannel+0x2ce>
 80010ce:	e712      	b.n	8000ef6 <HAL_ADC_ConfigChannel+0x102>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80010d0:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80010d4:	f47f af0f 	bne.w	8000ef6 <HAL_ADC_ConfigChannel+0x102>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80010d8:	f1a1 41f7 	sub.w	r1, r1, #2071986176	; 0x7b800000
 80010dc:	428d      	cmp	r5, r1
 80010de:	f47f af0a 	bne.w	8000ef6 <HAL_ADC_ConfigChannel+0x102>
 80010e2:	6891      	ldr	r1, [r2, #8]
 80010e4:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80010e8:	4331      	orrs	r1, r6
 80010ea:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80010ee:	6091      	str	r1, [r2, #8]
 80010f0:	e695      	b.n	8000e1e <HAL_ADC_ConfigChannel+0x2a>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80010f2:	2206      	movs	r2, #6
 80010f4:	604a      	str	r2, [r1, #4]
          break;
 80010f6:	4696      	mov	lr, r2
 80010f8:	f46f 67f8 	mvn.w	r7, #1984	; 0x7c0
 80010fc:	e6a0      	b.n	8000e40 <HAL_ADC_ConfigChannel+0x4c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fe:	fa92 f0a2 	rbit	r0, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001102:	2800      	cmp	r0, #0
 8001104:	d050      	beq.n	80011a8 <HAL_ADC_ConfigChannel+0x3b4>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001106:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800110a:	3001      	adds	r0, #1
 800110c:	f000 001f 	and.w	r0, r0, #31
 8001110:	2809      	cmp	r0, #9
 8001112:	d949      	bls.n	80011a8 <HAL_ADC_ConfigChannel+0x3b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001114:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8001118:	2c00      	cmp	r4, #0
 800111a:	f000 809c 	beq.w	8001256 <HAL_ADC_ConfigChannel+0x462>
  return __builtin_clz(value);
 800111e:	fab4 f484 	clz	r4, r4
 8001122:	3401      	adds	r4, #1
 8001124:	06a4      	lsls	r4, r4, #26
 8001126:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112a:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800112e:	2800      	cmp	r0, #0
 8001130:	f000 8096 	beq.w	8001260 <HAL_ADC_ConfigChannel+0x46c>
  return __builtin_clz(value);
 8001134:	fab0 f080 	clz	r0, r0
 8001138:	3001      	adds	r0, #1
 800113a:	f000 001f 	and.w	r0, r0, #31
 800113e:	2601      	movs	r6, #1
 8001140:	fa06 f000 	lsl.w	r0, r6, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001144:	4304      	orrs	r4, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800114a:	2a00      	cmp	r2, #0
 800114c:	f000 8086 	beq.w	800125c <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8001150:	fab2 f082 	clz	r0, r2
 8001154:	3001      	adds	r0, #1
 8001156:	f000 001f 	and.w	r0, r0, #31
 800115a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800115e:	f1a0 021e 	sub.w	r2, r0, #30
 8001162:	0512      	lsls	r2, r2, #20
 8001164:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001168:	4322      	orrs	r2, r4
 800116a:	e74d      	b.n	8001008 <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116c:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8001170:	2c00      	cmp	r4, #0
 8001172:	f43f aee2 	beq.w	8000f3a <HAL_ADC_ConfigChannel+0x146>
  return __builtin_clz(value);
 8001176:	fab4 f484 	clz	r4, r4
 800117a:	e6d5      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x134>
 800117c:	03fff000 	.word	0x03fff000
 8001180:	80080000 	.word	0x80080000
 8001184:	50040300 	.word	0x50040300
 8001188:	c7520000 	.word	0xc7520000
 800118c:	cb840000 	.word	0xcb840000
 8001190:	80000001 	.word	0x80000001
 8001194:	0007ffff 	.word	0x0007ffff
 8001198:	50040000 	.word	0x50040000
 800119c:	20000200 	.word	0x20000200
 80011a0:	053e2d63 	.word	0x053e2d63
 80011a4:	407f0000 	.word	0x407f0000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a8:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80011ac:	2800      	cmp	r0, #0
 80011ae:	d05b      	beq.n	8001268 <HAL_ADC_ConfigChannel+0x474>
  return __builtin_clz(value);
 80011b0:	fab0 f080 	clz	r0, r0
 80011b4:	3001      	adds	r0, #1
 80011b6:	0680      	lsls	r0, r0, #26
 80011b8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 80011c0:	2c00      	cmp	r4, #0
 80011c2:	d04f      	beq.n	8001264 <HAL_ADC_ConfigChannel+0x470>
  return __builtin_clz(value);
 80011c4:	fab4 f484 	clz	r4, r4
 80011c8:	3401      	adds	r4, #1
 80011ca:	f004 041f 	and.w	r4, r4, #31
 80011ce:	2601      	movs	r6, #1
 80011d0:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80011d4:	4320      	orrs	r0, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80011da:	b3ca      	cbz	r2, 8001250 <HAL_ADC_ConfigChannel+0x45c>
  return __builtin_clz(value);
 80011dc:	fab2 f282 	clz	r2, r2
 80011e0:	3201      	adds	r2, #1
 80011e2:	f002 021f 	and.w	r2, r2, #31
 80011e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80011ea:	0512      	lsls	r2, r2, #20
 80011ec:	e70b      	b.n	8001006 <HAL_ADC_ConfigChannel+0x212>
 80011ee:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80011f2:	0684      	lsls	r4, r0, #26
 80011f4:	3a1e      	subs	r2, #30
 80011f6:	2001      	movs	r0, #1
 80011f8:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80011fc:	fa00 f606 	lsl.w	r6, r0, r6
 8001200:	0512      	lsls	r2, r2, #20
 8001202:	4334      	orrs	r4, r6
 8001204:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001208:	e7ae      	b.n	8001168 <HAL_ADC_ConfigChannel+0x374>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 800120e:	b124      	cbz	r4, 800121a <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 8001210:	fab4 f484 	clz	r4, r4
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001214:	42a6      	cmp	r6, r4
 8001216:	f43f ae9e 	beq.w	8000f56 <HAL_ADC_ConfigChannel+0x162>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800121a:	6884      	ldr	r4, [r0, #8]
 800121c:	6886      	ldr	r6, [r0, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800121e:	f100 0708 	add.w	r7, r0, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001222:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 800122a:	b124      	cbz	r4, 8001236 <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 800122c:	fab4 f484 	clz	r4, r4
 8001230:	42a6      	cmp	r6, r4
 8001232:	f43f aea5 	beq.w	8000f80 <HAL_ADC_ConfigChannel+0x18c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001236:	68c4      	ldr	r4, [r0, #12]
 8001238:	68c6      	ldr	r6, [r0, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800123a:	300c      	adds	r0, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800123c:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001240:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8001244:	2c00      	cmp	r4, #0
 8001246:	f43f ae3f 	beq.w	8000ec8 <HAL_ADC_ConfigChannel+0xd4>
  return __builtin_clz(value);
 800124a:	fab4 f484 	clz	r4, r4
 800124e:	e6a8      	b.n	8000fa2 <HAL_ADC_ConfigChannel+0x1ae>
  if (value == 0U)
 8001250:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001254:	e6d7      	b.n	8001006 <HAL_ADC_ConfigChannel+0x212>
 8001256:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 800125a:	e766      	b.n	800112a <HAL_ADC_ConfigChannel+0x336>
 800125c:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <HAL_ADC_ConfigChannel+0x494>)
 800125e:	e783      	b.n	8001168 <HAL_ADC_ConfigChannel+0x374>
 8001260:	2002      	movs	r0, #2
 8001262:	e76f      	b.n	8001144 <HAL_ADC_ConfigChannel+0x350>
 8001264:	2402      	movs	r4, #2
 8001266:	e7b5      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x3e0>
 8001268:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800126c:	e7a6      	b.n	80011bc <HAL_ADC_ConfigChannel+0x3c8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800126e:	6eae      	ldr	r6, [r5, #104]	; 0x68
 8001270:	6eae      	ldr	r6, [r5, #104]	; 0x68
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001272:	f105 0768 	add.w	r7, r5, #104	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001276:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800127a:	e67e      	b.n	8000f7a <HAL_ADC_ConfigChannel+0x186>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800127c:	68c6      	ldr	r6, [r0, #12]
 800127e:	68c6      	ldr	r6, [r0, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001280:	300c      	adds	r0, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001282:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001286:	e68c      	b.n	8000fa2 <HAL_ADC_ConfigChannel+0x1ae>
 8001288:	fe500000 	.word	0xfe500000

0800128c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_NVIC_SetPriorityGrouping+0x20>)
 800128e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001290:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8001294:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001296:	0200      	lsls	r0, r0, #8
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800129c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80012a4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80012a6:	60d3      	str	r3, [r2, #12]
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b2:	b470      	push	{r4, r5, r6}
 80012b4:	68dc      	ldr	r4, [r3, #12]
 80012b6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ba:	f1c4 0607 	rsb	r6, r4, #7
 80012be:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c0:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	bf28      	it	cs
 80012c6:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c8:	2b06      	cmp	r3, #6
 80012ca:	d917      	bls.n	80012fc <HAL_NVIC_SetPriority+0x4c>
 80012cc:	3c03      	subs	r4, #3
 80012ce:	2501      	movs	r5, #1
 80012d0:	40a5      	lsls	r5, r4
 80012d2:	3d01      	subs	r5, #1
 80012d4:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d6:	2301      	movs	r3, #1
 80012d8:	40b3      	lsls	r3, r6
 80012da:	3b01      	subs	r3, #1
 80012dc:	4019      	ands	r1, r3
 80012de:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80012e0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e2:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80012e6:	db0c      	blt.n	8001302 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80012ec:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80012f0:	0109      	lsls	r1, r1, #4
 80012f2:	b2c9      	uxtb	r1, r1
 80012f4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80012f8:	bc70      	pop	{r4, r5, r6}
 80012fa:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fc:	2200      	movs	r2, #0
 80012fe:	4614      	mov	r4, r2
 8001300:	e7e9      	b.n	80012d6 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_NVIC_SetPriority+0x68>)
 8001304:	f000 000f 	and.w	r0, r0, #15
 8001308:	0109      	lsls	r1, r1, #4
 800130a:	4403      	add	r3, r0
 800130c:	b2c9      	uxtb	r1, r1
 800130e:	7619      	strb	r1, [r3, #24]
 8001310:	bc70      	pop	{r4, r5, r6}
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00
 8001318:	e000ecfc 	.word	0xe000ecfc

0800131c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800131c:	2800      	cmp	r0, #0
 800131e:	db07      	blt.n	8001330 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_NVIC_EnableIRQ+0x18>)
 8001322:	f000 011f 	and.w	r1, r0, #31
 8001326:	2301      	movs	r3, #1
 8001328:	0940      	lsrs	r0, r0, #5
 800132a:	408b      	lsls	r3, r1
 800132c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100

08001338 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	3801      	subs	r0, #1
 800133a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800133e:	d20e      	bcs.n	800135e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	4c08      	ldr	r4, [pc, #32]	; (8001368 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001346:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	20f0      	movs	r0, #240	; 0xf0
 800134a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001350:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001352:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800135c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 800136c:	b188      	cbz	r0, 8001392 <HAL_DAC_Init+0x26>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800136e:	7903      	ldrb	r3, [r0, #4]
{
 8001370:	b510      	push	{r4, lr}
  if (hdac->State == HAL_DAC_STATE_RESET)
 8001372:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001376:	4604      	mov	r4, r0
 8001378:	b13b      	cbz	r3, 800138a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800137a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800137c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800137e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8001380:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8001382:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001384:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001386:	7122      	strb	r2, [r4, #4]
  return HAL_OK;
 8001388:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800138a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800138c:	f7ff fafe 	bl	800098c <HAL_DAC_MspInit>
 8001390:	e7f3      	b.n	800137a <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 8001392:	2001      	movs	r0, #1
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop

08001398 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800139a:	7943      	ldrb	r3, [r0, #5]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d03c      	beq.n	800141a <HAL_DAC_ConfigChannel+0x82>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80013a0:	680f      	ldr	r7, [r1, #0]
 80013a2:	4616      	mov	r6, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013a4:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 80013a6:	2201      	movs	r2, #1

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80013a8:	2f04      	cmp	r7, #4
 80013aa:	460d      	mov	r5, r1
 80013ac:	4604      	mov	r4, r0
  __HAL_LOCK(hdac);
 80013ae:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80013b0:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80013b2:	d034      	beq.n	800141e <HAL_DAC_ConfigChannel+0x86>
 80013b4:	6800      	ldr	r0, [r0, #0]
 80013b6:	f006 0210 	and.w	r2, r6, #16
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80013ba:	692b      	ldr	r3, [r5, #16]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d06a      	beq.n	8001496 <HAL_DAC_ConfigChannel+0xfe>
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80013c0:	68ab      	ldr	r3, [r5, #8]
 80013c2:	f8d5 e00c 	ldr.w	lr, [r5, #12]
  tmpreg1 = hdac->Instance->MCR;
 80013c6:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013c8:	6869      	ldr	r1, [r5, #4]
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80013ca:	ea43 030e 	orr.w	r3, r3, lr
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80013ce:	2507      	movs	r5, #7
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80013d0:	433b      	orrs	r3, r7
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80013d2:	4095      	lsls	r5, r2
 80013d4:	ea26 0505 	bic.w	r5, r6, r5
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013d8:	4093      	lsls	r3, r2
 80013da:	432b      	orrs	r3, r5
  hdac->Instance->MCR = tmpreg1;
 80013dc:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80013de:	6803      	ldr	r3, [r0, #0]
 80013e0:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 80013e4:	4095      	lsls	r5, r2
 80013e6:	ea23 0305 	bic.w	r3, r3, r5
 80013ea:	6003      	str	r3, [r0, #0]
  tmpreg1 = hdac->Instance->CR;
 80013ec:	6805      	ldr	r5, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80013ee:	f640 76fc 	movw	r6, #4092	; 0xffc
 80013f2:	4096      	lsls	r6, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013f4:	fa01 f302 	lsl.w	r3, r1, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80013f8:	ea25 0106 	bic.w	r1, r5, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013fc:	430b      	orrs	r3, r1
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80013fe:	6003      	str	r3, [r0, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001400:	6803      	ldr	r3, [r0, #0]
 8001402:	21c0      	movs	r1, #192	; 0xc0
 8001404:	fa01 f202 	lsl.w	r2, r1, r2
 8001408:	ea23 0202 	bic.w	r2, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800140c:	2101      	movs	r1, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800140e:	2300      	movs	r3, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001410:	6002      	str	r2, [r0, #0]

  /* Return function status */
  return HAL_OK;
 8001412:	4618      	mov	r0, r3
  hdac->State = HAL_DAC_STATE_READY;
 8001414:	7121      	strb	r1, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001416:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 8001418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 800141a:	2002      	movs	r0, #2
}
 800141c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tickstart = HAL_GetTick();
 800141e:	f7ff fbf5 	bl	8000c0c <HAL_GetTick>
 8001422:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8001424:	b12e      	cbz	r6, 8001432 <HAL_DAC_ConfigChannel+0x9a>
 8001426:	e014      	b.n	8001452 <HAL_DAC_ConfigChannel+0xba>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001428:	f7ff fbf0 	bl	8000c0c <HAL_GetTick>
 800142c:	1bc0      	subs	r0, r0, r7
 800142e:	2801      	cmp	r0, #1
 8001430:	d83b      	bhi.n	80014aa <HAL_DAC_ConfigChannel+0x112>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001436:	041b      	lsls	r3, r3, #16
 8001438:	d4f6      	bmi.n	8001428 <HAL_DAC_ConfigChannel+0x90>
      HAL_Delay(1);
 800143a:	2001      	movs	r0, #1
 800143c:	f7ff fbec 	bl	8000c18 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001440:	6820      	ldr	r0, [r4, #0]
 8001442:	69ab      	ldr	r3, [r5, #24]
 8001444:	6403      	str	r3, [r0, #64]	; 0x40
 8001446:	e00e      	b.n	8001466 <HAL_DAC_ConfigChannel+0xce>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001448:	f7ff fbe0 	bl	8000c0c <HAL_GetTick>
 800144c:	1bc0      	subs	r0, r0, r7
 800144e:	2801      	cmp	r0, #1
 8001450:	d82b      	bhi.n	80014aa <HAL_DAC_ConfigChannel+0x112>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001452:	6823      	ldr	r3, [r4, #0]
 8001454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001456:	2b00      	cmp	r3, #0
 8001458:	dbf6      	blt.n	8001448 <HAL_DAC_ConfigChannel+0xb0>
      HAL_Delay(1U);
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff fbdc 	bl	8000c18 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001460:	6820      	ldr	r0, [r4, #0]
 8001462:	69ab      	ldr	r3, [r5, #24]
 8001464:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001466:	f006 0210 	and.w	r2, r6, #16
 800146a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800146c:	69eb      	ldr	r3, [r5, #28]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800146e:	6a2e      	ldr	r6, [r5, #32]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001470:	f240 37ff 	movw	r7, #1023	; 0x3ff
 8001474:	4097      	lsls	r7, r2
 8001476:	ea21 0107 	bic.w	r1, r1, r7
 800147a:	4093      	lsls	r3, r2
 800147c:	4319      	orrs	r1, r3
 800147e:	6481      	str	r1, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001480:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001482:	682f      	ldr	r7, [r5, #0]
 8001484:	21ff      	movs	r1, #255	; 0xff
 8001486:	4091      	lsls	r1, r2
 8001488:	ea23 0301 	bic.w	r3, r3, r1
 800148c:	fa06 f102 	lsl.w	r1, r6, r2
 8001490:	430b      	orrs	r3, r1
 8001492:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001494:	e791      	b.n	80013ba <HAL_DAC_ConfigChannel+0x22>
    tmpreg1 = hdac->Instance->CCR;
 8001496:	6b81      	ldr	r1, [r0, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001498:	696b      	ldr	r3, [r5, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800149a:	261f      	movs	r6, #31
 800149c:	4096      	lsls	r6, r2
 800149e:	ea21 0106 	bic.w	r1, r1, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80014a2:	4093      	lsls	r3, r2
 80014a4:	430b      	orrs	r3, r1
    hdac->Instance->CCR = tmpreg1;
 80014a6:	6383      	str	r3, [r0, #56]	; 0x38
 80014a8:	e78a      	b.n	80013c0 <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80014aa:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80014ac:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80014ae:	f043 0308 	orr.w	r3, r3, #8
 80014b2:	6123      	str	r3, [r4, #16]
          return HAL_TIMEOUT;
 80014b4:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80014b6:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 80014b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014ba:	bf00      	nop

080014bc <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014bc:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80014c0:	2a02      	cmp	r2, #2
{
 80014c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014c4:	d003      	beq.n	80014ce <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c6:	2204      	movs	r2, #4
 80014c8:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 80014ca:	2001      	movs	r0, #1
 80014cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ce:	6801      	ldr	r1, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d2:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014d4:	6c07      	ldr	r7, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014d6:	6b85      	ldr	r5, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d8:	f024 040e 	bic.w	r4, r4, #14
 80014dc:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80014de:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014e0:	2601      	movs	r6, #1
    __HAL_DMA_DISABLE(hdma);
 80014e2:	f024 0401 	bic.w	r4, r4, #1
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014e6:	f002 021c 	and.w	r2, r2, #28
    __HAL_DMA_DISABLE(hdma);
 80014ea:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014ec:	fa06 f202 	lsl.w	r2, r6, r2
    __HAL_UNLOCK(hdma);
 80014f0:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014f2:	607a      	str	r2, [r7, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80014f4:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80014f8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80014fc:	b115      	cbz	r5, 8001504 <HAL_DMA_Abort_IT+0x48>
    {
      hdma->XferAbortCallback(hdma);
 80014fe:	47a8      	blx	r5
  HAL_StatusTypeDef status = HAL_OK;
 8001500:	4620      	mov	r0, r4
 8001502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001504:	4628      	mov	r0, r5
    }
  }
  return status;
}
 8001506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150a:	6809      	ldr	r1, [r1, #0]
 800150c:	2900      	cmp	r1, #0
 800150e:	f000 80ca 	beq.w	80016a6 <HAL_GPIO_Init+0x19e>
{
 8001512:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001516:	2600      	movs	r6, #0
{
 8001518:	b083      	sub	sp, #12
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800151a:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80016b4 <HAL_GPIO_Init+0x1ac>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151e:	4634      	mov	r4, r6
 8001520:	e06c      	b.n	80015fc <HAL_GPIO_Init+0xf4>
      temp = GPIOx->PUPDR;
 8001522:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001524:	43db      	mvns	r3, r3
 8001526:	ea05 0e03 	and.w	lr, r5, r3
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800152a:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800152e:	40b5      	lsls	r5, r6
 8001530:	ea45 050e 	orr.w	r5, r5, lr
      GPIOx->PUPDR = temp;
 8001534:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 8001536:	f8d0 e000 	ldr.w	lr, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800153a:	f002 0503 	and.w	r5, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800153e:	ea0e 0e03 	and.w	lr, lr, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001542:	462b      	mov	r3, r5
 8001544:	40b3      	lsls	r3, r6
 8001546:	ea43 030e 	orr.w	r3, r3, lr
      GPIOx->MODER = temp;
 800154a:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800154c:	00d3      	lsls	r3, r2, #3
 800154e:	d54f      	bpl.n	80015f0 <HAL_GPIO_Init+0xe8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001550:	4b55      	ldr	r3, [pc, #340]	; (80016a8 <HAL_GPIO_Init+0x1a0>)
 8001552:	4955      	ldr	r1, [pc, #340]	; (80016a8 <HAL_GPIO_Init+0x1a0>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	660b      	str	r3, [r1, #96]	; 0x60
 800155c:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800155e:	f024 0103 	bic.w	r1, r4, #3
 8001562:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 800156e:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001570:	f004 0303 	and.w	r3, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001574:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001576:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	f04f 0e0f 	mov.w	lr, #15
 800157e:	fa0e fe03 	lsl.w	lr, lr, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001582:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001586:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800158a:	f000 8086 	beq.w	800169a <HAL_GPIO_Init+0x192>
 800158e:	4d47      	ldr	r5, [pc, #284]	; (80016ac <HAL_GPIO_Init+0x1a4>)
 8001590:	42a8      	cmp	r0, r5
 8001592:	f000 8084 	beq.w	800169e <HAL_GPIO_Init+0x196>
 8001596:	4d46      	ldr	r5, [pc, #280]	; (80016b0 <HAL_GPIO_Init+0x1a8>)
 8001598:	42a8      	cmp	r0, r5
 800159a:	bf0c      	ite	eq
 800159c:	2502      	moveq	r5, #2
 800159e:	2507      	movne	r5, #7
 80015a0:	fa05 f303 	lsl.w	r3, r5, r3
 80015a4:	ea43 030e 	orr.w	r3, r3, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015a8:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR1;
 80015aa:	f8d8 3000 	ldr.w	r3, [r8]
        temp &= ~(iocurrent);
 80015ae:	43f9      	mvns	r1, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b0:	03d5      	lsls	r5, r2, #15
        temp &= ~(iocurrent);
 80015b2:	bf54      	ite	pl
 80015b4:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80015b6:	433b      	orrmi	r3, r7
        }
        EXTI->IMR1 = temp;
 80015b8:	f8c8 3000 	str.w	r3, [r8]

        temp = EXTI->EMR1;
 80015bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c0:	0395      	lsls	r5, r2, #14
        temp &= ~(iocurrent);
 80015c2:	bf54      	ite	pl
 80015c4:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80015c6:	433b      	orrmi	r3, r7
        }
        EXTI->EMR1 = temp;
 80015c8:	f8c8 3004 	str.w	r3, [r8, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015d0:	02d5      	lsls	r5, r2, #11
        temp &= ~(iocurrent);
 80015d2:	bf54      	ite	pl
 80015d4:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80015d6:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR1 = temp;
 80015d8:	f8c8 3008 	str.w	r3, [r8, #8]

        temp = EXTI->FTSR1;
 80015dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e0:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80015e2:	bf54      	ite	pl
 80015e4:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80015e6:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR1 = temp;
 80015e8:	f8c8 300c 	str.w	r3, [r8, #12]
 80015ec:	f8dc 1000 	ldr.w	r1, [ip]
      }
    }

    position++;
 80015f0:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f2:	fa31 f304 	lsrs.w	r3, r1, r4
 80015f6:	f106 0602 	add.w	r6, r6, #2
 80015fa:	d04b      	beq.n	8001694 <HAL_GPIO_Init+0x18c>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015fc:	2301      	movs	r3, #1
 80015fe:	fa03 fe04 	lsl.w	lr, r3, r4
    if (iocurrent != 0x00u)
 8001602:	ea1e 0701 	ands.w	r7, lr, r1
 8001606:	d0f3      	beq.n	80015f0 <HAL_GPIO_Init+0xe8>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001608:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800160c:	f022 0a10 	bic.w	sl, r2, #16
 8001610:	f10a 33ff 	add.w	r3, sl, #4294967295
 8001614:	2b01      	cmp	r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001616:	f04f 0303 	mov.w	r3, #3
 800161a:	fa03 f306 	lsl.w	r3, r3, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800161e:	d880      	bhi.n	8001522 <HAL_GPIO_Init+0x1a>
        temp = GPIOx->OSPEEDR;
 8001620:	6885      	ldr	r5, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001622:	f8dc 9008 	ldr.w	r9, [ip, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001626:	43db      	mvns	r3, r3
 8001628:	ea05 0b03 	and.w	fp, r5, r3
        temp |= (GPIO_Init->Speed << (position * 2u));
 800162c:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8001630:	40b5      	lsls	r5, r6
 8001632:	ea45 050b 	orr.w	r5, r5, fp
        GPIOx->OSPEEDR = temp;
 8001636:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001638:	f8d0 b004 	ldr.w	fp, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800163c:	f3c2 1500 	ubfx	r5, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001640:	ea2b 0e0e 	bic.w	lr, fp, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001644:	40a5      	lsls	r5, r4
 8001646:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 800164a:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800164c:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800164e:	fa09 f906 	lsl.w	r9, r9, r6
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001652:	401d      	ands	r5, r3
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001654:	ea49 0505 	orr.w	r5, r9, r5
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001658:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 800165c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800165e:	f47f af6a 	bne.w	8001536 <HAL_GPIO_Init+0x2e>
        temp = GPIOx->AFR[position >> 3u];
 8001662:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8001666:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800166a:	f004 0e07 	and.w	lr, r4, #7
        temp = GPIOx->AFR[position >> 3u];
 800166e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001672:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001676:	f04f 0a0f 	mov.w	sl, #15
 800167a:	fa0a fb0e 	lsl.w	fp, sl, lr
 800167e:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001682:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8001686:	fa05 f50e 	lsl.w	r5, r5, lr
 800168a:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3u] = temp;
 800168e:	f8c9 5020 	str.w	r5, [r9, #32]
 8001692:	e750      	b.n	8001536 <HAL_GPIO_Init+0x2e>
  }
}
 8001694:	b003      	add	sp, #12
 8001696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800169a:	2300      	movs	r3, #0
 800169c:	e782      	b.n	80015a4 <HAL_GPIO_Init+0x9c>
 800169e:	2501      	movs	r5, #1
 80016a0:	fa05 f303 	lsl.w	r3, r5, r3
 80016a4:	e77e      	b.n	80015a4 <HAL_GPIO_Init+0x9c>
 80016a6:	4770      	bx	lr
 80016a8:	40021000 	.word	0x40021000
 80016ac:	48000400 	.word	0x48000400
 80016b0:	48000800 	.word	0x48000800
 80016b4:	40010400 	.word	0x40010400

080016b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016b8:	b90a      	cbnz	r2, 80016be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ba:	6281      	str	r1, [r0, #40]	; 0x28
 80016bc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016be:	6181      	str	r1, [r0, #24]
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop

080016c4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016c4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016c6:	ea03 0201 	and.w	r2, r3, r1
 80016ca:	ea21 0103 	bic.w	r1, r1, r3
 80016ce:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80016d2:	6181      	str	r1, [r0, #24]
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop

080016d8 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016d8:	4a02      	ldr	r2, [pc, #8]	; (80016e4 <HAL_PWR_EnableBkUpAccess+0xc>)
 80016da:	6813      	ldr	r3, [r2, #0]
 80016dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4770      	bx	lr
 80016e4:	40007000 	.word	0x40007000

080016e8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <HAL_PWREx_GetVoltageRange+0xc>)
 80016ea:	6818      	ldr	r0, [r3, #0]
#endif
}
 80016ec:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40007000 	.word	0x40007000

080016f8 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80016fc:	d00e      	beq.n	800171c <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016fe:	4a20      	ldr	r2, [pc, #128]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001700:	6813      	ldr	r3, [r2, #0]
 8001702:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170a:	d036      	beq.n	800177a <HAL_PWREx_ControlVoltageScaling+0x82>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800170c:	6813      	ldr	r3, [r2, #0]
 800170e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001716:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001718:	2000      	movs	r0, #0
 800171a:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800171c:	4918      	ldr	r1, [pc, #96]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0x88>)
 800171e:	680b      	ldr	r3, [r1, #0]
 8001720:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001728:	d027      	beq.n	800177a <HAL_PWREx_ControlVoltageScaling+0x82>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800172a:	680a      	ldr	r2, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 800172e:	4816      	ldr	r0, [pc, #88]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x90>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001730:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 8001738:	b410      	push	{r4}
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800173a:	600a      	str	r2, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800173c:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800173e:	694a      	ldr	r2, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001740:	2332      	movs	r3, #50	; 0x32
 8001742:	fb03 f304 	mul.w	r3, r3, r4
 8001746:	fba0 0303 	umull	r0, r3, r0, r3
 800174a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800174c:	0550      	lsls	r0, r2, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800174e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001752:	d506      	bpl.n	8001762 <HAL_PWREx_ControlVoltageScaling+0x6a>
 8001754:	e000      	b.n	8001758 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001756:	b123      	cbz	r3, 8001762 <HAL_PWREx_ControlVoltageScaling+0x6a>
 8001758:	694a      	ldr	r2, [r1, #20]
 800175a:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 800175c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001760:	d4f9      	bmi.n	8001756 <HAL_PWREx_ControlVoltageScaling+0x5e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	055b      	lsls	r3, r3, #21
 8001768:	d503      	bpl.n	8001772 <HAL_PWREx_ControlVoltageScaling+0x7a>
        return HAL_TIMEOUT;
 800176a:	2003      	movs	r0, #3
}
 800176c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001770:	4770      	bx	lr
  return HAL_OK;
 8001772:	2000      	movs	r0, #0
}
 8001774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001778:	4770      	bx	lr
  return HAL_OK;
 800177a:	2000      	movs	r0, #0
}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40007000 	.word	0x40007000
 8001784:	20000200 	.word	0x20000200
 8001788:	431bde83 	.word	0x431bde83

0800178c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800178c:	4a28      	ldr	r2, [pc, #160]	; (8001830 <HAL_RCC_GetSysClockFreq+0xa4>)
 800178e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001790:	68d2      	ldr	r2, [r2, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001792:	f013 030c 	ands.w	r3, r3, #12
 8001796:	d008      	beq.n	80017aa <HAL_RCC_GetSysClockFreq+0x1e>
 8001798:	2b0c      	cmp	r3, #12
 800179a:	d038      	beq.n	800180e <HAL_RCC_GetSysClockFreq+0x82>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800179c:	2b04      	cmp	r3, #4
 800179e:	d034      	beq.n	800180a <HAL_RCC_GetSysClockFreq+0x7e>
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	4824      	ldr	r0, [pc, #144]	; (8001834 <HAL_RCC_GetSysClockFreq+0xa8>)
 80017a4:	bf18      	it	ne
 80017a6:	2000      	movne	r0, #0
 80017a8:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017aa:	4a21      	ldr	r2, [pc, #132]	; (8001830 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017ac:	6811      	ldr	r1, [r2, #0]
 80017ae:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017b0:	bf54      	ite	pl
 80017b2:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017b6:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 80017b8:	491f      	ldr	r1, [pc, #124]	; (8001838 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017ba:	bf54      	ite	pl
 80017bc:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017c0:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80017c4:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017c8:	b303      	cbz	r3, 800180c <HAL_RCC_GetSysClockFreq+0x80>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d12d      	bne.n	800182a <HAL_RCC_GetSysClockFreq+0x9e>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f003 0303 	and.w	r3, r3, #3

    switch (pllsource)
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d025      	beq.n	8001826 <HAL_RCC_GetSysClockFreq+0x9a>
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017da:	4a16      	ldr	r2, [pc, #88]	; (8001834 <HAL_RCC_GetSysClockFreq+0xa8>)
 80017dc:	2b03      	cmp	r3, #3
 80017de:	bf08      	it	eq
 80017e0:	4610      	moveq	r0, r2
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
      break;
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017e4:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017e6:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80017ee:	3301      	adds	r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017f0:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017f4:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80017f8:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017fc:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017fe:	0058      	lsls	r0, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001800:	fbb2 f3f1 	udiv	r3, r2, r1
    sysclockfreq = pllvco / pllr;
 8001804:	fbb3 f0f0 	udiv	r0, r3, r0
 8001808:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800180a:	480c      	ldr	r0, [pc, #48]	; (800183c <HAL_RCC_GetSysClockFreq+0xb0>)
  }

  return sysclockfreq;
}
 800180c:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800180e:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001812:	2a01      	cmp	r2, #1
 8001814:	d0c9      	beq.n	80017aa <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800181e:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001820:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8001824:	d1d9      	bne.n	80017da <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001828:	e7db      	b.n	80017e2 <HAL_RCC_GetSysClockFreq+0x56>
 800182a:	2000      	movs	r0, #0
  return sysclockfreq;
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	007a1200 	.word	0x007a1200
 8001838:	080036a8 	.word	0x080036a8
 800183c:	00f42400 	.word	0x00f42400

08001840 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8001840:	2800      	cmp	r0, #0
 8001842:	f000 8313 	beq.w	8001e6c <HAL_RCC_OscConfig+0x62c>
{
 8001846:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800184a:	4a98      	ldr	r2, [pc, #608]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800184c:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800184e:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001850:	68d6      	ldr	r6, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001852:	06da      	lsls	r2, r3, #27
{
 8001854:	b085      	sub	sp, #20
 8001856:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001858:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800185c:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001860:	d52e      	bpl.n	80018c0 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001862:	2d00      	cmp	r5, #0
 8001864:	f000 8129 	beq.w	8001aba <HAL_RCC_OscConfig+0x27a>
 8001868:	2d0c      	cmp	r5, #12
 800186a:	f000 8123 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x274>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800186e:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8001870:	4f8e      	ldr	r7, [pc, #568]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 817c 	beq.w	8001b70 <HAL_RCC_OscConfig+0x330>
        __HAL_RCC_MSI_ENABLE();
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8001880:	f7ff f9c4 	bl	8000c0c <HAL_GetTick>
 8001884:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001886:	e006      	b.n	8001896 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001888:	f7ff f9c0 	bl	8000c0c <HAL_GetTick>
 800188c:	eba0 0008 	sub.w	r0, r0, r8
 8001890:	2802      	cmp	r0, #2
 8001892:	f200 817d 	bhi.w	8001b90 <HAL_RCC_OscConfig+0x350>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	079b      	lsls	r3, r3, #30
 800189a:	d5f5      	bpl.n	8001888 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f043 0308 	orr.w	r3, r3, #8
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6a22      	ldr	r2, [r4, #32]
 80018a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ac:	4313      	orrs	r3, r2
 80018ae:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69e2      	ldr	r2, [r4, #28]
 80018b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80018b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c0:	07d9      	lsls	r1, r3, #31
 80018c2:	d529      	bpl.n	8001918 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018c4:	2d08      	cmp	r5, #8
 80018c6:	f000 817d 	beq.w	8001bc4 <HAL_RCC_OscConfig+0x384>
 80018ca:	2d0c      	cmp	r5, #12
 80018cc:	f000 8177 	beq.w	8001bbe <HAL_RCC_OscConfig+0x37e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d0:	6863      	ldr	r3, [r4, #4]
 80018d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d6:	f000 817f 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x398>
 80018da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018de:	f000 8232 	beq.w	8001d46 <HAL_RCC_OscConfig+0x506>
 80018e2:	4f72      	ldr	r7, [pc, #456]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018ea:	603a      	str	r2, [r7, #0]
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018f2:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f040 8174 	bne.w	8001be2 <HAL_RCC_OscConfig+0x3a2>
        tickstart = HAL_GetTick();
 80018fa:	f7ff f987 	bl	8000c0c <HAL_GetTick>
 80018fe:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001900:	e006      	b.n	8001910 <HAL_RCC_OscConfig+0xd0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001902:	f7ff f983 	bl	8000c0c <HAL_GetTick>
 8001906:	eba0 0008 	sub.w	r0, r0, r8
 800190a:	2864      	cmp	r0, #100	; 0x64
 800190c:	f200 8140 	bhi.w	8001b90 <HAL_RCC_OscConfig+0x350>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	0398      	lsls	r0, r3, #14
 8001914:	d4f5      	bmi.n	8001902 <HAL_RCC_OscConfig+0xc2>
 8001916:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001918:	0799      	lsls	r1, r3, #30
 800191a:	f100 80a2 	bmi.w	8001a62 <HAL_RCC_OscConfig+0x222>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191e:	0719      	lsls	r1, r3, #28
 8001920:	d519      	bpl.n	8001956 <HAL_RCC_OscConfig+0x116>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001922:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8001924:	4e61      	ldr	r6, [pc, #388]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 810e 	beq.w	8001b48 <HAL_RCC_OscConfig+0x308>
      __HAL_RCC_LSI_ENABLE();
 800192c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001938:	f7ff f968 	bl	8000c0c <HAL_GetTick>
 800193c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800193e:	e005      	b.n	800194c <HAL_RCC_OscConfig+0x10c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001940:	f7ff f964 	bl	8000c0c <HAL_GetTick>
 8001944:	1bc0      	subs	r0, r0, r7
 8001946:	2802      	cmp	r0, #2
 8001948:	f200 8122 	bhi.w	8001b90 <HAL_RCC_OscConfig+0x350>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800194c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8001950:	079a      	lsls	r2, r3, #30
 8001952:	d5f5      	bpl.n	8001940 <HAL_RCC_OscConfig+0x100>
 8001954:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001956:	075f      	lsls	r7, r3, #29
 8001958:	d53f      	bpl.n	80019da <HAL_RCC_OscConfig+0x19a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800195a:	4b54      	ldr	r3, [pc, #336]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800195c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800195e:	00d6      	lsls	r6, r2, #3
 8001960:	f100 8160 	bmi.w	8001c24 <HAL_RCC_OscConfig+0x3e4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001964:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001966:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800196a:	659a      	str	r2, [r3, #88]	; 0x58
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001976:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001978:	4e4d      	ldr	r6, [pc, #308]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 800197a:	6833      	ldr	r3, [r6, #0]
 800197c:	05d8      	lsls	r0, r3, #23
 800197e:	f140 81d0 	bpl.w	8001d22 <HAL_RCC_OscConfig+0x4e2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001982:	68a3      	ldr	r3, [r4, #8]
 8001984:	2b01      	cmp	r3, #1
 8001986:	f000 8218 	beq.w	8001dba <HAL_RCC_OscConfig+0x57a>
 800198a:	2b05      	cmp	r3, #5
 800198c:	f000 814c 	beq.w	8001c28 <HAL_RCC_OscConfig+0x3e8>
 8001990:	4e46      	ldr	r6, [pc, #280]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001992:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800199e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80019a2:	f022 0204 	bic.w	r2, r2, #4
 80019a6:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f040 8149 	bne.w	8001c42 <HAL_RCC_OscConfig+0x402>
      tickstart = HAL_GetTick();
 80019b0:	f7ff f92c 	bl	8000c0c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019b8:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019ba:	e006      	b.n	80019ca <HAL_RCC_OscConfig+0x18a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019bc:	f7ff f926 	bl	8000c0c <HAL_GetTick>
 80019c0:	eba0 0009 	sub.w	r0, r0, r9
 80019c4:	4540      	cmp	r0, r8
 80019c6:	f200 80e3 	bhi.w	8001b90 <HAL_RCC_OscConfig+0x350>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019ca:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80019ce:	079b      	lsls	r3, r3, #30
 80019d0:	d4f4      	bmi.n	80019bc <HAL_RCC_OscConfig+0x17c>
    if(pwrclkchanged == SET)
 80019d2:	2f00      	cmp	r7, #0
 80019d4:	f040 825f 	bne.w	8001e96 <HAL_RCC_OscConfig+0x656>
 80019d8:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019da:	0698      	lsls	r0, r3, #26
 80019dc:	d518      	bpl.n	8001a10 <HAL_RCC_OscConfig+0x1d0>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019de:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 80019e0:	4e32      	ldr	r6, [pc, #200]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 813f 	beq.w	8001c66 <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_HSI48_ENABLE();
 80019e8:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 80019f4:	f7ff f90a 	bl	8000c0c <HAL_GetTick>
 80019f8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019fa:	e005      	b.n	8001a08 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019fc:	f7ff f906 	bl	8000c0c <HAL_GetTick>
 8001a00:	1bc0      	subs	r0, r0, r7
 8001a02:	2802      	cmp	r0, #2
 8001a04:	f200 80c4 	bhi.w	8001b90 <HAL_RCC_OscConfig+0x350>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a08:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8001a0c:	0799      	lsls	r1, r3, #30
 8001a0e:	d5f5      	bpl.n	80019fc <HAL_RCC_OscConfig+0x1bc>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a12:	b313      	cbz	r3, 8001a5a <HAL_RCC_OscConfig+0x21a>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	f000 81d8 	beq.w	8001dca <HAL_RCC_OscConfig+0x58a>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a1a:	2d0c      	cmp	r5, #12
 8001a1c:	f000 8090 	beq.w	8001b40 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_PLL_DISABLE();
 8001a20:	4b22      	ldr	r3, [pc, #136]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001a28:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	f140 8170 	bpl.w	8001d12 <HAL_RCC_OscConfig+0x4d2>
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001a32:	4c1e      	ldr	r4, [pc, #120]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a34:	68e3      	ldr	r3, [r4, #12]
 8001a36:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001a40:	f7ff f8e4 	bl	8000c0c <HAL_GetTick>
 8001a44:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a46:	e005      	b.n	8001a54 <HAL_RCC_OscConfig+0x214>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff f8e0 	bl	8000c0c <HAL_GetTick>
 8001a4c:	1b40      	subs	r0, r0, r5
 8001a4e:	2802      	cmp	r0, #2
 8001a50:	f200 809e 	bhi.w	8001b90 <HAL_RCC_OscConfig+0x350>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a54:	6823      	ldr	r3, [r4, #0]
 8001a56:	019b      	lsls	r3, r3, #6
 8001a58:	d4f6      	bmi.n	8001a48 <HAL_RCC_OscConfig+0x208>
  return HAL_OK;
 8001a5a:	2000      	movs	r0, #0
}
 8001a5c:	b005      	add	sp, #20
 8001a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a62:	2d04      	cmp	r5, #4
 8001a64:	f000 809b 	beq.w	8001b9e <HAL_RCC_OscConfig+0x35e>
 8001a68:	2d0c      	cmp	r5, #12
 8001a6a:	f000 8095 	beq.w	8001b98 <HAL_RCC_OscConfig+0x358>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6e:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8001a70:	4e0e      	ldr	r6, [pc, #56]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 80c4 	beq.w	8001c00 <HAL_RCC_OscConfig+0x3c0>
        __HAL_RCC_HSI_ENABLE();
 8001a78:	6833      	ldr	r3, [r6, #0]
 8001a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001a80:	f7ff f8c4 	bl	8000c0c <HAL_GetTick>
 8001a84:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a86:	e004      	b.n	8001a92 <HAL_RCC_OscConfig+0x252>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a88:	f7ff f8c0 	bl	8000c0c <HAL_GetTick>
 8001a8c:	1bc0      	subs	r0, r0, r7
 8001a8e:	2802      	cmp	r0, #2
 8001a90:	d87e      	bhi.n	8001b90 <HAL_RCC_OscConfig+0x350>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a92:	6833      	ldr	r3, [r6, #0]
 8001a94:	055b      	lsls	r3, r3, #21
 8001a96:	d5f7      	bpl.n	8001a88 <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	6873      	ldr	r3, [r6, #4]
 8001a9a:	6922      	ldr	r2, [r4, #16]
 8001a9c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001aa0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001aa4:	6073      	str	r3, [r6, #4]
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	e739      	b.n	800191e <HAL_RCC_OscConfig+0xde>
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ab4:	2e01      	cmp	r6, #1
 8001ab6:	f47f aeda 	bne.w	800186e <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aba:	4ba9      	ldr	r3, [pc, #676]	; (8001d60 <HAL_RCC_OscConfig+0x520>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	079f      	lsls	r7, r3, #30
 8001ac0:	d43b      	bmi.n	8001b3a <HAL_RCC_OscConfig+0x2fa>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ac2:	4ba7      	ldr	r3, [pc, #668]	; (8001d60 <HAL_RCC_OscConfig+0x520>)
 8001ac4:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8001ac8:	681a      	ldr	r2, [r3, #0]
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001aca:	4fa5      	ldr	r7, [pc, #660]	; (8001d60 <HAL_RCC_OscConfig+0x520>)
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001acc:	0710      	lsls	r0, r2, #28
 8001ace:	bf56      	itet	pl
 8001ad0:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8001ad4:	681b      	ldrmi	r3, [r3, #0]
 8001ad6:	091b      	lsrpl	r3, r3, #4
 8001ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001adc:	4543      	cmp	r3, r8
 8001ade:	f0c0 80d6 	bcc.w	8001c8e <HAL_RCC_OscConfig+0x44e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f043 0308 	orr.w	r3, r3, #8
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001af0:	ea43 0308 	orr.w	r3, r3, r8
 8001af4:	603b      	str	r3, [r7, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69e2      	ldr	r2, [r4, #28]
 8001afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001afe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b02:	607b      	str	r3, [r7, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b04:	2d00      	cmp	r5, #0
 8001b06:	f000 8135 	beq.w	8001d74 <HAL_RCC_OscConfig+0x534>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b0a:	f7ff fe3f 	bl	800178c <HAL_RCC_GetSysClockFreq>
 8001b0e:	4b94      	ldr	r3, [pc, #592]	; (8001d60 <HAL_RCC_OscConfig+0x520>)
 8001b10:	4f94      	ldr	r7, [pc, #592]	; (8001d64 <HAL_RCC_OscConfig+0x524>)
 8001b12:	689b      	ldr	r3, [r3, #8]
        status = HAL_InitTick(uwTickPrio);
 8001b14:	4994      	ldr	r1, [pc, #592]	; (8001d68 <HAL_RCC_OscConfig+0x528>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b16:	4a95      	ldr	r2, [pc, #596]	; (8001d6c <HAL_RCC_OscConfig+0x52c>)
 8001b18:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b1c:	5cfb      	ldrb	r3, [r7, r3]
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8001b26:	6808      	ldr	r0, [r1, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b28:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8001b2a:	f7ff f829 	bl	8000b80 <HAL_InitTick>
        if(status != HAL_OK)
 8001b2e:	bb80      	cbnz	r0, 8001b92 <HAL_RCC_OscConfig+0x352>
 8001b30:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b32:	07d9      	lsls	r1, r3, #31
 8001b34:	f57f aef0 	bpl.w	8001918 <HAL_RCC_OscConfig+0xd8>
 8001b38:	e6c4      	b.n	80018c4 <HAL_RCC_OscConfig+0x84>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b3a:	69a3      	ldr	r3, [r4, #24]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1c0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x282>
          return HAL_ERROR;
 8001b40:	2001      	movs	r0, #1
}
 8001b42:	b005      	add	sp, #20
 8001b44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_LSI_DISABLE();
 8001b48:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001b54:	f7ff f85a 	bl	8000c0c <HAL_GetTick>
 8001b58:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b5a:	e004      	b.n	8001b66 <HAL_RCC_OscConfig+0x326>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5c:	f7ff f856 	bl	8000c0c <HAL_GetTick>
 8001b60:	1bc0      	subs	r0, r0, r7
 8001b62:	2802      	cmp	r0, #2
 8001b64:	d814      	bhi.n	8001b90 <HAL_RCC_OscConfig+0x350>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b66:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8001b6a:	079b      	lsls	r3, r3, #30
 8001b6c:	d4f6      	bmi.n	8001b5c <HAL_RCC_OscConfig+0x31c>
 8001b6e:	e6f1      	b.n	8001954 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_MSI_DISABLE();
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8001b78:	f7ff f848 	bl	8000c0c <HAL_GetTick>
 8001b7c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	0798      	lsls	r0, r3, #30
 8001b82:	d5d5      	bpl.n	8001b30 <HAL_RCC_OscConfig+0x2f0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b84:	f7ff f842 	bl	8000c0c <HAL_GetTick>
 8001b88:	eba0 0008 	sub.w	r0, r0, r8
 8001b8c:	2802      	cmp	r0, #2
 8001b8e:	d9f6      	bls.n	8001b7e <HAL_RCC_OscConfig+0x33e>
            return HAL_TIMEOUT;
 8001b90:	2003      	movs	r0, #3
}
 8001b92:	b005      	add	sp, #20
 8001b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b98:	2e02      	cmp	r6, #2
 8001b9a:	f47f af68 	bne.w	8001a6e <HAL_RCC_OscConfig+0x22e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b9e:	4a70      	ldr	r2, [pc, #448]	; (8001d60 <HAL_RCC_OscConfig+0x520>)
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	0552      	lsls	r2, r2, #21
 8001ba4:	d502      	bpl.n	8001bac <HAL_RCC_OscConfig+0x36c>
 8001ba6:	68e2      	ldr	r2, [r4, #12]
 8001ba8:	2a00      	cmp	r2, #0
 8001baa:	d0c9      	beq.n	8001b40 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bac:	496c      	ldr	r1, [pc, #432]	; (8001d60 <HAL_RCC_OscConfig+0x520>)
 8001bae:	6920      	ldr	r0, [r4, #16]
 8001bb0:	684a      	ldr	r2, [r1, #4]
 8001bb2:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8001bb6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001bba:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bbc:	e6af      	b.n	800191e <HAL_RCC_OscConfig+0xde>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bbe:	2e03      	cmp	r6, #3
 8001bc0:	f47f ae86 	bne.w	80018d0 <HAL_RCC_OscConfig+0x90>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	4a66      	ldr	r2, [pc, #408]	; (8001d60 <HAL_RCC_OscConfig+0x520>)
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	0392      	lsls	r2, r2, #14
 8001bca:	f57f aea5 	bpl.w	8001918 <HAL_RCC_OscConfig+0xd8>
 8001bce:	6862      	ldr	r2, [r4, #4]
 8001bd0:	2a00      	cmp	r2, #0
 8001bd2:	f47f aea1 	bne.w	8001918 <HAL_RCC_OscConfig+0xd8>
 8001bd6:	e7b3      	b.n	8001b40 <HAL_RCC_OscConfig+0x300>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd8:	4a61      	ldr	r2, [pc, #388]	; (8001d60 <HAL_RCC_OscConfig+0x520>)
 8001bda:	6813      	ldr	r3, [r2, #0]
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001be2:	f7ff f813 	bl	8000c0c <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be6:	4f5e      	ldr	r7, [pc, #376]	; (8001d60 <HAL_RCC_OscConfig+0x520>)
        tickstart = HAL_GetTick();
 8001be8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bea:	e005      	b.n	8001bf8 <HAL_RCC_OscConfig+0x3b8>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff f80e 	bl	8000c0c <HAL_GetTick>
 8001bf0:	eba0 0008 	sub.w	r0, r0, r8
 8001bf4:	2864      	cmp	r0, #100	; 0x64
 8001bf6:	d8cb      	bhi.n	8001b90 <HAL_RCC_OscConfig+0x350>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	039b      	lsls	r3, r3, #14
 8001bfc:	d5f6      	bpl.n	8001bec <HAL_RCC_OscConfig+0x3ac>
 8001bfe:	e68a      	b.n	8001916 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI_DISABLE();
 8001c00:	6833      	ldr	r3, [r6, #0]
 8001c02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c06:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001c08:	f7ff f800 	bl	8000c0c <HAL_GetTick>
 8001c0c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c0e:	e004      	b.n	8001c1a <HAL_RCC_OscConfig+0x3da>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c10:	f7fe fffc 	bl	8000c0c <HAL_GetTick>
 8001c14:	1bc0      	subs	r0, r0, r7
 8001c16:	2802      	cmp	r0, #2
 8001c18:	d8ba      	bhi.n	8001b90 <HAL_RCC_OscConfig+0x350>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c1a:	6833      	ldr	r3, [r6, #0]
 8001c1c:	0558      	lsls	r0, r3, #21
 8001c1e:	d4f7      	bmi.n	8001c10 <HAL_RCC_OscConfig+0x3d0>
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	e67c      	b.n	800191e <HAL_RCC_OscConfig+0xde>
    FlagStatus       pwrclkchanged = RESET;
 8001c24:	2700      	movs	r7, #0
 8001c26:	e6a7      	b.n	8001978 <HAL_RCC_OscConfig+0x138>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c28:	4b4d      	ldr	r3, [pc, #308]	; (8001d60 <HAL_RCC_OscConfig+0x520>)
 8001c2a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001c2e:	f042 0204 	orr.w	r2, r2, #4
 8001c32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001c36:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001c42:	f7fe ffe3 	bl	8000c0c <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c46:	4e46      	ldr	r6, [pc, #280]	; (8001d60 <HAL_RCC_OscConfig+0x520>)
      tickstart = HAL_GetTick();
 8001c48:	4681      	mov	r9, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c4e:	e005      	b.n	8001c5c <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c50:	f7fe ffdc 	bl	8000c0c <HAL_GetTick>
 8001c54:	eba0 0009 	sub.w	r0, r0, r9
 8001c58:	4540      	cmp	r0, r8
 8001c5a:	d899      	bhi.n	8001b90 <HAL_RCC_OscConfig+0x350>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c5c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001c60:	079a      	lsls	r2, r3, #30
 8001c62:	d5f5      	bpl.n	8001c50 <HAL_RCC_OscConfig+0x410>
 8001c64:	e6b5      	b.n	80019d2 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_HSI48_DISABLE();
 8001c66:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001c72:	f7fe ffcb 	bl	8000c0c <HAL_GetTick>
 8001c76:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c78:	e004      	b.n	8001c84 <HAL_RCC_OscConfig+0x444>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c7a:	f7fe ffc7 	bl	8000c0c <HAL_GetTick>
 8001c7e:	1bc0      	subs	r0, r0, r7
 8001c80:	2802      	cmp	r0, #2
 8001c82:	d885      	bhi.n	8001b90 <HAL_RCC_OscConfig+0x350>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c84:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8001c88:	079a      	lsls	r2, r3, #30
 8001c8a:	d4f6      	bmi.n	8001c7a <HAL_RCC_OscConfig+0x43a>
 8001c8c:	e6c0      	b.n	8001a10 <HAL_RCC_OscConfig+0x1d0>
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c90:	00d9      	lsls	r1, r3, #3
 8001c92:	d443      	bmi.n	8001d1c <HAL_RCC_OscConfig+0x4dc>
  {
    vos = HAL_PWREx_GetVoltageRange();
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	9b02      	ldr	r3, [sp, #8]
    vos = HAL_PWREx_GetVoltageRange();
 8001ca6:	f7ff fd1f 	bl	80016e8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	65bb      	str	r3, [r7, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cb2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001cb6:	f000 80f4 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x662>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cba:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8001cbe:	f200 80d7 	bhi.w	8001e70 <HAL_RCC_OscConfig+0x630>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cc2:	f000 814c 	beq.w	8001f5e <HAL_RCC_OscConfig+0x71e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cc6:	f1a8 0870 	sub.w	r8, r8, #112	; 0x70
 8001cca:	fab8 f888 	clz	r8, r8
 8001cce:	ea4f 1858 	mov.w	r8, r8, lsr #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cd2:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <HAL_RCC_OscConfig+0x530>)
 8001cd4:	6813      	ldr	r3, [r2, #0]
 8001cd6:	f023 0307 	bic.w	r3, r3, #7
 8001cda:	ea43 0308 	orr.w	r3, r3, r8
 8001cde:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ce0:	6813      	ldr	r3, [r2, #0]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	4598      	cmp	r8, r3
 8001ce8:	f47f af2a 	bne.w	8001b40 <HAL_RCC_OscConfig+0x300>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cec:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <HAL_RCC_OscConfig+0x520>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	f042 0208 	orr.w	r2, r2, #8
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	6a21      	ldr	r1, [r4, #32]
 8001cfa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	69e1      	ldr	r1, [r4, #28]
 8001d06:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001d0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	e6fb      	b.n	8001b0a <HAL_RCC_OscConfig+0x2ca>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	f022 0203 	bic.w	r2, r2, #3
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	e68a      	b.n	8001a32 <HAL_RCC_OscConfig+0x1f2>
    vos = HAL_PWREx_GetVoltageRange();
 8001d1c:	f7ff fce4 	bl	80016e8 <HAL_PWREx_GetVoltageRange>
 8001d20:	e7c7      	b.n	8001cb2 <HAL_RCC_OscConfig+0x472>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d22:	6833      	ldr	r3, [r6, #0]
 8001d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d28:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d2a:	f7fe ff6f 	bl	8000c0c <HAL_GetTick>
 8001d2e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d30:	6833      	ldr	r3, [r6, #0]
 8001d32:	05d9      	lsls	r1, r3, #23
 8001d34:	f53f ae25 	bmi.w	8001982 <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d38:	f7fe ff68 	bl	8000c0c <HAL_GetTick>
 8001d3c:	eba0 0008 	sub.w	r0, r0, r8
 8001d40:	2802      	cmp	r0, #2
 8001d42:	d9f5      	bls.n	8001d30 <HAL_RCC_OscConfig+0x4f0>
 8001d44:	e724      	b.n	8001b90 <HAL_RCC_OscConfig+0x350>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d4a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	e740      	b.n	8001be2 <HAL_RCC_OscConfig+0x3a2>
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08003690 	.word	0x08003690
 8001d68:	20000208 	.word	0x20000208
 8001d6c:	20000200 	.word	0x20000200
 8001d70:	40022000 	.word	0x40022000
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d76:	00da      	lsls	r2, r3, #3
 8001d78:	d57d      	bpl.n	8001e76 <HAL_RCC_OscConfig+0x636>
    vos = HAL_PWREx_GetVoltageRange();
 8001d7a:	f7ff fcb5 	bl	80016e8 <HAL_PWREx_GetVoltageRange>
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001d82:	f000 809c 	beq.w	8001ebe <HAL_RCC_OscConfig+0x67e>
    if(msirange > RCC_MSIRANGE_8)
 8001d86:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8001d8a:	f200 8095 	bhi.w	8001eb8 <HAL_RCC_OscConfig+0x678>
      if(msirange == RCC_MSIRANGE_8)
 8001d8e:	f000 80ec 	beq.w	8001f6a <HAL_RCC_OscConfig+0x72a>
      else if(msirange == RCC_MSIRANGE_7)
 8001d92:	f1a8 0870 	sub.w	r8, r8, #112	; 0x70
 8001d96:	fab8 f888 	clz	r8, r8
 8001d9a:	ea4f 1858 	mov.w	r8, r8, lsr #5
  __HAL_FLASH_SET_LATENCY(latency);
 8001d9e:	4a74      	ldr	r2, [pc, #464]	; (8001f70 <HAL_RCC_OscConfig+0x730>)
 8001da0:	6813      	ldr	r3, [r2, #0]
 8001da2:	f023 0307 	bic.w	r3, r3, #7
 8001da6:	ea43 0308 	orr.w	r3, r3, r8
 8001daa:	6013      	str	r3, [r2, #0]
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dac:	6813      	ldr	r3, [r2, #0]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	4598      	cmp	r8, r3
 8001db4:	f47f aec4 	bne.w	8001b40 <HAL_RCC_OscConfig+0x300>
 8001db8:	e6a7      	b.n	8001b0a <HAL_RCC_OscConfig+0x2ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dba:	4a6e      	ldr	r2, [pc, #440]	; (8001f74 <HAL_RCC_OscConfig+0x734>)
 8001dbc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dc8:	e73b      	b.n	8001c42 <HAL_RCC_OscConfig+0x402>
      pll_config = RCC->PLLCFGR;
 8001dca:	4a6a      	ldr	r2, [pc, #424]	; (8001f74 <HAL_RCC_OscConfig+0x734>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dcc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 8001dce:	68d3      	ldr	r3, [r2, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd0:	f003 0003 	and.w	r0, r3, #3
 8001dd4:	4288      	cmp	r0, r1
 8001dd6:	d07d      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x694>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd8:	2d0c      	cmp	r5, #12
 8001dda:	f43f aeb1 	beq.w	8001b40 <HAL_RCC_OscConfig+0x300>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dde:	4d65      	ldr	r5, [pc, #404]	; (8001f74 <HAL_RCC_OscConfig+0x734>)
 8001de0:	682b      	ldr	r3, [r5, #0]
 8001de2:	015b      	lsls	r3, r3, #5
 8001de4:	f53f aeac 	bmi.w	8001b40 <HAL_RCC_OscConfig+0x300>
            __HAL_RCC_PLL_DISABLE();
 8001de8:	682b      	ldr	r3, [r5, #0]
 8001dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dee:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8001df0:	f7fe ff0c 	bl	8000c0c <HAL_GetTick>
 8001df4:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df6:	e005      	b.n	8001e04 <HAL_RCC_OscConfig+0x5c4>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe ff08 	bl	8000c0c <HAL_GetTick>
 8001dfc:	1b80      	subs	r0, r0, r6
 8001dfe:	2802      	cmp	r0, #2
 8001e00:	f63f aec6 	bhi.w	8001b90 <HAL_RCC_OscConfig+0x350>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	682b      	ldr	r3, [r5, #0]
 8001e06:	019f      	lsls	r7, r3, #6
 8001e08:	d4f6      	bmi.n	8001df8 <HAL_RCC_OscConfig+0x5b8>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0a:	68e9      	ldr	r1, [r5, #12]
 8001e0c:	4b5a      	ldr	r3, [pc, #360]	; (8001f78 <HAL_RCC_OscConfig+0x738>)
 8001e0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e10:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001e12:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001e14:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001e16:	400b      	ands	r3, r1
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001e1c:	6c22      	ldr	r2, [r4, #64]	; 0x40
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1e:	4c55      	ldr	r4, [pc, #340]	; (8001f74 <HAL_RCC_OscConfig+0x734>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e20:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001e24:	3801      	subs	r0, #1
 8001e26:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8001e2a:	0849      	lsrs	r1, r1, #1
 8001e2c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001e30:	3901      	subs	r1, #1
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8001e38:	3a01      	subs	r2, #1
 8001e3a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001e3e:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8001e40:	682b      	ldr	r3, [r5, #0]
 8001e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e46:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e48:	68eb      	ldr	r3, [r5, #12]
 8001e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e4e:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8001e50:	f7fe fedc 	bl	8000c0c <HAL_GetTick>
 8001e54:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e56:	e005      	b.n	8001e64 <HAL_RCC_OscConfig+0x624>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e58:	f7fe fed8 	bl	8000c0c <HAL_GetTick>
 8001e5c:	1b40      	subs	r0, r0, r5
 8001e5e:	2802      	cmp	r0, #2
 8001e60:	f63f ae96 	bhi.w	8001b90 <HAL_RCC_OscConfig+0x350>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	019e      	lsls	r6, r3, #6
 8001e68:	d5f6      	bpl.n	8001e58 <HAL_RCC_OscConfig+0x618>
 8001e6a:	e5f6      	b.n	8001a5a <HAL_RCC_OscConfig+0x21a>
    return HAL_ERROR;
 8001e6c:	2001      	movs	r0, #1
}
 8001e6e:	4770      	bx	lr
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e70:	f04f 0803 	mov.w	r8, #3
 8001e74:	e72d      	b.n	8001cd2 <HAL_RCC_OscConfig+0x492>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	9303      	str	r3, [sp, #12]
 8001e86:	9b03      	ldr	r3, [sp, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e88:	f7ff fc2e 	bl	80016e8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e92:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e94:	e773      	b.n	8001d7e <HAL_RCC_OscConfig+0x53e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e96:	4a37      	ldr	r2, [pc, #220]	; (8001f74 <HAL_RCC_OscConfig+0x734>)
 8001e98:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea0:	e59a      	b.n	80019d8 <HAL_RCC_OscConfig+0x198>
    if(msirange > RCC_MSIRANGE_8)
 8001ea2:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8001ea6:	d957      	bls.n	8001f58 <HAL_RCC_OscConfig+0x718>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ea8:	f1b8 0fa1 	cmp.w	r8, #161	; 0xa1
 8001eac:	bf34      	ite	cc
 8001eae:	f04f 0801 	movcc.w	r8, #1
 8001eb2:	f04f 0802 	movcs.w	r8, #2
 8001eb6:	e70c      	b.n	8001cd2 <HAL_RCC_OscConfig+0x492>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001eb8:	f04f 0803 	mov.w	r8, #3
 8001ebc:	e76f      	b.n	8001d9e <HAL_RCC_OscConfig+0x55e>
    if(msirange > RCC_MSIRANGE_8)
 8001ebe:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8001ec2:	d94f      	bls.n	8001f64 <HAL_RCC_OscConfig+0x724>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ec4:	f1b8 0fa1 	cmp.w	r8, #161	; 0xa1
 8001ec8:	bf34      	ite	cc
 8001eca:	f04f 0801 	movcc.w	r8, #1
 8001ece:	f04f 0802 	movcs.w	r8, #2
 8001ed2:	e764      	b.n	8001d9e <HAL_RCC_OscConfig+0x55e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ed4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001ed6:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8001eda:	3801      	subs	r0, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001edc:	ebb1 1f00 	cmp.w	r1, r0, lsl #4
 8001ee0:	f47f af7a 	bne.w	8001dd8 <HAL_RCC_OscConfig+0x598>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001ee6:	f403 41fe 	and.w	r1, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eea:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
 8001eee:	f47f af73 	bne.w	8001dd8 <HAL_RCC_OscConfig+0x598>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ef2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001ef4:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef8:	ebb1 6fc0 	cmp.w	r1, r0, lsl #27
 8001efc:	f47f af6c 	bne.w	8001dd8 <HAL_RCC_OscConfig+0x598>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001f02:	0849      	lsrs	r1, r1, #1
 8001f04:	3901      	subs	r1, #1
 8001f06:	f403 00c0 	and.w	r0, r3, #6291456	; 0x600000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f0a:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 8001f0e:	f47f af63 	bne.w	8001dd8 <HAL_RCC_OscConfig+0x598>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f12:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001f14:	0849      	lsrs	r1, r1, #1
 8001f16:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001f1a:	3901      	subs	r1, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f1c:	ebb3 6f41 	cmp.w	r3, r1, lsl #25
 8001f20:	f47f af5a 	bne.w	8001dd8 <HAL_RCC_OscConfig+0x598>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f24:	6813      	ldr	r3, [r2, #0]
 8001f26:	0198      	lsls	r0, r3, #6
 8001f28:	f53f ad97 	bmi.w	8001a5a <HAL_RCC_OscConfig+0x21a>
          __HAL_RCC_PLL_ENABLE();
 8001f2c:	6813      	ldr	r3, [r2, #0]
 8001f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f32:	6013      	str	r3, [r2, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f34:	68d3      	ldr	r3, [r2, #12]
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	60d3      	str	r3, [r2, #12]
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3c:	4614      	mov	r4, r2
          tickstart = HAL_GetTick();
 8001f3e:	f7fe fe65 	bl	8000c0c <HAL_GetTick>
 8001f42:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	0199      	lsls	r1, r3, #6
 8001f48:	f53f ad87 	bmi.w	8001a5a <HAL_RCC_OscConfig+0x21a>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7fe fe5e 	bl	8000c0c <HAL_GetTick>
 8001f50:	1b40      	subs	r0, r0, r5
 8001f52:	2802      	cmp	r0, #2
 8001f54:	d9f6      	bls.n	8001f44 <HAL_RCC_OscConfig+0x704>
 8001f56:	e61b      	b.n	8001b90 <HAL_RCC_OscConfig+0x350>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f58:	f04f 0800 	mov.w	r8, #0
 8001f5c:	e6b9      	b.n	8001cd2 <HAL_RCC_OscConfig+0x492>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f5e:	f04f 0802 	mov.w	r8, #2
 8001f62:	e6b6      	b.n	8001cd2 <HAL_RCC_OscConfig+0x492>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f64:	f04f 0800 	mov.w	r8, #0
 8001f68:	e719      	b.n	8001d9e <HAL_RCC_OscConfig+0x55e>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f6a:	f04f 0802 	mov.w	r8, #2
 8001f6e:	e716      	b.n	8001d9e <HAL_RCC_OscConfig+0x55e>
 8001f70:	40022000 	.word	0x40022000
 8001f74:	40021000 	.word	0x40021000
 8001f78:	019d808c 	.word	0x019d808c

08001f7c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001f7c:	b178      	cbz	r0, 8001f9e <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7e:	4a47      	ldr	r2, [pc, #284]	; (800209c <HAL_RCC_ClockConfig+0x120>)
 8001f80:	6813      	ldr	r3, [r2, #0]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	428b      	cmp	r3, r1
 8001f88:	d20b      	bcs.n	8001fa2 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	6813      	ldr	r3, [r2, #0]
 8001f8c:	f023 0307 	bic.w	r3, r3, #7
 8001f90:	430b      	orrs	r3, r1
 8001f92:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f94:	6813      	ldr	r3, [r2, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	4299      	cmp	r1, r3
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8001f9e:	2001      	movs	r0, #1
}
 8001fa0:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa2:	6803      	ldr	r3, [r0, #0]
{
 8001fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fa8:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001faa:	07d9      	lsls	r1, r3, #31
 8001fac:	4604      	mov	r4, r0
 8001fae:	d41b      	bmi.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	0799      	lsls	r1, r3, #30
 8001fb2:	d506      	bpl.n	8001fc2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb4:	493a      	ldr	r1, [pc, #232]	; (80020a0 <HAL_RCC_ClockConfig+0x124>)
 8001fb6:	68a0      	ldr	r0, [r4, #8]
 8001fb8:	688a      	ldr	r2, [r1, #8]
 8001fba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001fbe:	4302      	orrs	r2, r0
 8001fc0:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc2:	4936      	ldr	r1, [pc, #216]	; (800209c <HAL_RCC_ClockConfig+0x120>)
 8001fc4:	680a      	ldr	r2, [r1, #0]
 8001fc6:	f002 0207 	and.w	r2, r2, #7
 8001fca:	4295      	cmp	r5, r2
 8001fcc:	d232      	bcs.n	8002034 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	680a      	ldr	r2, [r1, #0]
 8001fd0:	f022 0207 	bic.w	r2, r2, #7
 8001fd4:	432a      	orrs	r2, r5
 8001fd6:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd8:	680a      	ldr	r2, [r1, #0]
 8001fda:	f002 0207 	and.w	r2, r2, #7
 8001fde:	4295      	cmp	r5, r2
 8001fe0:	d028      	beq.n	8002034 <HAL_RCC_ClockConfig+0xb8>
    return HAL_ERROR;
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe8:	6843      	ldr	r3, [r0, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fea:	4a2d      	ldr	r2, [pc, #180]	; (80020a0 <HAL_RCC_ClockConfig+0x124>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fec:	2b03      	cmp	r3, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fee:	6812      	ldr	r2, [r2, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff0:	d04d      	beq.n	800208e <HAL_RCC_ClockConfig+0x112>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d045      	beq.n	8002082 <HAL_RCC_ClockConfig+0x106>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d14c      	bne.n	8002094 <HAL_RCC_ClockConfig+0x118>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ffa:	0796      	lsls	r6, r2, #30
 8001ffc:	d5f1      	bpl.n	8001fe2 <HAL_RCC_ClockConfig+0x66>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ffe:	4e28      	ldr	r6, [pc, #160]	; (80020a0 <HAL_RCC_ClockConfig+0x124>)
 8002000:	68b2      	ldr	r2, [r6, #8]
 8002002:	f022 0203 	bic.w	r2, r2, #3
 8002006:	4313      	orrs	r3, r2
 8002008:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800200a:	f7fe fdff 	bl	8000c0c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002012:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002014:	e005      	b.n	8002022 <HAL_RCC_ClockConfig+0xa6>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002016:	f7fe fdf9 	bl	8000c0c <HAL_GetTick>
 800201a:	eba0 0008 	sub.w	r0, r0, r8
 800201e:	42b8      	cmp	r0, r7
 8002020:	d832      	bhi.n	8002088 <HAL_RCC_ClockConfig+0x10c>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002022:	68b3      	ldr	r3, [r6, #8]
 8002024:	6862      	ldr	r2, [r4, #4]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800202e:	d1f2      	bne.n	8002016 <HAL_RCC_ClockConfig+0x9a>
 8002030:	6823      	ldr	r3, [r4, #0]
 8002032:	e7bd      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x34>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	075a      	lsls	r2, r3, #29
 8002036:	d506      	bpl.n	8002046 <HAL_RCC_ClockConfig+0xca>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002038:	4919      	ldr	r1, [pc, #100]	; (80020a0 <HAL_RCC_ClockConfig+0x124>)
 800203a:	68e0      	ldr	r0, [r4, #12]
 800203c:	688a      	ldr	r2, [r1, #8]
 800203e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002042:	4302      	orrs	r2, r0
 8002044:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002046:	071b      	lsls	r3, r3, #28
 8002048:	d507      	bpl.n	800205a <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800204a:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <HAL_RCC_ClockConfig+0x124>)
 800204c:	6921      	ldr	r1, [r4, #16]
 800204e:	6893      	ldr	r3, [r2, #8]
 8002050:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002054:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002058:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800205a:	f7ff fb97 	bl	800178c <HAL_RCC_GetSysClockFreq>
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_RCC_ClockConfig+0x124>)
 8002060:	4c10      	ldr	r4, [pc, #64]	; (80020a4 <HAL_RCC_ClockConfig+0x128>)
 8002062:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 8002064:	4910      	ldr	r1, [pc, #64]	; (80020a8 <HAL_RCC_ClockConfig+0x12c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002066:	4a11      	ldr	r2, [pc, #68]	; (80020ac <HAL_RCC_ClockConfig+0x130>)
 8002068:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800206c:	5ce3      	ldrb	r3, [r4, r3]
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	fa20 f303 	lsr.w	r3, r0, r3
}
 8002076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800207a:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800207c:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 800207e:	f7fe bd7f 	b.w	8000b80 <HAL_InitTick>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002082:	0397      	lsls	r7, r2, #14
 8002084:	d4bb      	bmi.n	8001ffe <HAL_RCC_ClockConfig+0x82>
 8002086:	e7ac      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x66>
        return HAL_TIMEOUT;
 8002088:	2003      	movs	r0, #3
}
 800208a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208e:	0192      	lsls	r2, r2, #6
 8002090:	d4b5      	bmi.n	8001ffe <HAL_RCC_ClockConfig+0x82>
 8002092:	e7a6      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x66>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002094:	0550      	lsls	r0, r2, #21
 8002096:	d5a4      	bpl.n	8001fe2 <HAL_RCC_ClockConfig+0x66>
 8002098:	e7b1      	b.n	8001ffe <HAL_RCC_ClockConfig+0x82>
 800209a:	bf00      	nop
 800209c:	40022000 	.word	0x40022000
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08003690 	.word	0x08003690
 80020a8:	20000208 	.word	0x20000208
 80020ac:	20000200 	.word	0x20000200

080020b0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80020b2:	4a06      	ldr	r2, [pc, #24]	; (80020cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80020b4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80020b6:	4906      	ldr	r1, [pc, #24]	; (80020d0 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80020bc:	6808      	ldr	r0, [r1, #0]
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	f003 031f 	and.w	r3, r3, #31
}
 80020c4:	40d8      	lsrs	r0, r3
 80020c6:	4770      	bx	lr
 80020c8:	40021000 	.word	0x40021000
 80020cc:	080036a0 	.word	0x080036a0
 80020d0:	20000200 	.word	0x20000200

080020d4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80020d6:	4a06      	ldr	r2, [pc, #24]	; (80020f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80020d8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80020da:	4906      	ldr	r1, [pc, #24]	; (80020f4 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020dc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80020e0:	6808      	ldr	r0, [r1, #0]
 80020e2:	5cd3      	ldrb	r3, [r2, r3]
 80020e4:	f003 031f 	and.w	r3, r3, #31
}
 80020e8:	40d8      	lsrs	r0, r3
 80020ea:	4770      	bx	lr
 80020ec:	40021000 	.word	0x40021000
 80020f0:	080036a0 	.word	0x080036a0
 80020f4:	20000200 	.word	0x20000200

080020f8 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020f8:	4a46      	ldr	r2, [pc, #280]	; (8002214 <RCCEx_PLLSAI1_Config+0x11c>)
{
 80020fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020fc:	68d3      	ldr	r3, [r2, #12]
 80020fe:	079b      	lsls	r3, r3, #30
 8002100:	d007      	beq.n	8002112 <RCCEx_PLLSAI1_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002102:	68d3      	ldr	r3, [r2, #12]
 8002104:	6804      	ldr	r4, [r0, #0]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	42a3      	cmp	r3, r4
 800210c:	d00c      	beq.n	8002128 <RCCEx_PLLSAI1_Config+0x30>
 800210e:	2001      	movs	r0, #1
 8002110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002112:	6803      	ldr	r3, [r0, #0]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d011      	beq.n	800213c <RCCEx_PLLSAI1_Config+0x44>
 8002118:	2b03      	cmp	r3, #3
 800211a:	d055      	beq.n	80021c8 <RCCEx_PLLSAI1_Config+0xd0>
 800211c:	2b01      	cmp	r3, #1
 800211e:	d1f6      	bne.n	800210e <RCCEx_PLLSAI1_Config+0x16>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	0797      	lsls	r7, r2, #30
 8002124:	d5f3      	bpl.n	800210e <RCCEx_PLLSAI1_Config+0x16>
 8002126:	e00c      	b.n	8002142 <RCCEx_PLLSAI1_Config+0x4a>
       ||
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <RCCEx_PLLSAI1_Config+0x16>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800212c:	68d3      	ldr	r3, [r2, #12]
       ||
 800212e:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002130:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002134:	3301      	adds	r3, #1
       ||
 8002136:	4293      	cmp	r3, r2
 8002138:	d1e9      	bne.n	800210e <RCCEx_PLLSAI1_Config+0x16>
 800213a:	e00c      	b.n	8002156 <RCCEx_PLLSAI1_Config+0x5e>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	0556      	lsls	r6, r2, #21
 8002140:	d5e5      	bpl.n	800210e <RCCEx_PLLSAI1_Config+0x16>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002142:	4d34      	ldr	r5, [pc, #208]	; (8002214 <RCCEx_PLLSAI1_Config+0x11c>)
 8002144:	6844      	ldr	r4, [r0, #4]
 8002146:	68ea      	ldr	r2, [r5, #12]
 8002148:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800214c:	4313      	orrs	r3, r2
 800214e:	3c01      	subs	r4, #1
 8002150:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8002154:	60eb      	str	r3, [r5, #12]
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002156:	4c2f      	ldr	r4, [pc, #188]	; (8002214 <RCCEx_PLLSAI1_Config+0x11c>)
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800215e:	6023      	str	r3, [r4, #0]
 8002160:	460f      	mov	r7, r1
 8002162:	4606      	mov	r6, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002164:	f7fe fd52 	bl	8000c0c <HAL_GetTick>
 8002168:	4605      	mov	r5, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800216a:	e004      	b.n	8002176 <RCCEx_PLLSAI1_Config+0x7e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800216c:	f7fe fd4e 	bl	8000c0c <HAL_GetTick>
 8002170:	1b40      	subs	r0, r0, r5
 8002172:	2802      	cmp	r0, #2
 8002174:	d826      	bhi.n	80021c4 <RCCEx_PLLSAI1_Config+0xcc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	011a      	lsls	r2, r3, #4
 800217a:	d4f7      	bmi.n	800216c <RCCEx_PLLSAI1_Config+0x74>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800217c:	bb5f      	cbnz	r7, 80021d6 <RCCEx_PLLSAI1_Config+0xde>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800217e:	6922      	ldr	r2, [r4, #16]
 8002180:	68f3      	ldr	r3, [r6, #12]
 8002182:	68b1      	ldr	r1, [r6, #8]
 8002184:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8002188:	06db      	lsls	r3, r3, #27
 800218a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800218e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002192:	4313      	orrs	r3, r2
 8002194:	6123      	str	r3, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002196:	4c1f      	ldr	r4, [pc, #124]	; (8002214 <RCCEx_PLLSAI1_Config+0x11c>)
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800219e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7fe fd34 	bl	8000c0c <HAL_GetTick>
 80021a4:	4605      	mov	r5, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80021a6:	e004      	b.n	80021b2 <RCCEx_PLLSAI1_Config+0xba>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021a8:	f7fe fd30 	bl	8000c0c <HAL_GetTick>
 80021ac:	1b40      	subs	r0, r0, r5
 80021ae:	2802      	cmp	r0, #2
 80021b0:	d808      	bhi.n	80021c4 <RCCEx_PLLSAI1_Config+0xcc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	d5f7      	bpl.n	80021a8 <RCCEx_PLLSAI1_Config+0xb0>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80021b8:	69b2      	ldr	r2, [r6, #24]
 80021ba:	6923      	ldr	r3, [r4, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	6123      	str	r3, [r4, #16]
 80021c0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80021c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status = HAL_TIMEOUT;
 80021c4:	2003      	movs	r0, #3
 80021c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80021c8:	6814      	ldr	r4, [r2, #0]
 80021ca:	03a5      	lsls	r5, r4, #14
 80021cc:	d4b9      	bmi.n	8002142 <RCCEx_PLLSAI1_Config+0x4a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	0354      	lsls	r4, r2, #13
 80021d2:	d59c      	bpl.n	800210e <RCCEx_PLLSAI1_Config+0x16>
 80021d4:	e7b5      	b.n	8002142 <RCCEx_PLLSAI1_Config+0x4a>
      else if(Divider == DIVIDER_Q_UPDATE)
 80021d6:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021d8:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 80021da:	d00d      	beq.n	80021f8 <RCCEx_PLLSAI1_Config+0x100>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021dc:	6972      	ldr	r2, [r6, #20]
 80021de:	68b1      	ldr	r1, [r6, #8]
 80021e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80021e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021e8:	0852      	lsrs	r2, r2, #1
 80021ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80021ee:	3a01      	subs	r2, #1
 80021f0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80021f4:	6123      	str	r3, [r4, #16]
 80021f6:	e7ce      	b.n	8002196 <RCCEx_PLLSAI1_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021f8:	6932      	ldr	r2, [r6, #16]
 80021fa:	68b1      	ldr	r1, [r6, #8]
 80021fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002200:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002204:	0852      	lsrs	r2, r2, #1
 8002206:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800220a:	3a01      	subs	r2, #1
 800220c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002210:	6123      	str	r3, [r4, #16]
 8002212:	e7c0      	b.n	8002196 <RCCEx_PLLSAI1_Config+0x9e>
 8002214:	40021000 	.word	0x40021000

08002218 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800221c:	6803      	ldr	r3, [r0, #0]
 800221e:	f413 6700 	ands.w	r7, r3, #2048	; 0x800
{
 8002222:	b083      	sub	sp, #12
 8002224:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002226:	d00c      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x2a>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002228:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800222a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800222e:	f000 811b 	beq.w	8002468 <HAL_RCCEx_PeriphCLKConfig+0x250>
 8002232:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002236:	f000 8103 	beq.w	8002440 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800223a:	2900      	cmp	r1, #0
 800223c:	f000 811a 	beq.w	8002474 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      ret = HAL_ERROR;
 8002240:	2701      	movs	r7, #1
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002242:	039d      	lsls	r5, r3, #14
 8002244:	d557      	bpl.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0xde>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002246:	4b9f      	ldr	r3, [pc, #636]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002248:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800224a:	00d0      	lsls	r0, r2, #3
 800224c:	f140 80df 	bpl.w	800240e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    FlagStatus       pwrclkchanged = RESET;
 8002250:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002254:	4d9c      	ldr	r5, [pc, #624]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002256:	682b      	ldr	r3, [r5, #0]
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800225e:	f7fe fcd5 	bl	8000c0c <HAL_GetTick>
 8002262:	4606      	mov	r6, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002264:	e005      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002266:	f7fe fcd1 	bl	8000c0c <HAL_GetTick>
 800226a:	1b80      	subs	r0, r0, r6
 800226c:	2802      	cmp	r0, #2
 800226e:	f200 80da 	bhi.w	8002426 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002272:	682b      	ldr	r3, [r5, #0]
 8002274:	05d9      	lsls	r1, r3, #23
 8002276:	d5f6      	bpl.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    if(ret == HAL_OK)
 8002278:	bbc7      	cbnz	r7, 80022ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800227a:	4a92      	ldr	r2, [pc, #584]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800227c:	6d21      	ldr	r1, [r4, #80]	; 0x50
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800227e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002282:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002286:	d029      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8002288:	428b      	cmp	r3, r1
 800228a:	f000 8115 	beq.w	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800228e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002292:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8002296:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800229a:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800229e:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022a6:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80022aa:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80022ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022b2:	07da      	lsls	r2, r3, #31
 80022b4:	d512      	bpl.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
        tickstart = HAL_GetTick();
 80022b6:	f7fe fca9 	bl	8000c0c <HAL_GetTick>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ba:	4d82      	ldr	r5, [pc, #520]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
        tickstart = HAL_GetTick();
 80022bc:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f241 3688 	movw	r6, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c2:	e006      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c4:	f7fe fca2 	bl	8000c0c <HAL_GetTick>
 80022c8:	eba0 0009 	sub.w	r0, r0, r9
 80022cc:	42b0      	cmp	r0, r6
 80022ce:	f200 80aa 	bhi.w	8002426 <HAL_RCCEx_PeriphCLKConfig+0x20e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80022d6:	079b      	lsls	r3, r3, #30
 80022d8:	d5f4      	bpl.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80022da:	6d21      	ldr	r1, [r4, #80]	; 0x50
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022dc:	4a79      	ldr	r2, [pc, #484]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80022de:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80022e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e6:	430b      	orrs	r3, r1
 80022e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if(pwrclkchanged == SET)
 80022ec:	f1b8 0f00 	cmp.w	r8, #0
 80022f0:	f040 809e 	bne.w	8002430 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80022f4:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022f6:	07de      	lsls	r6, r3, #31
 80022f8:	d508      	bpl.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022fa:	4972      	ldr	r1, [pc, #456]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80022fc:	6a20      	ldr	r0, [r4, #32]
 80022fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002302:	f022 0203 	bic.w	r2, r2, #3
 8002306:	4302      	orrs	r2, r0
 8002308:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800230c:	079d      	lsls	r5, r3, #30
 800230e:	d508      	bpl.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002310:	496c      	ldr	r1, [pc, #432]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002312:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002314:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002318:	f022 020c 	bic.w	r2, r2, #12
 800231c:	4302      	orrs	r2, r0
 800231e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002322:	0698      	lsls	r0, r3, #26
 8002324:	d508      	bpl.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x120>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002326:	4967      	ldr	r1, [pc, #412]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002328:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800232a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800232e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002332:	4302      	orrs	r2, r0
 8002334:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002338:	0599      	lsls	r1, r3, #22
 800233a:	d508      	bpl.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x136>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800233c:	4961      	ldr	r1, [pc, #388]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800233e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002340:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002344:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002348:	4302      	orrs	r2, r0
 800234a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800234e:	055a      	lsls	r2, r3, #21
 8002350:	d508      	bpl.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002352:	495c      	ldr	r1, [pc, #368]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002354:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002356:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800235a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800235e:	4302      	orrs	r2, r0
 8002360:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002364:	065e      	lsls	r6, r3, #25
 8002366:	d508      	bpl.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x162>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002368:	4956      	ldr	r1, [pc, #344]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800236a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800236c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002370:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002374:	4302      	orrs	r2, r0
 8002376:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800237a:	05dd      	lsls	r5, r3, #23
 800237c:	d508      	bpl.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x178>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800237e:	4951      	ldr	r1, [pc, #324]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002380:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002382:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002386:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800238a:	4302      	orrs	r2, r0
 800238c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002390:	0498      	lsls	r0, r3, #18
 8002392:	d50e      	bpl.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002394:	484b      	ldr	r0, [pc, #300]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002396:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002398:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800239c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80023a0:	430a      	orrs	r2, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023a2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023a6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023aa:	d058      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x246>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023ac:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80023b0:	d070      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023b2:	0359      	lsls	r1, r3, #13
 80023b4:	d50e      	bpl.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023b6:	4843      	ldr	r0, [pc, #268]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80023b8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80023ba:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80023be:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80023c2:	430a      	orrs	r2, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023c4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023c8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023cc:	d042      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023ce:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80023d2:	d067      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023d4:	045a      	lsls	r2, r3, #17
 80023d6:	d50b      	bpl.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023d8:	483a      	ldr	r0, [pc, #232]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80023da:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80023dc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80023e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023e4:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023e6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023ea:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023ee:	d049      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023f0:	041b      	lsls	r3, r3, #16
 80023f2:	d508      	bpl.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023f4:	4a33      	ldr	r2, [pc, #204]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80023f6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80023f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002400:	430b      	orrs	r3, r1
 8002402:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002406:	4638      	mov	r0, r7
 8002408:	b003      	add	sp, #12
 800240a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002410:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002414:	659a      	str	r2, [r3, #88]	; 0x58
 8002416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002420:	f04f 0801 	mov.w	r8, #1
 8002424:	e716      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = HAL_TIMEOUT;
 8002426:	2703      	movs	r7, #3
    if(pwrclkchanged == SET)
 8002428:	f1b8 0f00 	cmp.w	r8, #0
 800242c:	f43f af62 	beq.w	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002430:	4a24      	ldr	r2, [pc, #144]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002432:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002438:	6593      	str	r3, [r2, #88]	; 0x58
 800243a:	e75b      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800243c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800243e:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002440:	4820      	ldr	r0, [pc, #128]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002442:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002446:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800244a:	4311      	orrs	r1, r2
 800244c:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 8002450:	2700      	movs	r7, #0
 8002452:	e6f6      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002454:	68c2      	ldr	r2, [r0, #12]
 8002456:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800245a:	60c2      	str	r2, [r0, #12]
 800245c:	e7ba      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800245e:	68c2      	ldr	r2, [r0, #12]
 8002460:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002464:	60c2      	str	r2, [r0, #12]
 8002466:	e7a4      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002468:	4816      	ldr	r0, [pc, #88]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800246a:	68c2      	ldr	r2, [r0, #12]
 800246c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002470:	60c2      	str	r2, [r0, #12]
      break;
 8002472:	e7e5      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002474:	3004      	adds	r0, #4
 8002476:	f7ff fe3f 	bl	80020f8 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800247a:	4607      	mov	r7, r0
 800247c:	2800      	cmp	r0, #0
 800247e:	d0dd      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x224>
 8002480:	6823      	ldr	r3, [r4, #0]
 8002482:	e6de      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002484:	2102      	movs	r1, #2
 8002486:	1d20      	adds	r0, r4, #4
 8002488:	f7ff fe36 	bl	80020f8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800248c:	b190      	cbz	r0, 80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800248e:	4607      	mov	r7, r0
 8002490:	6823      	ldr	r3, [r4, #0]
 8002492:	e7ad      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002494:	2101      	movs	r1, #1
 8002496:	1d20      	adds	r0, r4, #4
 8002498:	f7ff fe2e 	bl	80020f8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800249c:	b170      	cbz	r0, 80024bc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 800249e:	4607      	mov	r7, r0
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	e786      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024a4:	2101      	movs	r1, #1
 80024a6:	1d20      	adds	r0, r4, #4
 80024a8:	f7ff fe26 	bl	80020f8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80024ac:	b140      	cbz	r0, 80024c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80024ae:	4607      	mov	r7, r0
 80024b0:	6823      	ldr	r3, [r4, #0]
 80024b2:	e78f      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	e79b      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80024b8:	460b      	mov	r3, r1
 80024ba:	e6fa      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	e778      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	e787      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40007000 	.word	0x40007000

080024cc <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80024cc:	4a02      	ldr	r2, [pc, #8]	; (80024d8 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	4770      	bx	lr
 80024d8:	40021000 	.word	0x40021000

080024dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024e0:	460e      	mov	r6, r1
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024e2:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80024e4:	2920      	cmp	r1, #32
{
 80024e6:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80024e8:	d003      	beq.n	80024f2 <HAL_UART_Transmit+0x16>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80024ea:	2002      	movs	r0, #2
  }
}
 80024ec:	b003      	add	sp, #12
 80024ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((pData == NULL) || (Size == 0U))
 80024f2:	2e00      	cmp	r6, #0
 80024f4:	d044      	beq.n	8002580 <HAL_UART_Transmit+0xa4>
 80024f6:	2a00      	cmp	r2, #0
 80024f8:	d042      	beq.n	8002580 <HAL_UART_Transmit+0xa4>
 80024fa:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 80024fc:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002500:	2b01      	cmp	r3, #1
 8002502:	4604      	mov	r4, r0
 8002504:	d0f1      	beq.n	80024ea <HAL_UART_Transmit+0xe>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002506:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8002508:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250a:	f04f 0800 	mov.w	r8, #0
 800250e:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 8002512:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002516:	6743      	str	r3, [r0, #116]	; 0x74
 8002518:	9201      	str	r2, [sp, #4]
    tickstart = HAL_GetTick();
 800251a:	f7fe fb77 	bl	8000c0c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800251e:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8002520:	9a01      	ldr	r2, [sp, #4]
 8002522:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800252a:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 800252c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002530:	f000 8087 	beq.w	8002642 <HAL_UART_Transmit+0x166>
    while (huart->TxXferCount > 0U)
 8002534:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002538:	6820      	ldr	r0, [r4, #0]
    __HAL_UNLOCK(huart);
 800253a:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800253c:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800253e:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8002542:	b1a3      	cbz	r3, 800256e <HAL_UART_Transmit+0x92>
 8002544:	1c69      	adds	r1, r5, #1
 8002546:	d11d      	bne.n	8002584 <HAL_UART_Transmit+0xa8>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002548:	69c2      	ldr	r2, [r0, #28]
 800254a:	0612      	lsls	r2, r2, #24
 800254c:	d5fc      	bpl.n	8002548 <HAL_UART_Transmit+0x6c>
      if (pdata8bits == NULL)
 800254e:	2e00      	cmp	r6, #0
 8002550:	d03d      	beq.n	80025ce <HAL_UART_Transmit+0xf2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002552:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002556:	8503      	strh	r3, [r0, #40]	; 0x28
      huart->TxXferCount--;
 8002558:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800255c:	3b01      	subs	r3, #1
 800255e:	b29b      	uxth	r3, r3
 8002560:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002564:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1ea      	bne.n	8002544 <HAL_UART_Transmit+0x68>
 800256e:	1c6a      	adds	r2, r5, #1
 8002570:	d132      	bne.n	80025d8 <HAL_UART_Transmit+0xfc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002572:	69c3      	ldr	r3, [r0, #28]
 8002574:	065b      	lsls	r3, r3, #25
 8002576:	d5fc      	bpl.n	8002572 <HAL_UART_Transmit+0x96>
    huart->gState = HAL_UART_STATE_READY;
 8002578:	2320      	movs	r3, #32
 800257a:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 800257c:	2000      	movs	r0, #0
 800257e:	e7b5      	b.n	80024ec <HAL_UART_Transmit+0x10>
      return  HAL_ERROR;
 8002580:	2001      	movs	r0, #1
 8002582:	e7b3      	b.n	80024ec <HAL_UART_Transmit+0x10>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002584:	69c3      	ldr	r3, [r0, #28]
 8002586:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 800258a:	d1e0      	bne.n	800254e <HAL_UART_Transmit+0x72>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258c:	f7fe fb3e 	bl	8000c0c <HAL_GetTick>
 8002590:	1bc0      	subs	r0, r0, r7
 8002592:	4285      	cmp	r5, r0
 8002594:	d344      	bcc.n	8002620 <HAL_UART_Transmit+0x144>
 8002596:	2d00      	cmp	r5, #0
 8002598:	d042      	beq.n	8002620 <HAL_UART_Transmit+0x144>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800259a:	6820      	ldr	r0, [r4, #0]
 800259c:	6803      	ldr	r3, [r0, #0]
 800259e:	075a      	lsls	r2, r3, #29
 80025a0:	d5d0      	bpl.n	8002544 <HAL_UART_Transmit+0x68>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025a2:	69c3      	ldr	r3, [r0, #28]
 80025a4:	051b      	lsls	r3, r3, #20
 80025a6:	d5cd      	bpl.n	8002544 <HAL_UART_Transmit+0x68>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025ac:	6203      	str	r3, [r0, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025ae:	6803      	ldr	r3, [r0, #0]
 80025b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80025b4:	6003      	str	r3, [r0, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b6:	6882      	ldr	r2, [r0, #8]

          huart->gState = HAL_UART_STATE_READY;
 80025b8:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ba:	f022 0201 	bic.w	r2, r2, #1
 80025be:	6082      	str	r2, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80025c0:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_TIMEOUT;
 80025c2:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 80025c4:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025c6:	f884 9070 	strb.w	r9, [r4, #112]	; 0x70
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80025ca:	67e3      	str	r3, [r4, #124]	; 0x7c
 80025cc:	e78e      	b.n	80024ec <HAL_UART_Transmit+0x10>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ce:	f838 3b02 	ldrh.w	r3, [r8], #2
 80025d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d6:	e7be      	b.n	8002556 <HAL_UART_Transmit+0x7a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025d8:	69c6      	ldr	r6, [r0, #28]
 80025da:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 80025de:	d1cb      	bne.n	8002578 <HAL_UART_Transmit+0x9c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e0:	f7fe fb14 	bl	8000c0c <HAL_GetTick>
 80025e4:	1bc0      	subs	r0, r0, r7
 80025e6:	4285      	cmp	r5, r0
 80025e8:	d31a      	bcc.n	8002620 <HAL_UART_Transmit+0x144>
 80025ea:	b1cd      	cbz	r5, 8002620 <HAL_UART_Transmit+0x144>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80025ec:	6820      	ldr	r0, [r4, #0]
 80025ee:	6803      	ldr	r3, [r0, #0]
 80025f0:	075b      	lsls	r3, r3, #29
 80025f2:	d5bc      	bpl.n	800256e <HAL_UART_Transmit+0x92>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025f4:	69c3      	ldr	r3, [r0, #28]
 80025f6:	0519      	lsls	r1, r3, #20
 80025f8:	d5b9      	bpl.n	800256e <HAL_UART_Transmit+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025fe:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002600:	6803      	ldr	r3, [r0, #0]
 8002602:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002606:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002608:	6882      	ldr	r2, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800260a:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800260c:	f022 0201 	bic.w	r2, r2, #1
 8002610:	6082      	str	r2, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002612:	6763      	str	r3, [r4, #116]	; 0x74
      return HAL_TIMEOUT;
 8002614:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8002616:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8002618:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800261c:	67e3      	str	r3, [r4, #124]	; 0x7c
 800261e:	e765      	b.n	80024ec <HAL_UART_Transmit+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002620:	6823      	ldr	r3, [r4, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002628:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800262a:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800262c:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800262e:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8002632:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002634:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 8002636:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8002638:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 800263a:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800263e:	67a1      	str	r1, [r4, #120]	; 0x78
 8002640:	e754      	b.n	80024ec <HAL_UART_Transmit+0x10>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002642:	6923      	ldr	r3, [r4, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f47f af75 	bne.w	8002534 <HAL_UART_Transmit+0x58>
 800264a:	46b0      	mov	r8, r6
      pdata8bits  = NULL;
 800264c:	461e      	mov	r6, r3
 800264e:	e771      	b.n	8002534 <HAL_UART_Transmit+0x58>

08002650 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002650:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002652:	2b20      	cmp	r3, #32
 8002654:	d001      	beq.n	800265a <HAL_UART_Receive_IT+0xa>
    return HAL_BUSY;
 8002656:	2002      	movs	r0, #2
 8002658:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 800265a:	2900      	cmp	r1, #0
 800265c:	d033      	beq.n	80026c6 <HAL_UART_Receive_IT+0x76>
 800265e:	2a00      	cmp	r2, #0
 8002660:	d031      	beq.n	80026c6 <HAL_UART_Receive_IT+0x76>
    __HAL_LOCK(huart);
 8002662:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002666:	2b01      	cmp	r3, #1
 8002668:	d0f5      	beq.n	8002656 <HAL_UART_Receive_IT+0x6>
    UART_MASK_COMPUTATION(huart);
 800266a:	6883      	ldr	r3, [r0, #8]
{
 800266c:	b410      	push	{r4}
    UART_MASK_COMPUTATION(huart);
 800266e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->pRxBuffPtr  = pData;
 8002672:	6541      	str	r1, [r0, #84]	; 0x54
    __HAL_LOCK(huart);
 8002674:	f04f 0401 	mov.w	r4, #1
    huart->RxISR       = NULL;
 8002678:	f04f 0100 	mov.w	r1, #0
    huart->RxXferSize  = Size;
 800267c:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8002680:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    __HAL_LOCK(huart);
 8002684:	f880 4070 	strb.w	r4, [r0, #112]	; 0x70
    huart->RxISR       = NULL;
 8002688:	6601      	str	r1, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 800268a:	d024      	beq.n	80026d6 <HAL_UART_Receive_IT+0x86>
 800268c:	b9eb      	cbnz	r3, 80026ca <HAL_UART_Receive_IT+0x7a>
 800268e:	6903      	ldr	r3, [r0, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d130      	bne.n	80026f6 <HAL_UART_Receive_IT+0xa6>
 8002694:	23ff      	movs	r3, #255	; 0xff
 8002696:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800269a:	2322      	movs	r3, #34	; 0x22
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800269c:	6802      	ldr	r2, [r0, #0]
      huart->RxISR = UART_RxISR_8BIT;
 800269e:	4c22      	ldr	r4, [pc, #136]	; (8002728 <HAL_UART_Receive_IT+0xd8>)
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a0:	2100      	movs	r1, #0
 80026a2:	67c1      	str	r1, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026a4:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a6:	6893      	ldr	r3, [r2, #8]
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80026ae:	6811      	ldr	r1, [r2, #0]
 80026b0:	6604      	str	r4, [r0, #96]	; 0x60
    __HAL_UNLOCK(huart);
 80026b2:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80026b4:	f441 7190 	orr.w	r1, r1, #288	; 0x120
    __HAL_UNLOCK(huart);
 80026b8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
}
 80026bc:	f85d 4b04 	ldr.w	r4, [sp], #4
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80026c0:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 80026c2:	4618      	mov	r0, r3
}
 80026c4:	4770      	bx	lr
      return HAL_ERROR;
 80026c6:	2001      	movs	r0, #1
 80026c8:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80026ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ce:	d023      	beq.n	8002718 <HAL_UART_Receive_IT+0xc8>
 80026d0:	f8a0 105c 	strh.w	r1, [r0, #92]	; 0x5c
 80026d4:	e7e1      	b.n	800269a <HAL_UART_Receive_IT+0x4a>
 80026d6:	6903      	ldr	r3, [r0, #16]
 80026d8:	b98b      	cbnz	r3, 80026fe <HAL_UART_Receive_IT+0xae>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026da:	2122      	movs	r1, #34	; 0x22
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026dc:	6802      	ldr	r2, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026de:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026e0:	6781      	str	r1, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026e2:	6893      	ldr	r3, [r2, #8]
      huart->RxISR = UART_RxISR_16BIT;
 80026e4:	4c11      	ldr	r4, [pc, #68]	; (800272c <HAL_UART_Receive_IT+0xdc>)
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026ee:	f8a0 105c 	strh.w	r1, [r0, #92]	; 0x5c
 80026f2:	6093      	str	r3, [r2, #8]
 80026f4:	e7db      	b.n	80026ae <HAL_UART_Receive_IT+0x5e>
    UART_MASK_COMPUTATION(huart);
 80026f6:	237f      	movs	r3, #127	; 0x7f
 80026f8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80026fc:	e7cd      	b.n	800269a <HAL_UART_Receive_IT+0x4a>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026fe:	2322      	movs	r3, #34	; 0x22
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002700:	6802      	ldr	r2, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002702:	67c1      	str	r1, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002704:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002706:	6893      	ldr	r3, [r2, #8]
      huart->RxISR = UART_RxISR_8BIT;
 8002708:	4c07      	ldr	r4, [pc, #28]	; (8002728 <HAL_UART_Receive_IT+0xd8>)
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	21ff      	movs	r1, #255	; 0xff
 8002710:	f8a0 105c 	strh.w	r1, [r0, #92]	; 0x5c
 8002714:	6093      	str	r3, [r2, #8]
 8002716:	e7ca      	b.n	80026ae <HAL_UART_Receive_IT+0x5e>
    UART_MASK_COMPUTATION(huart);
 8002718:	6903      	ldr	r3, [r0, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0eb      	beq.n	80026f6 <HAL_UART_Receive_IT+0xa6>
 800271e:	233f      	movs	r3, #63	; 0x3f
 8002720:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002724:	e7b9      	b.n	800269a <HAL_UART_Receive_IT+0x4a>
 8002726:	bf00      	nop
 8002728:	08002735 	.word	0x08002735
 800272c:	08002791 	.word	0x08002791

08002730 <HAL_UART_TxCpltCallback>:
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop

08002734 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002734:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8002736:	2a22      	cmp	r2, #34	; 0x22
{
 8002738:	b538      	push	{r3, r4, r5, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800273a:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800273c:	d005      	beq.n	800274a <UART_RxISR_8BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800273e:	8b13      	ldrh	r3, [r2, #24]
 8002740:	b29b      	uxth	r3, r3
 8002742:	f043 0308 	orr.w	r3, r3, #8
 8002746:	8313      	strh	r3, [r2, #24]
 8002748:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800274a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800274c:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8002750:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8002752:	4022      	ands	r2, r4
 8002754:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8002756:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 800275a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800275c:	3a01      	subs	r2, #1
 800275e:	b292      	uxth	r2, r2
 8002760:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8002764:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8002768:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 800276a:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 800276c:	6541      	str	r1, [r0, #84]	; 0x54
    if (huart->RxXferCount == 0U)
 800276e:	2a00      	cmp	r2, #0
 8002770:	d1ea      	bne.n	8002748 <UART_RxISR_8BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002772:	6801      	ldr	r1, [r0, #0]
 8002774:	680c      	ldr	r4, [r1, #0]
 8002776:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800277a:	600c      	str	r4, [r1, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800277c:	688c      	ldr	r4, [r1, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800277e:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002780:	f024 0401 	bic.w	r4, r4, #1
 8002784:	608c      	str	r4, [r1, #8]
      huart->RxISR = NULL;
 8002786:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 8002788:	6785      	str	r5, [r0, #120]	; 0x78
      HAL_UART_RxCpltCallback(huart);
 800278a:	f7fd ff01 	bl	8000590 <HAL_UART_RxCpltCallback>
 800278e:	bd38      	pop	{r3, r4, r5, pc}

08002790 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002790:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8002792:	2a22      	cmp	r2, #34	; 0x22
{
 8002794:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002796:	d006      	beq.n	80027a6 <UART_RxISR_16BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002798:	6802      	ldr	r2, [r0, #0]
 800279a:	8b13      	ldrh	r3, [r2, #24]
 800279c:	b29b      	uxth	r3, r3
 800279e:	f043 0308 	orr.w	r3, r3, #8
 80027a2:	8313      	strh	r3, [r2, #24]
 80027a4:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80027a6:	6804      	ldr	r4, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 80027a8:	f8b0 505c 	ldrh.w	r5, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80027ac:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80027ae:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80027b0:	402a      	ands	r2, r5
 80027b2:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 80027b6:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 80027ba:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80027bc:	3a01      	subs	r2, #1
 80027be:	b292      	uxth	r2, r2
 80027c0:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 80027c4:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80027c8:	b292      	uxth	r2, r2
 80027ca:	2a00      	cmp	r2, #0
 80027cc:	d1ea      	bne.n	80027a4 <UART_RxISR_16BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027ce:	6821      	ldr	r1, [r4, #0]
 80027d0:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80027d4:	6021      	str	r1, [r4, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d6:	68a1      	ldr	r1, [r4, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80027d8:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027da:	f021 0101 	bic.w	r1, r1, #1
 80027de:	60a1      	str	r1, [r4, #8]
      huart->RxISR = NULL;
 80027e0:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 80027e2:	6785      	str	r5, [r0, #120]	; 0x78
      HAL_UART_RxCpltCallback(huart);
 80027e4:	f7fd fed4 	bl	8000590 <HAL_UART_RxCpltCallback>
 80027e8:	bd38      	pop	{r3, r4, r5, pc}
 80027ea:	bf00      	nop

080027ec <HAL_UART_ErrorCallback>:
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop

080027f0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027f0:	6803      	ldr	r3, [r0, #0]
 80027f2:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027f4:	6819      	ldr	r1, [r3, #0]
{
 80027f6:	b570      	push	{r4, r5, r6, lr}
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027f8:	f640 060f 	movw	r6, #2063	; 0x80f
  if (errorflags == 0U)
 80027fc:	4232      	tst	r2, r6
{
 80027fe:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002800:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8002802:	d058      	beq.n	80028b6 <HAL_UART_IRQHandler+0xc6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002804:	f015 0001 	ands.w	r0, r5, #1
 8002808:	d05f      	beq.n	80028ca <HAL_UART_IRQHandler+0xda>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800280a:	07d5      	lsls	r5, r2, #31
 800280c:	d507      	bpl.n	800281e <HAL_UART_IRQHandler+0x2e>
 800280e:	05ce      	lsls	r6, r1, #23
 8002810:	d505      	bpl.n	800281e <HAL_UART_IRQHandler+0x2e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002812:	2501      	movs	r5, #1
 8002814:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002816:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8002818:	f045 0501 	orr.w	r5, r5, #1
 800281c:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800281e:	0795      	lsls	r5, r2, #30
 8002820:	d57b      	bpl.n	800291a <HAL_UART_IRQHandler+0x12a>
 8002822:	b138      	cbz	r0, 8002834 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002824:	2502      	movs	r5, #2
 8002826:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002828:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800282a:	0756      	lsls	r6, r2, #29
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800282c:	f045 0504 	orr.w	r5, r5, #4
 8002830:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002832:	d476      	bmi.n	8002922 <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002834:	0716      	lsls	r6, r2, #28
 8002836:	d503      	bpl.n	8002840 <HAL_UART_IRQHandler+0x50>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002838:	068d      	lsls	r5, r1, #26
 800283a:	d479      	bmi.n	8002930 <HAL_UART_IRQHandler+0x140>
 800283c:	2800      	cmp	r0, #0
 800283e:	d177      	bne.n	8002930 <HAL_UART_IRQHandler+0x140>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002840:	0510      	lsls	r0, r2, #20
 8002842:	d508      	bpl.n	8002856 <HAL_UART_IRQHandler+0x66>
 8002844:	014e      	lsls	r6, r1, #5
 8002846:	d506      	bpl.n	8002856 <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002848:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800284c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800284e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002850:	f040 0020 	orr.w	r0, r0, #32
 8002854:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002856:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002858:	2800      	cmp	r0, #0
 800285a:	d02b      	beq.n	80028b4 <HAL_UART_IRQHandler+0xc4>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800285c:	0695      	lsls	r5, r2, #26
 800285e:	d506      	bpl.n	800286e <HAL_UART_IRQHandler+0x7e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002860:	0688      	lsls	r0, r1, #26
 8002862:	d504      	bpl.n	800286e <HAL_UART_IRQHandler+0x7e>
        if (huart->RxISR != NULL)
 8002864:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002866:	b112      	cbz	r2, 800286e <HAL_UART_IRQHandler+0x7e>
          huart->RxISR(huart);
 8002868:	4620      	mov	r0, r4
 800286a:	4790      	blx	r2
 800286c:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800286e:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002870:	6899      	ldr	r1, [r3, #8]
 8002872:	0649      	lsls	r1, r1, #25
 8002874:	d402      	bmi.n	800287c <HAL_UART_IRQHandler+0x8c>
 8002876:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 800287a:	d069      	beq.n	8002950 <HAL_UART_IRQHandler+0x160>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002882:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002884:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8002886:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800288e:	67a1      	str	r1, [r4, #120]	; 0x78
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	689a      	ldr	r2, [r3, #8]
  huart->RxISR = NULL;
 8002892:	2100      	movs	r1, #0
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002894:	0652      	lsls	r2, r2, #25
  huart->RxISR = NULL;
 8002896:	6621      	str	r1, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002898:	d551      	bpl.n	800293e <HAL_UART_IRQHandler+0x14e>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800289a:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800289c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800289e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028a2:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d04a      	beq.n	800293e <HAL_UART_IRQHandler+0x14e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028a8:	4b2c      	ldr	r3, [pc, #176]	; (800295c <HAL_UART_IRQHandler+0x16c>)
 80028aa:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028ac:	f7fe fe06 	bl	80014bc <HAL_DMA_Abort_IT>
 80028b0:	2800      	cmp	r0, #0
 80028b2:	d148      	bne.n	8002946 <HAL_UART_IRQHandler+0x156>
 80028b4:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80028b6:	0696      	lsls	r6, r2, #26
 80028b8:	d50a      	bpl.n	80028d0 <HAL_UART_IRQHandler+0xe0>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028ba:	068e      	lsls	r6, r1, #26
 80028bc:	d508      	bpl.n	80028d0 <HAL_UART_IRQHandler+0xe0>
      if (huart->RxISR != NULL)
 80028be:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f7      	beq.n	80028b4 <HAL_UART_IRQHandler+0xc4>
}
 80028c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80028c8:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80028ca:	4e25      	ldr	r6, [pc, #148]	; (8002960 <HAL_UART_IRQHandler+0x170>)
 80028cc:	4231      	tst	r1, r6
 80028ce:	d19c      	bne.n	800280a <HAL_UART_IRQHandler+0x1a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80028d0:	02d6      	lsls	r6, r2, #11
 80028d2:	d408      	bmi.n	80028e6 <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80028d4:	0616      	lsls	r6, r2, #24
 80028d6:	d510      	bpl.n	80028fa <HAL_UART_IRQHandler+0x10a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80028d8:	060d      	lsls	r5, r1, #24
 80028da:	d50e      	bpl.n	80028fa <HAL_UART_IRQHandler+0x10a>
    if (huart->TxISR != NULL)
 80028dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0e8      	beq.n	80028b4 <HAL_UART_IRQHandler+0xc4>
      huart->TxISR(huart);
 80028e2:	4620      	mov	r0, r4
 80028e4:	e7ee      	b.n	80028c4 <HAL_UART_IRQHandler+0xd4>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80028e6:	0268      	lsls	r0, r5, #9
 80028e8:	d5f4      	bpl.n	80028d4 <HAL_UART_IRQHandler+0xe4>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80028ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80028ee:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80028f0:	621a      	str	r2, [r3, #32]
}
 80028f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80028f6:	f000 ba27 	b.w	8002d48 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80028fa:	0650      	lsls	r0, r2, #25
 80028fc:	d5da      	bpl.n	80028b4 <HAL_UART_IRQHandler+0xc4>
 80028fe:	064a      	lsls	r2, r1, #25
 8002900:	d5d8      	bpl.n	80028b4 <HAL_UART_IRQHandler+0xc4>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002902:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002904:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  huart->TxISR = NULL;
 800290a:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800290c:	601a      	str	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 800290e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8002910:	6765      	str	r5, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8002912:	6661      	str	r1, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8002914:	f7ff ff0c 	bl	8002730 <HAL_UART_TxCpltCallback>
 8002918:	e7cc      	b.n	80028b4 <HAL_UART_IRQHandler+0xc4>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800291a:	0755      	lsls	r5, r2, #29
 800291c:	d58a      	bpl.n	8002834 <HAL_UART_IRQHandler+0x44>
 800291e:	2800      	cmp	r0, #0
 8002920:	d088      	beq.n	8002834 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002922:	2504      	movs	r5, #4
 8002924:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002926:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8002928:	f045 0502 	orr.w	r5, r5, #2
 800292c:	67e5      	str	r5, [r4, #124]	; 0x7c
 800292e:	e781      	b.n	8002834 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002930:	2008      	movs	r0, #8
 8002932:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002934:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002936:	f040 0008 	orr.w	r0, r0, #8
 800293a:	67e0      	str	r0, [r4, #124]	; 0x7c
 800293c:	e780      	b.n	8002840 <HAL_UART_IRQHandler+0x50>
            HAL_UART_ErrorCallback(huart);
 800293e:	4620      	mov	r0, r4
 8002940:	f7ff ff54 	bl	80027ec <HAL_UART_ErrorCallback>
 8002944:	bd70      	pop	{r4, r5, r6, pc}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002946:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
 8002948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800294c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800294e:	4718      	bx	r3
        HAL_UART_ErrorCallback(huart);
 8002950:	4620      	mov	r0, r4
 8002952:	f7ff ff4b 	bl	80027ec <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002956:	67e5      	str	r5, [r4, #124]	; 0x7c
 8002958:	bd70      	pop	{r4, r5, r6, pc}
 800295a:	bf00      	nop
 800295c:	08002965 	.word	0x08002965
 8002960:	04000120 	.word	0x04000120

08002964 <UART_DMAAbortOnError>:
{
 8002964:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002966:	6a83      	ldr	r3, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002968:	2200      	movs	r2, #0
 800296a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  HAL_UART_ErrorCallback(huart);
 800296e:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8002970:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002974:	f7ff ff3a 	bl	80027ec <HAL_UART_ErrorCallback>
 8002978:	bd08      	pop	{r3, pc}
 800297a:	bf00      	nop

0800297c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800297c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800297e:	07da      	lsls	r2, r3, #31
{
 8002980:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002982:	d506      	bpl.n	8002992 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002984:	6801      	ldr	r1, [r0, #0]
 8002986:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002988:	684a      	ldr	r2, [r1, #4]
 800298a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800298e:	4322      	orrs	r2, r4
 8002990:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002992:	079c      	lsls	r4, r3, #30
 8002994:	d506      	bpl.n	80029a4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002996:	6801      	ldr	r1, [r0, #0]
 8002998:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800299a:	684a      	ldr	r2, [r1, #4]
 800299c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029a0:	4322      	orrs	r2, r4
 80029a2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029a4:	0759      	lsls	r1, r3, #29
 80029a6:	d506      	bpl.n	80029b6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029a8:	6801      	ldr	r1, [r0, #0]
 80029aa:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80029ac:	684a      	ldr	r2, [r1, #4]
 80029ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029b2:	4322      	orrs	r2, r4
 80029b4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029b6:	071a      	lsls	r2, r3, #28
 80029b8:	d506      	bpl.n	80029c8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029ba:	6801      	ldr	r1, [r0, #0]
 80029bc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80029be:	684a      	ldr	r2, [r1, #4]
 80029c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029c4:	4322      	orrs	r2, r4
 80029c6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029c8:	06dc      	lsls	r4, r3, #27
 80029ca:	d506      	bpl.n	80029da <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029cc:	6801      	ldr	r1, [r0, #0]
 80029ce:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80029d0:	688a      	ldr	r2, [r1, #8]
 80029d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029d6:	4322      	orrs	r2, r4
 80029d8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029da:	0699      	lsls	r1, r3, #26
 80029dc:	d506      	bpl.n	80029ec <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029de:	6801      	ldr	r1, [r0, #0]
 80029e0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80029e2:	688a      	ldr	r2, [r1, #8]
 80029e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029e8:	4322      	orrs	r2, r4
 80029ea:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029ec:	065a      	lsls	r2, r3, #25
 80029ee:	d509      	bpl.n	8002a04 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029f0:	6801      	ldr	r1, [r0, #0]
 80029f2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80029f4:	684a      	ldr	r2, [r1, #4]
 80029f6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80029fa:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a00:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a02:	d00b      	beq.n	8002a1c <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a04:	061b      	lsls	r3, r3, #24
 8002a06:	d506      	bpl.n	8002a16 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a08:	6802      	ldr	r2, [r0, #0]
 8002a0a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002a0c:	6853      	ldr	r3, [r2, #4]
 8002a0e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002a12:	430b      	orrs	r3, r1
 8002a14:	6053      	str	r3, [r2, #4]
}
 8002a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a1a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a1c:	684a      	ldr	r2, [r1, #4]
 8002a1e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002a20:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002a24:	4322      	orrs	r2, r4
 8002a26:	604a      	str	r2, [r1, #4]
 8002a28:	e7ec      	b.n	8002a04 <UART_AdvFeatureConfig+0x88>
 8002a2a:	bf00      	nop

08002a2c <UART_CheckIdleState>:
{
 8002a2c:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2e:	2300      	movs	r3, #0
{
 8002a30:	4605      	mov	r5, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a32:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002a34:	f7fe f8ea 	bl	8000c0c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a38:	682b      	ldr	r3, [r5, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002a3c:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a3e:	0710      	lsls	r0, r2, #28
 8002a40:	d409      	bmi.n	8002a56 <UART_CheckIdleState+0x2a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	0750      	lsls	r0, r2, #29
 8002a46:	d42a      	bmi.n	8002a9e <UART_CheckIdleState+0x72>
  huart->gState = HAL_UART_STATE_READY;
 8002a48:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002a4a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002a4c:	676b      	str	r3, [r5, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8002a4e:	f885 0070 	strb.w	r0, [r5, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002a52:	67ab      	str	r3, [r5, #120]	; 0x78
  return HAL_OK;
 8002a54:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a56:	69dc      	ldr	r4, [r3, #28]
 8002a58:	f414 1400 	ands.w	r4, r4, #2097152	; 0x200000
 8002a5c:	d1f1      	bne.n	8002a42 <UART_CheckIdleState+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5e:	f7fe f8d5 	bl	8000c0c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a62:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a64:	1b80      	subs	r0, r0, r6
 8002a66:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a6a:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6c:	d229      	bcs.n	8002ac2 <UART_CheckIdleState+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a6e:	0751      	lsls	r1, r2, #29
 8002a70:	d5f1      	bpl.n	8002a56 <UART_CheckIdleState+0x2a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	0512      	lsls	r2, r2, #20
 8002a76:	d5ee      	bpl.n	8002a56 <UART_CheckIdleState+0x2a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a7c:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a84:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a86:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002a88:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a8a:	f021 0101 	bic.w	r1, r1, #1
 8002a8e:	6099      	str	r1, [r3, #8]
      return HAL_TIMEOUT;
 8002a90:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8002a92:	676a      	str	r2, [r5, #116]	; 0x74
          __HAL_UNLOCK(huart);
 8002a94:	f885 4070 	strb.w	r4, [r5, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 8002a98:	67aa      	str	r2, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a9a:	67ea      	str	r2, [r5, #124]	; 0x7c
 8002a9c:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9e:	69dc      	ldr	r4, [r3, #28]
 8002aa0:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
 8002aa4:	d1d0      	bne.n	8002a48 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa6:	f7fe f8b1 	bl	8000c0c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002aaa:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aac:	1b80      	subs	r0, r0, r6
 8002aae:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ab2:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab4:	d205      	bcs.n	8002ac2 <UART_CheckIdleState+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ab6:	0751      	lsls	r1, r2, #29
 8002ab8:	d5f1      	bpl.n	8002a9e <UART_CheckIdleState+0x72>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002aba:	69da      	ldr	r2, [r3, #28]
 8002abc:	0512      	lsls	r2, r2, #20
 8002abe:	d5ee      	bpl.n	8002a9e <UART_CheckIdleState+0x72>
 8002ac0:	e7da      	b.n	8002a78 <UART_CheckIdleState+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ac2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ac6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac8:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002aca:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002acc:	f022 0201 	bic.w	r2, r2, #1
 8002ad0:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 8002ad2:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8002ad4:	6769      	str	r1, [r5, #116]	; 0x74
        __HAL_UNLOCK(huart);
 8002ad6:	f885 4070 	strb.w	r4, [r5, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8002ada:	67a9      	str	r1, [r5, #120]	; 0x78
 8002adc:	bd70      	pop	{r4, r5, r6, pc}
 8002ade:	bf00      	nop

08002ae0 <HAL_UART_Init>:
  if (huart == NULL)
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	f000 80df 	beq.w	8002ca4 <HAL_UART_Init+0x1c4>
{
 8002ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002ae8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002aea:	4604      	mov	r4, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d02e      	beq.n	8002b4e <HAL_UART_Init+0x6e>
  __HAL_UART_DISABLE(huart);
 8002af0:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002af2:	6927      	ldr	r7, [r4, #16]
 8002af4:	6966      	ldr	r6, [r4, #20]
 8002af6:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002af8:	4889      	ldr	r0, [pc, #548]	; (8002d20 <HAL_UART_Init+0x240>)
  huart->gState = HAL_UART_STATE_BUSY;
 8002afa:	2224      	movs	r2, #36	; 0x24
 8002afc:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002afe:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b00:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8002b02:	f025 0501 	bic.w	r5, r5, #1
 8002b06:	601d      	str	r5, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b08:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b0a:	433a      	orrs	r2, r7
 8002b0c:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b0e:	4028      	ands	r0, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b10:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b12:	4302      	orrs	r2, r0
 8002b14:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b1a:	4882      	ldr	r0, [pc, #520]	; (8002d24 <HAL_UART_Init+0x244>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b1c:	69a6      	ldr	r6, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b1e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b22:	432a      	orrs	r2, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b24:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b26:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b28:	d038      	beq.n	8002b9c <HAL_UART_Init+0xbc>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b2a:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8002b2c:	6a22      	ldr	r2, [r4, #32]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b2e:	4d7e      	ldr	r5, [pc, #504]	; (8002d28 <HAL_UART_Init+0x248>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b30:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8002b34:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b36:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b38:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b3a:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b3c:	d00c      	beq.n	8002b58 <HAL_UART_Init+0x78>
 8002b3e:	4a7b      	ldr	r2, [pc, #492]	; (8002d2c <HAL_UART_Init+0x24c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d073      	beq.n	8002c2c <HAL_UART_Init+0x14c>
  huart->RxISR = NULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002b48:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8002b4e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002b52:	f7fd ff4d 	bl	80009f0 <HAL_UART_MspInit>
 8002b56:	e7cb      	b.n	8002af0 <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b58:	4b75      	ldr	r3, [pc, #468]	; (8002d30 <HAL_UART_Init+0x250>)
 8002b5a:	4a76      	ldr	r2, [pc, #472]	; (8002d34 <HAL_UART_Init+0x254>)
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b66:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002b6a:	f040 80a2 	bne.w	8002cb2 <HAL_UART_Init+0x1d2>
    switch (clocksource)
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d8e8      	bhi.n	8002b44 <HAL_UART_Init+0x64>
 8002b72:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <HAL_UART_Init+0x98>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002c79 	.word	0x08002c79
 8002b7c:	08002c6d 	.word	0x08002c6d
 8002b80:	08002c85 	.word	0x08002c85
 8002b84:	08002b45 	.word	0x08002b45
 8002b88:	08002c7f 	.word	0x08002c7f
 8002b8c:	08002b45 	.word	0x08002b45
 8002b90:	08002b45 	.word	0x08002b45
 8002b94:	08002b45 	.word	0x08002b45
 8002b98:	08002c3d 	.word	0x08002c3d
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b9c:	689a      	ldr	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b9e:	4964      	ldr	r1, [pc, #400]	; (8002d30 <HAL_UART_Init+0x250>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ba0:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002ba4:	4332      	orrs	r2, r6
 8002ba6:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ba8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002bac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb4:	d078      	beq.n	8002ca8 <HAL_UART_Init+0x1c8>
 8002bb6:	d96d      	bls.n	8002c94 <HAL_UART_Init+0x1b4>
 8002bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bbc:	d064      	beq.n	8002c88 <HAL_UART_Init+0x1a8>
 8002bbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bc2:	d1bf      	bne.n	8002b44 <HAL_UART_Init+0x64>
        pclk = (uint32_t) LSE_VALUE;
 8002bc4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bc8:	6862      	ldr	r2, [r4, #4]
 8002bca:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002bce:	4283      	cmp	r3, r0
 8002bd0:	d8b8      	bhi.n	8002b44 <HAL_UART_Init+0x64>
 8002bd2:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002bd6:	d8b5      	bhi.n	8002b44 <HAL_UART_Init+0x64>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002bd8:	0856      	lsrs	r6, r2, #1
 8002bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bde:	2700      	movs	r7, #0
 8002be0:	fbe3 6700 	umlal	r6, r7, r3, r0
 8002be4:	4630      	mov	r0, r6
 8002be6:	2300      	movs	r3, #0
 8002be8:	4639      	mov	r1, r7
 8002bea:	f7fd fb49 	bl	8000280 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002bee:	4b52      	ldr	r3, [pc, #328]	; (8002d38 <HAL_UART_Init+0x258>)
 8002bf0:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d8a5      	bhi.n	8002b44 <HAL_UART_Init+0x64>
        huart->Instance->BRR = usartdiv;
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	60d8      	str	r0, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bfc:	6a62      	ldr	r2, [r4, #36]	; 0x24
  huart->RxISR = NULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002c02:	6663      	str	r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c04:	2a00      	cmp	r2, #0
 8002c06:	d141      	bne.n	8002c8c <HAL_UART_Init+0x1ac>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c18:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002c20:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002c22:	601a      	str	r2, [r3, #0]
}
 8002c24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return (UART_CheckIdleState(huart));
 8002c28:	f7ff bf00 	b.w	8002a2c <UART_CheckIdleState>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c2c:	4b40      	ldr	r3, [pc, #256]	; (8002d30 <HAL_UART_Init+0x250>)
 8002c2e:	4a43      	ldr	r2, [pc, #268]	; (8002d3c <HAL_UART_Init+0x25c>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	5cd3      	ldrb	r3, [r2, r3]
 8002c3a:	e794      	b.n	8002b66 <HAL_UART_Init+0x86>
    switch (clocksource)
 8002c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c40:	6862      	ldr	r2, [r4, #4]
 8002c42:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c4a:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c4c:	f1a2 0010 	sub.w	r0, r2, #16
 8002c50:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002c54:	4288      	cmp	r0, r1
 8002c56:	f63f af75 	bhi.w	8002b44 <HAL_UART_Init+0x64>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c5a:	f023 030f 	bic.w	r3, r3, #15
 8002c5e:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c60:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8002c64:	6821      	ldr	r1, [r4, #0]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60cb      	str	r3, [r1, #12]
 8002c6a:	e7c7      	b.n	8002bfc <HAL_UART_Init+0x11c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c6c:	f7ff fa32 	bl	80020d4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8002c70:	2800      	cmp	r0, #0
 8002c72:	d0c3      	beq.n	8002bfc <HAL_UART_Init+0x11c>
 8002c74:	0043      	lsls	r3, r0, #1
 8002c76:	e7e3      	b.n	8002c40 <HAL_UART_Init+0x160>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c78:	f7ff fa1a 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 8002c7c:	e7f8      	b.n	8002c70 <HAL_UART_Init+0x190>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c7e:	f7fe fd85 	bl	800178c <HAL_RCC_GetSysClockFreq>
 8002c82:	e7f5      	b.n	8002c70 <HAL_UART_Init+0x190>
    switch (clocksource)
 8002c84:	4b2e      	ldr	r3, [pc, #184]	; (8002d40 <HAL_UART_Init+0x260>)
 8002c86:	e7db      	b.n	8002c40 <HAL_UART_Init+0x160>
        pclk = (uint32_t) HSI_VALUE;
 8002c88:	482e      	ldr	r0, [pc, #184]	; (8002d44 <HAL_UART_Init+0x264>)
 8002c8a:	e79d      	b.n	8002bc8 <HAL_UART_Init+0xe8>
    UART_AdvFeatureConfig(huart);
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	f7ff fe75 	bl	800297c <UART_AdvFeatureConfig>
 8002c92:	e7b9      	b.n	8002c08 <HAL_UART_Init+0x128>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f47f af55 	bne.w	8002b44 <HAL_UART_Init+0x64>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c9a:	f7ff fa09 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	d192      	bne.n	8002bc8 <HAL_UART_Init+0xe8>
 8002ca2:	e7ab      	b.n	8002bfc <HAL_UART_Init+0x11c>
}
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 8002ca8:	f7fe fd70 	bl	800178c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8002cac:	2800      	cmp	r0, #0
 8002cae:	d18b      	bne.n	8002bc8 <HAL_UART_Init+0xe8>
 8002cb0:	e7a4      	b.n	8002bfc <HAL_UART_Init+0x11c>
    switch (clocksource)
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	f63f af46 	bhi.w	8002b44 <HAL_UART_Init+0x64>
 8002cb8:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <HAL_UART_Init+0x1e0>)
 8002cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbe:	bf00      	nop
 8002cc0:	08002ce5 	.word	0x08002ce5
 8002cc4:	08002d0f 	.word	0x08002d0f
 8002cc8:	08002d1b 	.word	0x08002d1b
 8002ccc:	08002b45 	.word	0x08002b45
 8002cd0:	08002d09 	.word	0x08002d09
 8002cd4:	08002b45 	.word	0x08002b45
 8002cd8:	08002b45 	.word	0x08002b45
 8002cdc:	08002b45 	.word	0x08002b45
 8002ce0:	08002d15 	.word	0x08002d15
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce4:	f7ff f9e4 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	d087      	beq.n	8002bfc <HAL_UART_Init+0x11c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cec:	6863      	ldr	r3, [r4, #4]
 8002cee:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002cf2:	fbb0 f0f3 	udiv	r0, r0, r3
 8002cf6:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cf8:	f1a0 0210 	sub.w	r2, r0, #16
 8002cfc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002d00:	429a      	cmp	r2, r3
 8002d02:	f67f af79 	bls.w	8002bf8 <HAL_UART_Init+0x118>
 8002d06:	e71d      	b.n	8002b44 <HAL_UART_Init+0x64>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d08:	f7fe fd40 	bl	800178c <HAL_RCC_GetSysClockFreq>
 8002d0c:	e7ec      	b.n	8002ce8 <HAL_UART_Init+0x208>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d0e:	f7ff f9e1 	bl	80020d4 <HAL_RCC_GetPCLK2Freq>
 8002d12:	e7e9      	b.n	8002ce8 <HAL_UART_Init+0x208>
        pclk = (uint32_t) LSE_VALUE;
 8002d14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002d18:	e7e8      	b.n	8002cec <HAL_UART_Init+0x20c>
        pclk = (uint32_t) HSI_VALUE;
 8002d1a:	480a      	ldr	r0, [pc, #40]	; (8002d44 <HAL_UART_Init+0x264>)
 8002d1c:	e7e6      	b.n	8002cec <HAL_UART_Init+0x20c>
 8002d1e:	bf00      	nop
 8002d20:	efff69f3 	.word	0xefff69f3
 8002d24:	40008000 	.word	0x40008000
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	40004400 	.word	0x40004400
 8002d30:	40021000 	.word	0x40021000
 8002d34:	080036d8 	.word	0x080036d8
 8002d38:	000ffcff 	.word	0x000ffcff
 8002d3c:	080036dc 	.word	0x080036dc
 8002d40:	01e84800 	.word	0x01e84800
 8002d44:	00f42400 	.word	0x00f42400

08002d48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop

08002d4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d50:	f7fd feee 	bl	8000b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002d54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002d56:	e003      	b.n	8002d60 <LoopCopyDataInit>

08002d58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002d5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002d5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002d5e:	3104      	adds	r1, #4

08002d60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d60:	480a      	ldr	r0, [pc, #40]	; (8002d8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002d62:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002d64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d68:	d3f6      	bcc.n	8002d58 <CopyDataInit>
	ldr	r2, =_sbss
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002d6c:	e002      	b.n	8002d74 <LoopFillZerobss>

08002d6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002d70:	f842 3b04 	str.w	r3, [r2], #4

08002d74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <LoopForever+0x16>)
	cmp	r2, r3
 8002d76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002d78:	d3f9      	bcc.n	8002d6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d7a:	f000 f817 	bl	8002dac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d7e:	f7fd fc6b 	bl	8000658 <main>

08002d82 <LoopForever>:

LoopForever:
    b LoopForever
 8002d82:	e7fe      	b.n	8002d82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d84:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002d88:	0800372c 	.word	0x0800372c
	ldr	r0, =_sdata
 8002d8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d90:	20000270 	.word	0x20000270
	ldr	r2, =_sbss
 8002d94:	20000270 	.word	0x20000270
	ldr	r3, = _ebss
 8002d98:	20000420 	.word	0x20000420

08002d9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d9c:	e7fe      	b.n	8002d9c <ADC1_IRQHandler>
	...

08002da0 <__errno>:
 8002da0:	4b01      	ldr	r3, [pc, #4]	; (8002da8 <__errno+0x8>)
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	2000020c 	.word	0x2000020c

08002dac <__libc_init_array>:
 8002dac:	b570      	push	{r4, r5, r6, lr}
 8002dae:	4e0d      	ldr	r6, [pc, #52]	; (8002de4 <__libc_init_array+0x38>)
 8002db0:	4c0d      	ldr	r4, [pc, #52]	; (8002de8 <__libc_init_array+0x3c>)
 8002db2:	1ba4      	subs	r4, r4, r6
 8002db4:	10a4      	asrs	r4, r4, #2
 8002db6:	2500      	movs	r5, #0
 8002db8:	42a5      	cmp	r5, r4
 8002dba:	d109      	bne.n	8002dd0 <__libc_init_array+0x24>
 8002dbc:	4e0b      	ldr	r6, [pc, #44]	; (8002dec <__libc_init_array+0x40>)
 8002dbe:	4c0c      	ldr	r4, [pc, #48]	; (8002df0 <__libc_init_array+0x44>)
 8002dc0:	f000 fc3e 	bl	8003640 <_init>
 8002dc4:	1ba4      	subs	r4, r4, r6
 8002dc6:	10a4      	asrs	r4, r4, #2
 8002dc8:	2500      	movs	r5, #0
 8002dca:	42a5      	cmp	r5, r4
 8002dcc:	d105      	bne.n	8002dda <__libc_init_array+0x2e>
 8002dce:	bd70      	pop	{r4, r5, r6, pc}
 8002dd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dd4:	4798      	blx	r3
 8002dd6:	3501      	adds	r5, #1
 8002dd8:	e7ee      	b.n	8002db8 <__libc_init_array+0xc>
 8002dda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dde:	4798      	blx	r3
 8002de0:	3501      	adds	r5, #1
 8002de2:	e7f2      	b.n	8002dca <__libc_init_array+0x1e>
 8002de4:	08003724 	.word	0x08003724
 8002de8:	08003724 	.word	0x08003724
 8002dec:	08003724 	.word	0x08003724
 8002df0:	08003728 	.word	0x08003728

08002df4 <memset>:
 8002df4:	4402      	add	r2, r0
 8002df6:	4603      	mov	r3, r0
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d100      	bne.n	8002dfe <memset+0xa>
 8002dfc:	4770      	bx	lr
 8002dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8002e02:	e7f9      	b.n	8002df8 <memset+0x4>

08002e04 <siprintf>:
 8002e04:	b40e      	push	{r1, r2, r3}
 8002e06:	b500      	push	{lr}
 8002e08:	b09c      	sub	sp, #112	; 0x70
 8002e0a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002e0e:	ab1d      	add	r3, sp, #116	; 0x74
 8002e10:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002e14:	9002      	str	r0, [sp, #8]
 8002e16:	9006      	str	r0, [sp, #24]
 8002e18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e1c:	480a      	ldr	r0, [pc, #40]	; (8002e48 <siprintf+0x44>)
 8002e1e:	9104      	str	r1, [sp, #16]
 8002e20:	9107      	str	r1, [sp, #28]
 8002e22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e2a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002e2e:	6800      	ldr	r0, [r0, #0]
 8002e30:	9301      	str	r3, [sp, #4]
 8002e32:	a902      	add	r1, sp, #8
 8002e34:	f000 f866 	bl	8002f04 <_svfiprintf_r>
 8002e38:	9b02      	ldr	r3, [sp, #8]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	b01c      	add	sp, #112	; 0x70
 8002e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e44:	b003      	add	sp, #12
 8002e46:	4770      	bx	lr
 8002e48:	2000020c 	.word	0x2000020c

08002e4c <__ssputs_r>:
 8002e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e50:	688e      	ldr	r6, [r1, #8]
 8002e52:	429e      	cmp	r6, r3
 8002e54:	4682      	mov	sl, r0
 8002e56:	460c      	mov	r4, r1
 8002e58:	4691      	mov	r9, r2
 8002e5a:	4698      	mov	r8, r3
 8002e5c:	d835      	bhi.n	8002eca <__ssputs_r+0x7e>
 8002e5e:	898a      	ldrh	r2, [r1, #12]
 8002e60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e64:	d031      	beq.n	8002eca <__ssputs_r+0x7e>
 8002e66:	6825      	ldr	r5, [r4, #0]
 8002e68:	6909      	ldr	r1, [r1, #16]
 8002e6a:	1a6f      	subs	r7, r5, r1
 8002e6c:	6965      	ldr	r5, [r4, #20]
 8002e6e:	2302      	movs	r3, #2
 8002e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e74:	fb95 f5f3 	sdiv	r5, r5, r3
 8002e78:	f108 0301 	add.w	r3, r8, #1
 8002e7c:	443b      	add	r3, r7
 8002e7e:	429d      	cmp	r5, r3
 8002e80:	bf38      	it	cc
 8002e82:	461d      	movcc	r5, r3
 8002e84:	0553      	lsls	r3, r2, #21
 8002e86:	d531      	bpl.n	8002eec <__ssputs_r+0xa0>
 8002e88:	4629      	mov	r1, r5
 8002e8a:	f000 fb39 	bl	8003500 <_malloc_r>
 8002e8e:	4606      	mov	r6, r0
 8002e90:	b950      	cbnz	r0, 8002ea8 <__ssputs_r+0x5c>
 8002e92:	230c      	movs	r3, #12
 8002e94:	f8ca 3000 	str.w	r3, [sl]
 8002e98:	89a3      	ldrh	r3, [r4, #12]
 8002e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e9e:	81a3      	strh	r3, [r4, #12]
 8002ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ea8:	463a      	mov	r2, r7
 8002eaa:	6921      	ldr	r1, [r4, #16]
 8002eac:	f000 fab4 	bl	8003418 <memcpy>
 8002eb0:	89a3      	ldrh	r3, [r4, #12]
 8002eb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eba:	81a3      	strh	r3, [r4, #12]
 8002ebc:	6126      	str	r6, [r4, #16]
 8002ebe:	6165      	str	r5, [r4, #20]
 8002ec0:	443e      	add	r6, r7
 8002ec2:	1bed      	subs	r5, r5, r7
 8002ec4:	6026      	str	r6, [r4, #0]
 8002ec6:	60a5      	str	r5, [r4, #8]
 8002ec8:	4646      	mov	r6, r8
 8002eca:	4546      	cmp	r6, r8
 8002ecc:	bf28      	it	cs
 8002ece:	4646      	movcs	r6, r8
 8002ed0:	4632      	mov	r2, r6
 8002ed2:	4649      	mov	r1, r9
 8002ed4:	6820      	ldr	r0, [r4, #0]
 8002ed6:	f000 faaa 	bl	800342e <memmove>
 8002eda:	68a3      	ldr	r3, [r4, #8]
 8002edc:	1b9b      	subs	r3, r3, r6
 8002ede:	60a3      	str	r3, [r4, #8]
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	441e      	add	r6, r3
 8002ee4:	6026      	str	r6, [r4, #0]
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eec:	462a      	mov	r2, r5
 8002eee:	f000 fb65 	bl	80035bc <_realloc_r>
 8002ef2:	4606      	mov	r6, r0
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	d1e1      	bne.n	8002ebc <__ssputs_r+0x70>
 8002ef8:	6921      	ldr	r1, [r4, #16]
 8002efa:	4650      	mov	r0, sl
 8002efc:	f000 fab2 	bl	8003464 <_free_r>
 8002f00:	e7c7      	b.n	8002e92 <__ssputs_r+0x46>
	...

08002f04 <_svfiprintf_r>:
 8002f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f08:	b09d      	sub	sp, #116	; 0x74
 8002f0a:	4680      	mov	r8, r0
 8002f0c:	9303      	str	r3, [sp, #12]
 8002f0e:	898b      	ldrh	r3, [r1, #12]
 8002f10:	061c      	lsls	r4, r3, #24
 8002f12:	460d      	mov	r5, r1
 8002f14:	4616      	mov	r6, r2
 8002f16:	d50f      	bpl.n	8002f38 <_svfiprintf_r+0x34>
 8002f18:	690b      	ldr	r3, [r1, #16]
 8002f1a:	b96b      	cbnz	r3, 8002f38 <_svfiprintf_r+0x34>
 8002f1c:	2140      	movs	r1, #64	; 0x40
 8002f1e:	f000 faef 	bl	8003500 <_malloc_r>
 8002f22:	6028      	str	r0, [r5, #0]
 8002f24:	6128      	str	r0, [r5, #16]
 8002f26:	b928      	cbnz	r0, 8002f34 <_svfiprintf_r+0x30>
 8002f28:	230c      	movs	r3, #12
 8002f2a:	f8c8 3000 	str.w	r3, [r8]
 8002f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f32:	e0c5      	b.n	80030c0 <_svfiprintf_r+0x1bc>
 8002f34:	2340      	movs	r3, #64	; 0x40
 8002f36:	616b      	str	r3, [r5, #20]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f3c:	2320      	movs	r3, #32
 8002f3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f42:	2330      	movs	r3, #48	; 0x30
 8002f44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f48:	f04f 0b01 	mov.w	fp, #1
 8002f4c:	4637      	mov	r7, r6
 8002f4e:	463c      	mov	r4, r7
 8002f50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d13c      	bne.n	8002fd2 <_svfiprintf_r+0xce>
 8002f58:	ebb7 0a06 	subs.w	sl, r7, r6
 8002f5c:	d00b      	beq.n	8002f76 <_svfiprintf_r+0x72>
 8002f5e:	4653      	mov	r3, sl
 8002f60:	4632      	mov	r2, r6
 8002f62:	4629      	mov	r1, r5
 8002f64:	4640      	mov	r0, r8
 8002f66:	f7ff ff71 	bl	8002e4c <__ssputs_r>
 8002f6a:	3001      	adds	r0, #1
 8002f6c:	f000 80a3 	beq.w	80030b6 <_svfiprintf_r+0x1b2>
 8002f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f72:	4453      	add	r3, sl
 8002f74:	9309      	str	r3, [sp, #36]	; 0x24
 8002f76:	783b      	ldrb	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 809c 	beq.w	80030b6 <_svfiprintf_r+0x1b2>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f04f 32ff 	mov.w	r2, #4294967295
 8002f84:	9304      	str	r3, [sp, #16]
 8002f86:	9307      	str	r3, [sp, #28]
 8002f88:	9205      	str	r2, [sp, #20]
 8002f8a:	9306      	str	r3, [sp, #24]
 8002f8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f90:	931a      	str	r3, [sp, #104]	; 0x68
 8002f92:	2205      	movs	r2, #5
 8002f94:	7821      	ldrb	r1, [r4, #0]
 8002f96:	4850      	ldr	r0, [pc, #320]	; (80030d8 <_svfiprintf_r+0x1d4>)
 8002f98:	f7fd f922 	bl	80001e0 <memchr>
 8002f9c:	1c67      	adds	r7, r4, #1
 8002f9e:	9b04      	ldr	r3, [sp, #16]
 8002fa0:	b9d8      	cbnz	r0, 8002fda <_svfiprintf_r+0xd6>
 8002fa2:	06d9      	lsls	r1, r3, #27
 8002fa4:	bf44      	itt	mi
 8002fa6:	2220      	movmi	r2, #32
 8002fa8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002fac:	071a      	lsls	r2, r3, #28
 8002fae:	bf44      	itt	mi
 8002fb0:	222b      	movmi	r2, #43	; 0x2b
 8002fb2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002fb6:	7822      	ldrb	r2, [r4, #0]
 8002fb8:	2a2a      	cmp	r2, #42	; 0x2a
 8002fba:	d016      	beq.n	8002fea <_svfiprintf_r+0xe6>
 8002fbc:	9a07      	ldr	r2, [sp, #28]
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	200a      	movs	r0, #10
 8002fc2:	4627      	mov	r7, r4
 8002fc4:	3401      	adds	r4, #1
 8002fc6:	783b      	ldrb	r3, [r7, #0]
 8002fc8:	3b30      	subs	r3, #48	; 0x30
 8002fca:	2b09      	cmp	r3, #9
 8002fcc:	d951      	bls.n	8003072 <_svfiprintf_r+0x16e>
 8002fce:	b1c9      	cbz	r1, 8003004 <_svfiprintf_r+0x100>
 8002fd0:	e011      	b.n	8002ff6 <_svfiprintf_r+0xf2>
 8002fd2:	2b25      	cmp	r3, #37	; 0x25
 8002fd4:	d0c0      	beq.n	8002f58 <_svfiprintf_r+0x54>
 8002fd6:	4627      	mov	r7, r4
 8002fd8:	e7b9      	b.n	8002f4e <_svfiprintf_r+0x4a>
 8002fda:	4a3f      	ldr	r2, [pc, #252]	; (80030d8 <_svfiprintf_r+0x1d4>)
 8002fdc:	1a80      	subs	r0, r0, r2
 8002fde:	fa0b f000 	lsl.w	r0, fp, r0
 8002fe2:	4318      	orrs	r0, r3
 8002fe4:	9004      	str	r0, [sp, #16]
 8002fe6:	463c      	mov	r4, r7
 8002fe8:	e7d3      	b.n	8002f92 <_svfiprintf_r+0x8e>
 8002fea:	9a03      	ldr	r2, [sp, #12]
 8002fec:	1d11      	adds	r1, r2, #4
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	9103      	str	r1, [sp, #12]
 8002ff2:	2a00      	cmp	r2, #0
 8002ff4:	db01      	blt.n	8002ffa <_svfiprintf_r+0xf6>
 8002ff6:	9207      	str	r2, [sp, #28]
 8002ff8:	e004      	b.n	8003004 <_svfiprintf_r+0x100>
 8002ffa:	4252      	negs	r2, r2
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	9207      	str	r2, [sp, #28]
 8003002:	9304      	str	r3, [sp, #16]
 8003004:	783b      	ldrb	r3, [r7, #0]
 8003006:	2b2e      	cmp	r3, #46	; 0x2e
 8003008:	d10e      	bne.n	8003028 <_svfiprintf_r+0x124>
 800300a:	787b      	ldrb	r3, [r7, #1]
 800300c:	2b2a      	cmp	r3, #42	; 0x2a
 800300e:	f107 0101 	add.w	r1, r7, #1
 8003012:	d132      	bne.n	800307a <_svfiprintf_r+0x176>
 8003014:	9b03      	ldr	r3, [sp, #12]
 8003016:	1d1a      	adds	r2, r3, #4
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	9203      	str	r2, [sp, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	bfb8      	it	lt
 8003020:	f04f 33ff 	movlt.w	r3, #4294967295
 8003024:	3702      	adds	r7, #2
 8003026:	9305      	str	r3, [sp, #20]
 8003028:	4c2c      	ldr	r4, [pc, #176]	; (80030dc <_svfiprintf_r+0x1d8>)
 800302a:	7839      	ldrb	r1, [r7, #0]
 800302c:	2203      	movs	r2, #3
 800302e:	4620      	mov	r0, r4
 8003030:	f7fd f8d6 	bl	80001e0 <memchr>
 8003034:	b138      	cbz	r0, 8003046 <_svfiprintf_r+0x142>
 8003036:	2340      	movs	r3, #64	; 0x40
 8003038:	1b00      	subs	r0, r0, r4
 800303a:	fa03 f000 	lsl.w	r0, r3, r0
 800303e:	9b04      	ldr	r3, [sp, #16]
 8003040:	4303      	orrs	r3, r0
 8003042:	9304      	str	r3, [sp, #16]
 8003044:	3701      	adds	r7, #1
 8003046:	7839      	ldrb	r1, [r7, #0]
 8003048:	4825      	ldr	r0, [pc, #148]	; (80030e0 <_svfiprintf_r+0x1dc>)
 800304a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800304e:	2206      	movs	r2, #6
 8003050:	1c7e      	adds	r6, r7, #1
 8003052:	f7fd f8c5 	bl	80001e0 <memchr>
 8003056:	2800      	cmp	r0, #0
 8003058:	d035      	beq.n	80030c6 <_svfiprintf_r+0x1c2>
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <_svfiprintf_r+0x1e0>)
 800305c:	b9fb      	cbnz	r3, 800309e <_svfiprintf_r+0x19a>
 800305e:	9b03      	ldr	r3, [sp, #12]
 8003060:	3307      	adds	r3, #7
 8003062:	f023 0307 	bic.w	r3, r3, #7
 8003066:	3308      	adds	r3, #8
 8003068:	9303      	str	r3, [sp, #12]
 800306a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800306c:	444b      	add	r3, r9
 800306e:	9309      	str	r3, [sp, #36]	; 0x24
 8003070:	e76c      	b.n	8002f4c <_svfiprintf_r+0x48>
 8003072:	fb00 3202 	mla	r2, r0, r2, r3
 8003076:	2101      	movs	r1, #1
 8003078:	e7a3      	b.n	8002fc2 <_svfiprintf_r+0xbe>
 800307a:	2300      	movs	r3, #0
 800307c:	9305      	str	r3, [sp, #20]
 800307e:	4618      	mov	r0, r3
 8003080:	240a      	movs	r4, #10
 8003082:	460f      	mov	r7, r1
 8003084:	3101      	adds	r1, #1
 8003086:	783a      	ldrb	r2, [r7, #0]
 8003088:	3a30      	subs	r2, #48	; 0x30
 800308a:	2a09      	cmp	r2, #9
 800308c:	d903      	bls.n	8003096 <_svfiprintf_r+0x192>
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0ca      	beq.n	8003028 <_svfiprintf_r+0x124>
 8003092:	9005      	str	r0, [sp, #20]
 8003094:	e7c8      	b.n	8003028 <_svfiprintf_r+0x124>
 8003096:	fb04 2000 	mla	r0, r4, r0, r2
 800309a:	2301      	movs	r3, #1
 800309c:	e7f1      	b.n	8003082 <_svfiprintf_r+0x17e>
 800309e:	ab03      	add	r3, sp, #12
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	462a      	mov	r2, r5
 80030a4:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <_svfiprintf_r+0x1e4>)
 80030a6:	a904      	add	r1, sp, #16
 80030a8:	4640      	mov	r0, r8
 80030aa:	f3af 8000 	nop.w
 80030ae:	f1b0 3fff 	cmp.w	r0, #4294967295
 80030b2:	4681      	mov	r9, r0
 80030b4:	d1d9      	bne.n	800306a <_svfiprintf_r+0x166>
 80030b6:	89ab      	ldrh	r3, [r5, #12]
 80030b8:	065b      	lsls	r3, r3, #25
 80030ba:	f53f af38 	bmi.w	8002f2e <_svfiprintf_r+0x2a>
 80030be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030c0:	b01d      	add	sp, #116	; 0x74
 80030c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030c6:	ab03      	add	r3, sp, #12
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	462a      	mov	r2, r5
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <_svfiprintf_r+0x1e4>)
 80030ce:	a904      	add	r1, sp, #16
 80030d0:	4640      	mov	r0, r8
 80030d2:	f000 f881 	bl	80031d8 <_printf_i>
 80030d6:	e7ea      	b.n	80030ae <_svfiprintf_r+0x1aa>
 80030d8:	080036e9 	.word	0x080036e9
 80030dc:	080036ef 	.word	0x080036ef
 80030e0:	080036f3 	.word	0x080036f3
 80030e4:	00000000 	.word	0x00000000
 80030e8:	08002e4d 	.word	0x08002e4d

080030ec <_printf_common>:
 80030ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f0:	4691      	mov	r9, r2
 80030f2:	461f      	mov	r7, r3
 80030f4:	688a      	ldr	r2, [r1, #8]
 80030f6:	690b      	ldr	r3, [r1, #16]
 80030f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030fc:	4293      	cmp	r3, r2
 80030fe:	bfb8      	it	lt
 8003100:	4613      	movlt	r3, r2
 8003102:	f8c9 3000 	str.w	r3, [r9]
 8003106:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800310a:	4606      	mov	r6, r0
 800310c:	460c      	mov	r4, r1
 800310e:	b112      	cbz	r2, 8003116 <_printf_common+0x2a>
 8003110:	3301      	adds	r3, #1
 8003112:	f8c9 3000 	str.w	r3, [r9]
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	0699      	lsls	r1, r3, #26
 800311a:	bf42      	ittt	mi
 800311c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003120:	3302      	addmi	r3, #2
 8003122:	f8c9 3000 	strmi.w	r3, [r9]
 8003126:	6825      	ldr	r5, [r4, #0]
 8003128:	f015 0506 	ands.w	r5, r5, #6
 800312c:	d107      	bne.n	800313e <_printf_common+0x52>
 800312e:	f104 0a19 	add.w	sl, r4, #25
 8003132:	68e3      	ldr	r3, [r4, #12]
 8003134:	f8d9 2000 	ldr.w	r2, [r9]
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	429d      	cmp	r5, r3
 800313c:	db29      	blt.n	8003192 <_printf_common+0xa6>
 800313e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003142:	6822      	ldr	r2, [r4, #0]
 8003144:	3300      	adds	r3, #0
 8003146:	bf18      	it	ne
 8003148:	2301      	movne	r3, #1
 800314a:	0692      	lsls	r2, r2, #26
 800314c:	d42e      	bmi.n	80031ac <_printf_common+0xc0>
 800314e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003152:	4639      	mov	r1, r7
 8003154:	4630      	mov	r0, r6
 8003156:	47c0      	blx	r8
 8003158:	3001      	adds	r0, #1
 800315a:	d021      	beq.n	80031a0 <_printf_common+0xb4>
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	68e5      	ldr	r5, [r4, #12]
 8003160:	f8d9 2000 	ldr.w	r2, [r9]
 8003164:	f003 0306 	and.w	r3, r3, #6
 8003168:	2b04      	cmp	r3, #4
 800316a:	bf08      	it	eq
 800316c:	1aad      	subeq	r5, r5, r2
 800316e:	68a3      	ldr	r3, [r4, #8]
 8003170:	6922      	ldr	r2, [r4, #16]
 8003172:	bf0c      	ite	eq
 8003174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003178:	2500      	movne	r5, #0
 800317a:	4293      	cmp	r3, r2
 800317c:	bfc4      	itt	gt
 800317e:	1a9b      	subgt	r3, r3, r2
 8003180:	18ed      	addgt	r5, r5, r3
 8003182:	f04f 0900 	mov.w	r9, #0
 8003186:	341a      	adds	r4, #26
 8003188:	454d      	cmp	r5, r9
 800318a:	d11b      	bne.n	80031c4 <_printf_common+0xd8>
 800318c:	2000      	movs	r0, #0
 800318e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003192:	2301      	movs	r3, #1
 8003194:	4652      	mov	r2, sl
 8003196:	4639      	mov	r1, r7
 8003198:	4630      	mov	r0, r6
 800319a:	47c0      	blx	r8
 800319c:	3001      	adds	r0, #1
 800319e:	d103      	bne.n	80031a8 <_printf_common+0xbc>
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295
 80031a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a8:	3501      	adds	r5, #1
 80031aa:	e7c2      	b.n	8003132 <_printf_common+0x46>
 80031ac:	18e1      	adds	r1, r4, r3
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	2030      	movs	r0, #48	; 0x30
 80031b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031b6:	4422      	add	r2, r4
 80031b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031c0:	3302      	adds	r3, #2
 80031c2:	e7c4      	b.n	800314e <_printf_common+0x62>
 80031c4:	2301      	movs	r3, #1
 80031c6:	4622      	mov	r2, r4
 80031c8:	4639      	mov	r1, r7
 80031ca:	4630      	mov	r0, r6
 80031cc:	47c0      	blx	r8
 80031ce:	3001      	adds	r0, #1
 80031d0:	d0e6      	beq.n	80031a0 <_printf_common+0xb4>
 80031d2:	f109 0901 	add.w	r9, r9, #1
 80031d6:	e7d7      	b.n	8003188 <_printf_common+0x9c>

080031d8 <_printf_i>:
 80031d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031dc:	4617      	mov	r7, r2
 80031de:	7e0a      	ldrb	r2, [r1, #24]
 80031e0:	b085      	sub	sp, #20
 80031e2:	2a6e      	cmp	r2, #110	; 0x6e
 80031e4:	4698      	mov	r8, r3
 80031e6:	4606      	mov	r6, r0
 80031e8:	460c      	mov	r4, r1
 80031ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031ec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80031f0:	f000 80bc 	beq.w	800336c <_printf_i+0x194>
 80031f4:	d81a      	bhi.n	800322c <_printf_i+0x54>
 80031f6:	2a63      	cmp	r2, #99	; 0x63
 80031f8:	d02e      	beq.n	8003258 <_printf_i+0x80>
 80031fa:	d80a      	bhi.n	8003212 <_printf_i+0x3a>
 80031fc:	2a00      	cmp	r2, #0
 80031fe:	f000 80c8 	beq.w	8003392 <_printf_i+0x1ba>
 8003202:	2a58      	cmp	r2, #88	; 0x58
 8003204:	f000 808a 	beq.w	800331c <_printf_i+0x144>
 8003208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800320c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003210:	e02a      	b.n	8003268 <_printf_i+0x90>
 8003212:	2a64      	cmp	r2, #100	; 0x64
 8003214:	d001      	beq.n	800321a <_printf_i+0x42>
 8003216:	2a69      	cmp	r2, #105	; 0x69
 8003218:	d1f6      	bne.n	8003208 <_printf_i+0x30>
 800321a:	6821      	ldr	r1, [r4, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003222:	d023      	beq.n	800326c <_printf_i+0x94>
 8003224:	1d11      	adds	r1, r2, #4
 8003226:	6019      	str	r1, [r3, #0]
 8003228:	6813      	ldr	r3, [r2, #0]
 800322a:	e027      	b.n	800327c <_printf_i+0xa4>
 800322c:	2a73      	cmp	r2, #115	; 0x73
 800322e:	f000 80b4 	beq.w	800339a <_printf_i+0x1c2>
 8003232:	d808      	bhi.n	8003246 <_printf_i+0x6e>
 8003234:	2a6f      	cmp	r2, #111	; 0x6f
 8003236:	d02a      	beq.n	800328e <_printf_i+0xb6>
 8003238:	2a70      	cmp	r2, #112	; 0x70
 800323a:	d1e5      	bne.n	8003208 <_printf_i+0x30>
 800323c:	680a      	ldr	r2, [r1, #0]
 800323e:	f042 0220 	orr.w	r2, r2, #32
 8003242:	600a      	str	r2, [r1, #0]
 8003244:	e003      	b.n	800324e <_printf_i+0x76>
 8003246:	2a75      	cmp	r2, #117	; 0x75
 8003248:	d021      	beq.n	800328e <_printf_i+0xb6>
 800324a:	2a78      	cmp	r2, #120	; 0x78
 800324c:	d1dc      	bne.n	8003208 <_printf_i+0x30>
 800324e:	2278      	movs	r2, #120	; 0x78
 8003250:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003254:	496e      	ldr	r1, [pc, #440]	; (8003410 <_printf_i+0x238>)
 8003256:	e064      	b.n	8003322 <_printf_i+0x14a>
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800325e:	1d11      	adds	r1, r2, #4
 8003260:	6019      	str	r1, [r3, #0]
 8003262:	6813      	ldr	r3, [r2, #0]
 8003264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003268:	2301      	movs	r3, #1
 800326a:	e0a3      	b.n	80033b4 <_printf_i+0x1dc>
 800326c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003270:	f102 0104 	add.w	r1, r2, #4
 8003274:	6019      	str	r1, [r3, #0]
 8003276:	d0d7      	beq.n	8003228 <_printf_i+0x50>
 8003278:	f9b2 3000 	ldrsh.w	r3, [r2]
 800327c:	2b00      	cmp	r3, #0
 800327e:	da03      	bge.n	8003288 <_printf_i+0xb0>
 8003280:	222d      	movs	r2, #45	; 0x2d
 8003282:	425b      	negs	r3, r3
 8003284:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003288:	4962      	ldr	r1, [pc, #392]	; (8003414 <_printf_i+0x23c>)
 800328a:	220a      	movs	r2, #10
 800328c:	e017      	b.n	80032be <_printf_i+0xe6>
 800328e:	6820      	ldr	r0, [r4, #0]
 8003290:	6819      	ldr	r1, [r3, #0]
 8003292:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003296:	d003      	beq.n	80032a0 <_printf_i+0xc8>
 8003298:	1d08      	adds	r0, r1, #4
 800329a:	6018      	str	r0, [r3, #0]
 800329c:	680b      	ldr	r3, [r1, #0]
 800329e:	e006      	b.n	80032ae <_printf_i+0xd6>
 80032a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032a4:	f101 0004 	add.w	r0, r1, #4
 80032a8:	6018      	str	r0, [r3, #0]
 80032aa:	d0f7      	beq.n	800329c <_printf_i+0xc4>
 80032ac:	880b      	ldrh	r3, [r1, #0]
 80032ae:	4959      	ldr	r1, [pc, #356]	; (8003414 <_printf_i+0x23c>)
 80032b0:	2a6f      	cmp	r2, #111	; 0x6f
 80032b2:	bf14      	ite	ne
 80032b4:	220a      	movne	r2, #10
 80032b6:	2208      	moveq	r2, #8
 80032b8:	2000      	movs	r0, #0
 80032ba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80032be:	6865      	ldr	r5, [r4, #4]
 80032c0:	60a5      	str	r5, [r4, #8]
 80032c2:	2d00      	cmp	r5, #0
 80032c4:	f2c0 809c 	blt.w	8003400 <_printf_i+0x228>
 80032c8:	6820      	ldr	r0, [r4, #0]
 80032ca:	f020 0004 	bic.w	r0, r0, #4
 80032ce:	6020      	str	r0, [r4, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d13f      	bne.n	8003354 <_printf_i+0x17c>
 80032d4:	2d00      	cmp	r5, #0
 80032d6:	f040 8095 	bne.w	8003404 <_printf_i+0x22c>
 80032da:	4675      	mov	r5, lr
 80032dc:	2a08      	cmp	r2, #8
 80032de:	d10b      	bne.n	80032f8 <_printf_i+0x120>
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	07da      	lsls	r2, r3, #31
 80032e4:	d508      	bpl.n	80032f8 <_printf_i+0x120>
 80032e6:	6923      	ldr	r3, [r4, #16]
 80032e8:	6862      	ldr	r2, [r4, #4]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	bfde      	ittt	le
 80032ee:	2330      	movle	r3, #48	; 0x30
 80032f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032f8:	ebae 0305 	sub.w	r3, lr, r5
 80032fc:	6123      	str	r3, [r4, #16]
 80032fe:	f8cd 8000 	str.w	r8, [sp]
 8003302:	463b      	mov	r3, r7
 8003304:	aa03      	add	r2, sp, #12
 8003306:	4621      	mov	r1, r4
 8003308:	4630      	mov	r0, r6
 800330a:	f7ff feef 	bl	80030ec <_printf_common>
 800330e:	3001      	adds	r0, #1
 8003310:	d155      	bne.n	80033be <_printf_i+0x1e6>
 8003312:	f04f 30ff 	mov.w	r0, #4294967295
 8003316:	b005      	add	sp, #20
 8003318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800331c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003320:	493c      	ldr	r1, [pc, #240]	; (8003414 <_printf_i+0x23c>)
 8003322:	6822      	ldr	r2, [r4, #0]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	f012 0f80 	tst.w	r2, #128	; 0x80
 800332a:	f100 0504 	add.w	r5, r0, #4
 800332e:	601d      	str	r5, [r3, #0]
 8003330:	d001      	beq.n	8003336 <_printf_i+0x15e>
 8003332:	6803      	ldr	r3, [r0, #0]
 8003334:	e002      	b.n	800333c <_printf_i+0x164>
 8003336:	0655      	lsls	r5, r2, #25
 8003338:	d5fb      	bpl.n	8003332 <_printf_i+0x15a>
 800333a:	8803      	ldrh	r3, [r0, #0]
 800333c:	07d0      	lsls	r0, r2, #31
 800333e:	bf44      	itt	mi
 8003340:	f042 0220 	orrmi.w	r2, r2, #32
 8003344:	6022      	strmi	r2, [r4, #0]
 8003346:	b91b      	cbnz	r3, 8003350 <_printf_i+0x178>
 8003348:	6822      	ldr	r2, [r4, #0]
 800334a:	f022 0220 	bic.w	r2, r2, #32
 800334e:	6022      	str	r2, [r4, #0]
 8003350:	2210      	movs	r2, #16
 8003352:	e7b1      	b.n	80032b8 <_printf_i+0xe0>
 8003354:	4675      	mov	r5, lr
 8003356:	fbb3 f0f2 	udiv	r0, r3, r2
 800335a:	fb02 3310 	mls	r3, r2, r0, r3
 800335e:	5ccb      	ldrb	r3, [r1, r3]
 8003360:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003364:	4603      	mov	r3, r0
 8003366:	2800      	cmp	r0, #0
 8003368:	d1f5      	bne.n	8003356 <_printf_i+0x17e>
 800336a:	e7b7      	b.n	80032dc <_printf_i+0x104>
 800336c:	6808      	ldr	r0, [r1, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	6949      	ldr	r1, [r1, #20]
 8003372:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003376:	d004      	beq.n	8003382 <_printf_i+0x1aa>
 8003378:	1d10      	adds	r0, r2, #4
 800337a:	6018      	str	r0, [r3, #0]
 800337c:	6813      	ldr	r3, [r2, #0]
 800337e:	6019      	str	r1, [r3, #0]
 8003380:	e007      	b.n	8003392 <_printf_i+0x1ba>
 8003382:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003386:	f102 0004 	add.w	r0, r2, #4
 800338a:	6018      	str	r0, [r3, #0]
 800338c:	6813      	ldr	r3, [r2, #0]
 800338e:	d0f6      	beq.n	800337e <_printf_i+0x1a6>
 8003390:	8019      	strh	r1, [r3, #0]
 8003392:	2300      	movs	r3, #0
 8003394:	6123      	str	r3, [r4, #16]
 8003396:	4675      	mov	r5, lr
 8003398:	e7b1      	b.n	80032fe <_printf_i+0x126>
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	1d11      	adds	r1, r2, #4
 800339e:	6019      	str	r1, [r3, #0]
 80033a0:	6815      	ldr	r5, [r2, #0]
 80033a2:	6862      	ldr	r2, [r4, #4]
 80033a4:	2100      	movs	r1, #0
 80033a6:	4628      	mov	r0, r5
 80033a8:	f7fc ff1a 	bl	80001e0 <memchr>
 80033ac:	b108      	cbz	r0, 80033b2 <_printf_i+0x1da>
 80033ae:	1b40      	subs	r0, r0, r5
 80033b0:	6060      	str	r0, [r4, #4]
 80033b2:	6863      	ldr	r3, [r4, #4]
 80033b4:	6123      	str	r3, [r4, #16]
 80033b6:	2300      	movs	r3, #0
 80033b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033bc:	e79f      	b.n	80032fe <_printf_i+0x126>
 80033be:	6923      	ldr	r3, [r4, #16]
 80033c0:	462a      	mov	r2, r5
 80033c2:	4639      	mov	r1, r7
 80033c4:	4630      	mov	r0, r6
 80033c6:	47c0      	blx	r8
 80033c8:	3001      	adds	r0, #1
 80033ca:	d0a2      	beq.n	8003312 <_printf_i+0x13a>
 80033cc:	6823      	ldr	r3, [r4, #0]
 80033ce:	079b      	lsls	r3, r3, #30
 80033d0:	d507      	bpl.n	80033e2 <_printf_i+0x20a>
 80033d2:	2500      	movs	r5, #0
 80033d4:	f104 0919 	add.w	r9, r4, #25
 80033d8:	68e3      	ldr	r3, [r4, #12]
 80033da:	9a03      	ldr	r2, [sp, #12]
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	429d      	cmp	r5, r3
 80033e0:	db05      	blt.n	80033ee <_printf_i+0x216>
 80033e2:	68e0      	ldr	r0, [r4, #12]
 80033e4:	9b03      	ldr	r3, [sp, #12]
 80033e6:	4298      	cmp	r0, r3
 80033e8:	bfb8      	it	lt
 80033ea:	4618      	movlt	r0, r3
 80033ec:	e793      	b.n	8003316 <_printf_i+0x13e>
 80033ee:	2301      	movs	r3, #1
 80033f0:	464a      	mov	r2, r9
 80033f2:	4639      	mov	r1, r7
 80033f4:	4630      	mov	r0, r6
 80033f6:	47c0      	blx	r8
 80033f8:	3001      	adds	r0, #1
 80033fa:	d08a      	beq.n	8003312 <_printf_i+0x13a>
 80033fc:	3501      	adds	r5, #1
 80033fe:	e7eb      	b.n	80033d8 <_printf_i+0x200>
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1a7      	bne.n	8003354 <_printf_i+0x17c>
 8003404:	780b      	ldrb	r3, [r1, #0]
 8003406:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800340a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800340e:	e765      	b.n	80032dc <_printf_i+0x104>
 8003410:	0800370b 	.word	0x0800370b
 8003414:	080036fa 	.word	0x080036fa

08003418 <memcpy>:
 8003418:	b510      	push	{r4, lr}
 800341a:	1e43      	subs	r3, r0, #1
 800341c:	440a      	add	r2, r1
 800341e:	4291      	cmp	r1, r2
 8003420:	d100      	bne.n	8003424 <memcpy+0xc>
 8003422:	bd10      	pop	{r4, pc}
 8003424:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003428:	f803 4f01 	strb.w	r4, [r3, #1]!
 800342c:	e7f7      	b.n	800341e <memcpy+0x6>

0800342e <memmove>:
 800342e:	4288      	cmp	r0, r1
 8003430:	b510      	push	{r4, lr}
 8003432:	eb01 0302 	add.w	r3, r1, r2
 8003436:	d803      	bhi.n	8003440 <memmove+0x12>
 8003438:	1e42      	subs	r2, r0, #1
 800343a:	4299      	cmp	r1, r3
 800343c:	d10c      	bne.n	8003458 <memmove+0x2a>
 800343e:	bd10      	pop	{r4, pc}
 8003440:	4298      	cmp	r0, r3
 8003442:	d2f9      	bcs.n	8003438 <memmove+0xa>
 8003444:	1881      	adds	r1, r0, r2
 8003446:	1ad2      	subs	r2, r2, r3
 8003448:	42d3      	cmn	r3, r2
 800344a:	d100      	bne.n	800344e <memmove+0x20>
 800344c:	bd10      	pop	{r4, pc}
 800344e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003452:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003456:	e7f7      	b.n	8003448 <memmove+0x1a>
 8003458:	f811 4b01 	ldrb.w	r4, [r1], #1
 800345c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003460:	e7eb      	b.n	800343a <memmove+0xc>
	...

08003464 <_free_r>:
 8003464:	b538      	push	{r3, r4, r5, lr}
 8003466:	4605      	mov	r5, r0
 8003468:	2900      	cmp	r1, #0
 800346a:	d045      	beq.n	80034f8 <_free_r+0x94>
 800346c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003470:	1f0c      	subs	r4, r1, #4
 8003472:	2b00      	cmp	r3, #0
 8003474:	bfb8      	it	lt
 8003476:	18e4      	addlt	r4, r4, r3
 8003478:	f000 f8d6 	bl	8003628 <__malloc_lock>
 800347c:	4a1f      	ldr	r2, [pc, #124]	; (80034fc <_free_r+0x98>)
 800347e:	6813      	ldr	r3, [r2, #0]
 8003480:	4610      	mov	r0, r2
 8003482:	b933      	cbnz	r3, 8003492 <_free_r+0x2e>
 8003484:	6063      	str	r3, [r4, #4]
 8003486:	6014      	str	r4, [r2, #0]
 8003488:	4628      	mov	r0, r5
 800348a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800348e:	f000 b8cc 	b.w	800362a <__malloc_unlock>
 8003492:	42a3      	cmp	r3, r4
 8003494:	d90c      	bls.n	80034b0 <_free_r+0x4c>
 8003496:	6821      	ldr	r1, [r4, #0]
 8003498:	1862      	adds	r2, r4, r1
 800349a:	4293      	cmp	r3, r2
 800349c:	bf04      	itt	eq
 800349e:	681a      	ldreq	r2, [r3, #0]
 80034a0:	685b      	ldreq	r3, [r3, #4]
 80034a2:	6063      	str	r3, [r4, #4]
 80034a4:	bf04      	itt	eq
 80034a6:	1852      	addeq	r2, r2, r1
 80034a8:	6022      	streq	r2, [r4, #0]
 80034aa:	6004      	str	r4, [r0, #0]
 80034ac:	e7ec      	b.n	8003488 <_free_r+0x24>
 80034ae:	4613      	mov	r3, r2
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	b10a      	cbz	r2, 80034b8 <_free_r+0x54>
 80034b4:	42a2      	cmp	r2, r4
 80034b6:	d9fa      	bls.n	80034ae <_free_r+0x4a>
 80034b8:	6819      	ldr	r1, [r3, #0]
 80034ba:	1858      	adds	r0, r3, r1
 80034bc:	42a0      	cmp	r0, r4
 80034be:	d10b      	bne.n	80034d8 <_free_r+0x74>
 80034c0:	6820      	ldr	r0, [r4, #0]
 80034c2:	4401      	add	r1, r0
 80034c4:	1858      	adds	r0, r3, r1
 80034c6:	4282      	cmp	r2, r0
 80034c8:	6019      	str	r1, [r3, #0]
 80034ca:	d1dd      	bne.n	8003488 <_free_r+0x24>
 80034cc:	6810      	ldr	r0, [r2, #0]
 80034ce:	6852      	ldr	r2, [r2, #4]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	4401      	add	r1, r0
 80034d4:	6019      	str	r1, [r3, #0]
 80034d6:	e7d7      	b.n	8003488 <_free_r+0x24>
 80034d8:	d902      	bls.n	80034e0 <_free_r+0x7c>
 80034da:	230c      	movs	r3, #12
 80034dc:	602b      	str	r3, [r5, #0]
 80034de:	e7d3      	b.n	8003488 <_free_r+0x24>
 80034e0:	6820      	ldr	r0, [r4, #0]
 80034e2:	1821      	adds	r1, r4, r0
 80034e4:	428a      	cmp	r2, r1
 80034e6:	bf04      	itt	eq
 80034e8:	6811      	ldreq	r1, [r2, #0]
 80034ea:	6852      	ldreq	r2, [r2, #4]
 80034ec:	6062      	str	r2, [r4, #4]
 80034ee:	bf04      	itt	eq
 80034f0:	1809      	addeq	r1, r1, r0
 80034f2:	6021      	streq	r1, [r4, #0]
 80034f4:	605c      	str	r4, [r3, #4]
 80034f6:	e7c7      	b.n	8003488 <_free_r+0x24>
 80034f8:	bd38      	pop	{r3, r4, r5, pc}
 80034fa:	bf00      	nop
 80034fc:	20000290 	.word	0x20000290

08003500 <_malloc_r>:
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	1ccd      	adds	r5, r1, #3
 8003504:	f025 0503 	bic.w	r5, r5, #3
 8003508:	3508      	adds	r5, #8
 800350a:	2d0c      	cmp	r5, #12
 800350c:	bf38      	it	cc
 800350e:	250c      	movcc	r5, #12
 8003510:	2d00      	cmp	r5, #0
 8003512:	4606      	mov	r6, r0
 8003514:	db01      	blt.n	800351a <_malloc_r+0x1a>
 8003516:	42a9      	cmp	r1, r5
 8003518:	d903      	bls.n	8003522 <_malloc_r+0x22>
 800351a:	230c      	movs	r3, #12
 800351c:	6033      	str	r3, [r6, #0]
 800351e:	2000      	movs	r0, #0
 8003520:	bd70      	pop	{r4, r5, r6, pc}
 8003522:	f000 f881 	bl	8003628 <__malloc_lock>
 8003526:	4a23      	ldr	r2, [pc, #140]	; (80035b4 <_malloc_r+0xb4>)
 8003528:	6814      	ldr	r4, [r2, #0]
 800352a:	4621      	mov	r1, r4
 800352c:	b991      	cbnz	r1, 8003554 <_malloc_r+0x54>
 800352e:	4c22      	ldr	r4, [pc, #136]	; (80035b8 <_malloc_r+0xb8>)
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	b91b      	cbnz	r3, 800353c <_malloc_r+0x3c>
 8003534:	4630      	mov	r0, r6
 8003536:	f000 f867 	bl	8003608 <_sbrk_r>
 800353a:	6020      	str	r0, [r4, #0]
 800353c:	4629      	mov	r1, r5
 800353e:	4630      	mov	r0, r6
 8003540:	f000 f862 	bl	8003608 <_sbrk_r>
 8003544:	1c43      	adds	r3, r0, #1
 8003546:	d126      	bne.n	8003596 <_malloc_r+0x96>
 8003548:	230c      	movs	r3, #12
 800354a:	6033      	str	r3, [r6, #0]
 800354c:	4630      	mov	r0, r6
 800354e:	f000 f86c 	bl	800362a <__malloc_unlock>
 8003552:	e7e4      	b.n	800351e <_malloc_r+0x1e>
 8003554:	680b      	ldr	r3, [r1, #0]
 8003556:	1b5b      	subs	r3, r3, r5
 8003558:	d41a      	bmi.n	8003590 <_malloc_r+0x90>
 800355a:	2b0b      	cmp	r3, #11
 800355c:	d90f      	bls.n	800357e <_malloc_r+0x7e>
 800355e:	600b      	str	r3, [r1, #0]
 8003560:	50cd      	str	r5, [r1, r3]
 8003562:	18cc      	adds	r4, r1, r3
 8003564:	4630      	mov	r0, r6
 8003566:	f000 f860 	bl	800362a <__malloc_unlock>
 800356a:	f104 000b 	add.w	r0, r4, #11
 800356e:	1d23      	adds	r3, r4, #4
 8003570:	f020 0007 	bic.w	r0, r0, #7
 8003574:	1ac3      	subs	r3, r0, r3
 8003576:	d01b      	beq.n	80035b0 <_malloc_r+0xb0>
 8003578:	425a      	negs	r2, r3
 800357a:	50e2      	str	r2, [r4, r3]
 800357c:	bd70      	pop	{r4, r5, r6, pc}
 800357e:	428c      	cmp	r4, r1
 8003580:	bf0d      	iteet	eq
 8003582:	6863      	ldreq	r3, [r4, #4]
 8003584:	684b      	ldrne	r3, [r1, #4]
 8003586:	6063      	strne	r3, [r4, #4]
 8003588:	6013      	streq	r3, [r2, #0]
 800358a:	bf18      	it	ne
 800358c:	460c      	movne	r4, r1
 800358e:	e7e9      	b.n	8003564 <_malloc_r+0x64>
 8003590:	460c      	mov	r4, r1
 8003592:	6849      	ldr	r1, [r1, #4]
 8003594:	e7ca      	b.n	800352c <_malloc_r+0x2c>
 8003596:	1cc4      	adds	r4, r0, #3
 8003598:	f024 0403 	bic.w	r4, r4, #3
 800359c:	42a0      	cmp	r0, r4
 800359e:	d005      	beq.n	80035ac <_malloc_r+0xac>
 80035a0:	1a21      	subs	r1, r4, r0
 80035a2:	4630      	mov	r0, r6
 80035a4:	f000 f830 	bl	8003608 <_sbrk_r>
 80035a8:	3001      	adds	r0, #1
 80035aa:	d0cd      	beq.n	8003548 <_malloc_r+0x48>
 80035ac:	6025      	str	r5, [r4, #0]
 80035ae:	e7d9      	b.n	8003564 <_malloc_r+0x64>
 80035b0:	bd70      	pop	{r4, r5, r6, pc}
 80035b2:	bf00      	nop
 80035b4:	20000290 	.word	0x20000290
 80035b8:	20000294 	.word	0x20000294

080035bc <_realloc_r>:
 80035bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035be:	4607      	mov	r7, r0
 80035c0:	4614      	mov	r4, r2
 80035c2:	460e      	mov	r6, r1
 80035c4:	b921      	cbnz	r1, 80035d0 <_realloc_r+0x14>
 80035c6:	4611      	mov	r1, r2
 80035c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80035cc:	f7ff bf98 	b.w	8003500 <_malloc_r>
 80035d0:	b922      	cbnz	r2, 80035dc <_realloc_r+0x20>
 80035d2:	f7ff ff47 	bl	8003464 <_free_r>
 80035d6:	4625      	mov	r5, r4
 80035d8:	4628      	mov	r0, r5
 80035da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035dc:	f000 f826 	bl	800362c <_malloc_usable_size_r>
 80035e0:	4284      	cmp	r4, r0
 80035e2:	d90f      	bls.n	8003604 <_realloc_r+0x48>
 80035e4:	4621      	mov	r1, r4
 80035e6:	4638      	mov	r0, r7
 80035e8:	f7ff ff8a 	bl	8003500 <_malloc_r>
 80035ec:	4605      	mov	r5, r0
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d0f2      	beq.n	80035d8 <_realloc_r+0x1c>
 80035f2:	4631      	mov	r1, r6
 80035f4:	4622      	mov	r2, r4
 80035f6:	f7ff ff0f 	bl	8003418 <memcpy>
 80035fa:	4631      	mov	r1, r6
 80035fc:	4638      	mov	r0, r7
 80035fe:	f7ff ff31 	bl	8003464 <_free_r>
 8003602:	e7e9      	b.n	80035d8 <_realloc_r+0x1c>
 8003604:	4635      	mov	r5, r6
 8003606:	e7e7      	b.n	80035d8 <_realloc_r+0x1c>

08003608 <_sbrk_r>:
 8003608:	b538      	push	{r3, r4, r5, lr}
 800360a:	4c06      	ldr	r4, [pc, #24]	; (8003624 <_sbrk_r+0x1c>)
 800360c:	2300      	movs	r3, #0
 800360e:	4605      	mov	r5, r0
 8003610:	4608      	mov	r0, r1
 8003612:	6023      	str	r3, [r4, #0]
 8003614:	f7fd fa72 	bl	8000afc <_sbrk>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d102      	bne.n	8003622 <_sbrk_r+0x1a>
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	b103      	cbz	r3, 8003622 <_sbrk_r+0x1a>
 8003620:	602b      	str	r3, [r5, #0]
 8003622:	bd38      	pop	{r3, r4, r5, pc}
 8003624:	2000041c 	.word	0x2000041c

08003628 <__malloc_lock>:
 8003628:	4770      	bx	lr

0800362a <__malloc_unlock>:
 800362a:	4770      	bx	lr

0800362c <_malloc_usable_size_r>:
 800362c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003630:	2800      	cmp	r0, #0
 8003632:	f1a0 0004 	sub.w	r0, r0, #4
 8003636:	bfbc      	itt	lt
 8003638:	580b      	ldrlt	r3, [r1, r0]
 800363a:	18c0      	addlt	r0, r0, r3
 800363c:	4770      	bx	lr
	...

08003640 <_init>:
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003642:	bf00      	nop
 8003644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003646:	bc08      	pop	{r3}
 8003648:	469e      	mov	lr, r3
 800364a:	4770      	bx	lr

0800364c <_fini>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	bf00      	nop
 8003650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003652:	bc08      	pop	{r3}
 8003654:	469e      	mov	lr, r3
 8003656:	4770      	bx	lr
